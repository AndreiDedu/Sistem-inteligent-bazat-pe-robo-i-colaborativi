
Scatter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000018c0  00001954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080010a  0080010a  0000195e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000019d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002186  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dda  00000000  00000000  00003ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ce  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00005e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000955  00000000  00000000  00006234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001139  00000000  00000000  00006b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	02 05       	cpc	r16, r2
      6a:	56 05       	cpc	r21, r6
      6c:	6c 05       	cpc	r22, r12
      6e:	a5 05       	cpc	r26, r5
      70:	ac 05       	cpc	r26, r12
      72:	89 05       	cpc	r24, r9
      74:	af 05       	cpc	r26, r15
      76:	1c 07       	cpc	r17, r28
      78:	20 08       	sbc	r2, r0
      7a:	20 08       	sbc	r2, r0
      7c:	25 07       	cpc	r18, r21
      7e:	28 07       	cpc	r18, r24
      80:	2b 07       	cpc	r18, r27
      82:	2f 07       	cpc	r18, r31
      84:	33 07       	cpc	r19, r19
      86:	37 07       	cpc	r19, r23
      88:	f4 07       	cpc	r31, r20
      8a:	4b 07       	cpc	r20, r27

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
    seed ^= accumulator++>>2;
    return seed;
}

void rand_seed(uint8_t s) {
    seed = s;
      98:	14 be       	out	0x34, r1	; 52
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 ec       	ldi	r30, 0xC0	; 192
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 39       	cpi	r26, 0x94	; 148
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 2e 09 	call	0x125c	; 0x125c <main>
      da:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
      e2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
      e4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
      e6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
      e8:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <tx_mask>
    or tmpreg1, ddrreg
      ec:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
      ee:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
      f0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
      f2:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
      f6:	20 30       	cpi	r18, 0x00	; 0
      f8:	29 f0       	breq	.+10     	; 0x104 <message_send+0x22>
      fa:	00 00       	nop
      fc:	25 b1       	in	r18, 0x05	; 5
      fe:	23 2b       	or	r18, r19
     100:	25 b9       	out	0x05, r18	; 5
     102:	04 c0       	rjmp	.+8      	; 0x10c <message_send+0x2a>
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 c0       	rjmp	.+0      	; 0x10c <message_send+0x2a>
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	30 95       	com	r19
     114:	25 b1       	in	r18, 0x05	; 5
     116:	23 23       	and	r18, r19
     118:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     11a:	2e ea       	ldi	r18, 0xAE	; 174
     11c:	2a 95       	dec	r18
     11e:	f1 f7       	brne	.-4      	; 0x11c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     120:	2b ee       	ldi	r18, 0xEB	; 235

00000122 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     122:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     124:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     126:	0a c0       	rjmp	.+20     	; 0x13c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     128:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     12a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
     12e:	30 95       	com	r19
    in tmpreg1, IR_PORT
     130:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     132:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     134:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     136:	0f be       	out	0x3f, r0	; 63
    return 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret

0000013c <nocollision>:
nocollision:
    nop
     13c:	00 00       	nop
    dec tmpreg1
     13e:	2a 95       	dec	r18
    brne checkcollision
     140:	81 f7       	brne	.-32     	; 0x122 <checkcollision>

    ldi tmpreg1, 0x01
     142:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     144:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
     148:	20 30       	cpi	r18, 0x00	; 0
     14a:	29 f0       	breq	.+10     	; 0x156 <nocollision+0x1a>
     14c:	00 00       	nop
     14e:	25 b1       	in	r18, 0x05	; 5
     150:	23 2b       	or	r18, r19
     152:	25 b9       	out	0x05, r18	; 5
     154:	04 c0       	rjmp	.+8      	; 0x15e <nocollision+0x22>
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 c0       	rjmp	.+0      	; 0x15e <nocollision+0x22>
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 00       	nop
     164:	30 95       	com	r19
     166:	25 b1       	in	r18, 0x05	; 5
     168:	23 23       	and	r18, r19
     16a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
     16c:	00 00       	nop
     16e:	24 e5       	ldi	r18, 0x54	; 84
     170:	2a 95       	dec	r18
     172:	f1 f7       	brne	.-4      	; 0x170 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
     174:	fc 01       	movw	r30, r24
    ldi byteidx, 12
     176:	8c e0       	ldi	r24, 0x0C	; 12

00000178 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
     178:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
     17a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
     17c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
     17e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
     180:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
     182:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
     184:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
     186:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
     188:	50 e0       	ldi	r21, 0x00	; 0

0000018a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
     18a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
     18c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
     18e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
     190:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
     192:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
     196:	20 30       	cpi	r18, 0x00	; 0
     198:	29 f0       	breq	.+10     	; 0x1a4 <sendbit+0x1a>
     19a:	00 00       	nop
     19c:	25 b1       	in	r18, 0x05	; 5
     19e:	23 2b       	or	r18, r19
     1a0:	25 b9       	out	0x05, r18	; 5
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <sendbit+0x22>
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	00 00       	nop
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <sendbit+0x22>
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	00 00       	nop
     1b2:	30 95       	com	r19
     1b4:	25 b1       	in	r18, 0x05	; 5
     1b6:	23 23       	and	r18, r19
     1b8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
     1ba:	00 00       	nop
     1bc:	21 e5       	ldi	r18, 0x51	; 81
     1be:	2a 95       	dec	r18
     1c0:	f1 f7       	brne	.-4      	; 0x1be <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
     1c2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
     1c4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
     1c6:	9a 95       	dec	r25
    brne sendbit
     1c8:	01 f7       	brne	.-64     	; 0x18a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
     1ca:	8a 95       	dec	r24
    brne sendbyte
     1cc:	a9 f6       	brne	.-86     	; 0x178 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
     1ce:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
     1d0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
     1d2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     1d4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     1d6:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
     1da:	30 95       	com	r19
    in tmpreg1, IR_PORT
     1dc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     1de:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     1e0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     1e2:	0f be       	out	0x3f, r0	; 63
    return 1
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret

000001e8 <message_rx_dummy>:
     1e8:	08 95       	ret

000001ea <message_tx_dummy>:
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <message_tx_success_dummy>:
     1f0:	08 95       	ret

000001f2 <kilo_init>:
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	f8 94       	cli
     202:	14 b8       	out	0x04, r1	; 4
     204:	17 b8       	out	0x07, r1	; 7
     206:	1a b8       	out	0x0a, r1	; 10
     208:	15 b8       	out	0x05, r1	; 5
     20a:	18 b8       	out	0x08, r1	; 8
     20c:	1b b8       	out	0x0b, r1	; 11
     20e:	52 9a       	sbi	0x0a, 2	; 10
     210:	5a 9a       	sbi	0x0b, 2	; 11
     212:	14 bc       	out	0x24, r1	; 36
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	85 bd       	out	0x25, r24	; 37
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	87 bd       	out	0x27, r24	; 39
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     222:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     226:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     22a:	2f e8       	ldi	r18, 0x8F	; 143
     22c:	3b e0       	ldi	r19, 0x0B	; 11
     22e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     232:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     23a:	53 98       	cbi	0x0a, 3	; 10
     23c:	23 98       	cbi	0x04, 3	; 4
     23e:	91 ea       	ldi	r25, 0xA1	; 161
     240:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     244:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     248:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     24c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     250:	8b e0       	ldi	r24, 0x0B	; 11
     252:	80 bf       	out	0x30, r24	; 48
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	83 e8       	ldi	r24, 0x83	; 131
     266:	80 83       	st	Z, r24
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	86 fd       	sbrc	r24, 6
     272:	fd cf       	rjmp	.-6      	; 0x26e <kilo_init+0x7c>
     274:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     278:	83 ea       	ldi	r24, 0xA3	; 163
     27a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     28c:	8f 3f       	cpi	r24, 0xFF	; 255
     28e:	11 f0       	breq	.+4      	; 0x294 <kilo_init+0xa2>
     290:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     294:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
     29e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
     2a2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
     2a6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     2b2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tx_mask>
     2b6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tx_mask>
     2ba:	88 73       	andi	r24, 0x38	; 56
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <kilo_init+0xd2>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tx_mask>
     2c4:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     2c8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     2d4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
     2d8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <kilo_ticks>
     2dc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <kilo_ticks+0x1>
     2e0:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks+0x2>
     2e4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x3>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     2ee:	82 e4       	ldi	r24, 0x42	; 66
     2f0:	9f e0       	ldi	r25, 0x0F	; 15
     2f2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <kilo_tx_period+0x1>
     2f6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_tx_period>
     2fa:	80 eb       	ldi	r24, 0xB0	; 176
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     302:	c8 2f       	mov	r28, r24
     304:	81 eb       	ldi	r24, 0xB1	; 177
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     30c:	2c 2f       	mov	r18, r28
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	38 2b       	or	r19, r24
     312:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <kilo_uid+0x1>
     316:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <kilo_uid>
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     322:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
     326:	89 e0       	ldi	r24, 0x09	; 9
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     32e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     33a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
     33e:	84 e1       	ldi	r24, 0x14	; 20
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     346:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
     34a:	0f 2e       	mov	r0, r31
     34c:	f6 e4       	ldi	r31, 0x46	; 70
     34e:	ef 2e       	mov	r14, r31
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
     356:	0f e1       	ldi	r16, 0x1F	; 31
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	c0 e2       	ldi	r28, 0x20	; 32
     35c:	d0 e0       	ldi	r29, 0x00	; 0
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     364:	d8 2e       	mov	r13, r24
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     36e:	2d 2d       	mov	r18, r13
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	32 2f       	mov	r19, r18
     374:	22 27       	eor	r18, r18
     376:	28 2b       	or	r18, r24
     378:	f7 01       	movw	r30, r14
     37a:	21 93       	st	Z+, r18
     37c:	31 93       	st	Z+, r19
     37e:	7f 01       	movw	r14, r30
     380:	ce 01       	movw	r24, r28
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     388:	d8 2e       	mov	r13, r24
     38a:	ce 01       	movw	r24, r28
     38c:	c1 96       	adiw	r24, 0x31	; 49
     38e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <eeprom_read_byte>
     392:	2d 2d       	mov	r18, r13
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	32 2f       	mov	r19, r18
     398:	22 27       	eor	r18, r18
     39a:	28 2b       	or	r18, r24
     39c:	f8 01       	movw	r30, r16
     39e:	21 93       	st	Z+, r18
     3a0:	31 93       	st	Z+, r19
     3a2:	8f 01       	movw	r16, r30
     3a4:	22 96       	adiw	r28, 0x02	; 2
     3a6:	cc 33       	cpi	r28, 0x3C	; 60
     3a8:	d1 05       	cpc	r29, r1
     3aa:	c9 f6       	brne	.-78     	; 0x35e <kilo_init+0x16c>
     3ac:	78 94       	sei
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	08 95       	ret

000003be <__vector_6>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	a8 95       	wdr
     3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d4:	88 61       	ori	r24, 0x18	; 24
     3d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <delay>:
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	41 f0       	breq	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f0:	ef ec       	ldi	r30, 0xCF	; 207
     3f2:	f7 e0       	ldi	r31, 0x07	; 7
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <delay+0x8>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <delay+0xe>
     3fa:	00 00       	nop
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	c1 f7       	brne	.-16     	; 0x3f0 <delay+0x4>
     400:	08 95       	ret

00000402 <set_motors>:
     402:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     406:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     40a:	08 95       	ret

0000040c <spinup_motors>:
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     412:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
     41e:	08 95       	ret

00000420 <rand_hard>:
     420:	6f 92       	push	r6
     422:	7f 92       	push	r7
     424:	9f 92       	push	r9
     426:	af 92       	push	r10
     428:	bf 92       	push	r11
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	91 2c       	mov	r9, r1
     440:	cc e7       	ldi	r28, 0x7C	; 124
     442:	d0 e0       	ldi	r29, 0x00	; 0
     444:	ea e7       	ldi	r30, 0x7A	; 122
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	0f 2e       	mov	r0, r31
     44a:	f8 e7       	ldi	r31, 0x78	; 120
     44c:	6f 2e       	mov	r6, r31
     44e:	71 2c       	mov	r7, r1
     450:	f0 2d       	mov	r31, r0
     452:	0f 2e       	mov	r0, r31
     454:	f3 ea       	ldi	r31, 0xA3	; 163
     456:	af 2e       	mov	r10, r31
     458:	f0 2d       	mov	r31, r0
     45a:	6b e7       	ldi	r22, 0x7B	; 123
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	bb 24       	eor	r11, r11
     460:	b3 94       	inc	r11
     462:	0f 2e       	mov	r0, r31
     464:	f6 e0       	ldi	r31, 0x06	; 6
     466:	cf 2e       	mov	r12, r31
     468:	f0 2d       	mov	r31, r0
     46a:	83 e8       	ldi	r24, 0x83	; 131
     46c:	ee 24       	eor	r14, r14
     46e:	e3 94       	inc	r14
     470:	f1 2c       	mov	r15, r1
     472:	d1 2c       	mov	r13, r1
     474:	f8 94       	cli
     476:	c8 82       	st	Y, r12
     478:	80 83       	st	Z, r24
     47a:	90 81       	ld	r25, Z
     47c:	90 64       	ori	r25, 0x40	; 64
     47e:	90 83       	st	Z, r25
     480:	90 81       	ld	r25, Z
     482:	96 fd       	sbrc	r25, 6
     484:	fd cf       	rjmp	.-6      	; 0x480 <rand_hard+0x60>
     486:	d3 01       	movw	r26, r6
     488:	2d 91       	ld	r18, X+
     48a:	3c 91       	ld	r19, X
     48c:	21 70       	andi	r18, 0x01	; 1
     48e:	90 81       	ld	r25, Z
     490:	90 64       	ori	r25, 0x40	; 64
     492:	90 83       	st	Z, r25
     494:	90 81       	ld	r25, Z
     496:	96 fd       	sbrc	r25, 6
     498:	fd cf       	rjmp	.-6      	; 0x494 <rand_hard+0x74>
     49a:	d3 01       	movw	r26, r6
     49c:	4d 91       	ld	r20, X+
     49e:	5c 91       	ld	r21, X
     4a0:	18 82       	st	Y, r1
     4a2:	a0 82       	st	Z, r10
     4a4:	db 01       	movw	r26, r22
     4a6:	bc 92       	st	X, r11
     4a8:	78 94       	sei
     4aa:	d3 94       	inc	r13
     4ac:	41 70       	andi	r20, 0x01	; 1
     4ae:	24 13       	cpse	r18, r20
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <rand_hard+0x96>
     4b2:	dd 20       	and	r13, r13
     4b4:	fc f6       	brge	.-66     	; 0x474 <rand_hard+0x54>
     4b6:	22 23       	and	r18, r18
     4b8:	41 f0       	breq	.+16     	; 0x4ca <rand_hard+0xaa>
     4ba:	97 01       	movw	r18, r14
     4bc:	00 2e       	mov	r0, r16
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <rand_hard+0xa4>
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <rand_hard+0xa0>
     4c8:	92 2a       	or	r9, r18
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	08 30       	cpi	r16, 0x08	; 8
     4d0:	11 05       	cpc	r17, r1
     4d2:	79 f6       	brne	.-98     	; 0x472 <rand_hard+0x52>
     4d4:	89 2d       	mov	r24, r9
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	bf 90       	pop	r11
     4e8:	af 90       	pop	r10
     4ea:	9f 90       	pop	r9
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	08 95       	ret

000004f2 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4f2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     4f6:	81 11       	cpse	r24, r1
     4f8:	14 c0       	rjmp	.+40     	; 0x522 <get_voltage+0x30>
        cli();                                    // disable interrupts
     4fa:	f8 94       	cli
        adc_setup_conversion(6);
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     502:	ea e7       	ldi	r30, 0x7A	; 122
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	83 e8       	ldi	r24, 0x83	; 131
     508:	80 83       	st	Z, r24
        adc_start_conversion();
     50a:	80 81       	ld	r24, Z
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	80 83       	st	Z, r24
        adc_finish_conversion();
     510:	80 81       	ld	r24, Z
     512:	86 fd       	sbrc	r24, 6
     514:	fd cf       	rjmp	.-6      	; 0x510 <get_voltage+0x1e>
        voltage = ADCW;                           // store AD result
     516:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     51a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     51e:	78 94       	sei
     520:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     526:	08 95       	ret

00000528 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     528:	3f 92       	push	r3
     52a:	4f 92       	push	r4
     52c:	5f 92       	push	r5
     52e:	6f 92       	push	r6
     530:	7f 92       	push	r7
     532:	8f 92       	push	r8
     534:	9f 92       	push	r9
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <estimate_distance+0x24>
     54c:	00 d0       	rcall	.+0      	; 0x54e <estimate_distance+0x26>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     556:	fc 01       	movw	r30, r24
     558:	02 80       	ldd	r0, Z+2	; 0x02
     55a:	f3 81       	ldd	r31, Z+3	; 0x03
     55c:	e0 2d       	mov	r30, r0
     55e:	fc 83       	std	Y+4, r31	; 0x04
     560:	eb 83       	std	Y+3, r30	; 0x03
     562:	e4 38       	cpi	r30, 0x84	; 132
     564:	23 e0       	ldi	r18, 0x03	; 3
     566:	f2 07       	cpc	r31, r18
     568:	0c f0       	brlt	.+2      	; 0x56c <estimate_distance+0x44>
     56a:	82 c0       	rjmp	.+260    	; 0x670 <estimate_distance+0x148>
        if (dist->high_gain > kilo_irhigh[0]) {
     56c:	9f 01       	movw	r18, r30
     56e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_irhigh>
     572:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <kilo_irhigh+0x1>
     576:	8e 17       	cp	r24, r30
     578:	9f 07       	cpc	r25, r31
     57a:	08 f4       	brcc	.+2      	; 0x57e <estimate_distance+0x56>
     57c:	7c c0       	rjmp	.+248    	; 0x676 <estimate_distance+0x14e>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     57e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <kilo_irhigh+0x2>
     582:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <kilo_irhigh+0x3>
     586:	8e 17       	cp	r24, r30
     588:	9f 07       	cpc	r25, r31
     58a:	68 f0       	brcs	.+26     	; 0x5a6 <estimate_distance+0x7e>
     58c:	e3 e2       	ldi	r30, 0x23	; 35
     58e:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     590:	12 e0       	ldi	r17, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     592:	81 91       	ld	r24, Z+
     594:	91 91       	ld	r25, Z+
     596:	82 17       	cp	r24, r18
     598:	93 07       	cpc	r25, r19
     59a:	30 f0       	brcs	.+12     	; 0x5a8 <estimate_distance+0x80>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     59c:	1f 5f       	subi	r17, 0xFF	; 255
     59e:	1e 30       	cpi	r17, 0x0E	; 14
     5a0:	c1 f7       	brne	.-16     	; 0x592 <estimate_distance+0x6a>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     5a2:	1d e0       	ldi	r17, 0x0D	; 13
     5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <estimate_distance+0x80>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     5a6:	11 e0       	ldi	r17, 0x01	; 1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     5a8:	81 2f       	mov	r24, r17
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	fc 01       	movw	r30, r24
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	e1 5e       	subi	r30, 0xE1	; 225
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	60 80       	ld	r6, Z
     5b8:	71 80       	ldd	r7, Z+1	; 0x01
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	fc 01       	movw	r30, r24
     5c0:	e3 5e       	subi	r30, 0xE3	; 227
     5c2:	fe 4f       	sbci	r31, 0xFE	; 254
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	b3 01       	movw	r22, r6
     5ca:	68 1b       	sub	r22, r24
     5cc:	79 0b       	sbc	r23, r25
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     5d6:	9b 01       	movw	r18, r22
     5d8:	ac 01       	movw	r20, r24
     5da:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5e2:	4b 81       	ldd	r20, Y+3	; 0x03
     5e4:	5c 81       	ldd	r21, Y+4	; 0x04
     5e6:	ba 01       	movw	r22, r20
     5e8:	55 0f       	add	r21, r21
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__floatsisf>
     5f2:	4b 01       	movw	r8, r22
     5f4:	5c 01       	movw	r10, r24
     5f6:	b3 01       	movw	r22, r6
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     600:	2b 01       	movw	r4, r22
     602:	3c 01       	movw	r6, r24
     604:	61 2f       	mov	r22, r17
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	5f e3       	ldi	r21, 0x3F	; 63
     618:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	a9 01       	movw	r20, r18
     622:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     626:	a7 01       	movw	r20, r14
     628:	96 01       	movw	r18, r12
     62a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     62e:	9b 01       	movw	r18, r22
     630:	ac 01       	movw	r20, r24
     632:	c3 01       	movw	r24, r6
     634:	b2 01       	movw	r22, r4
     636:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	c5 01       	movw	r24, r10
     640:	b4 01       	movw	r22, r8
     642:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     652:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixsfsi>
     656:	5b 01       	movw	r10, r22
     658:	c7 01       	movw	r24, r14
     65a:	b6 01       	movw	r22, r12
     65c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixsfsi>
     660:	ab 01       	movw	r20, r22
     662:	bc 01       	movw	r22, r24
     664:	c5 01       	movw	r24, r10
     666:	ba 01       	movw	r22, r20
     668:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divmodhi4>
     66c:	36 2e       	mov	r3, r22
     66e:	04 c0       	rjmp	.+8      	; 0x678 <estimate_distance+0x150>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     670:	33 24       	eor	r3, r3
     672:	3a 94       	dec	r3
     674:	01 c0       	rjmp	.+2      	; 0x678 <estimate_distance+0x150>
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     676:	31 2c       	mov	r3, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	9c 81       	ldd	r25, Y+4	; 0x04
     67c:	8d 3b       	cpi	r24, 0xBD	; 189
     67e:	92 40       	sbci	r25, 0x02	; 2
     680:	0c f4       	brge	.+2      	; 0x684 <estimate_distance+0x15c>
     682:	de c0       	rjmp	.+444    	; 0x840 <estimate_distance+0x318>
        if (dist->low_gain > kilo_irlow[0]) {
     684:	e9 81       	ldd	r30, Y+1	; 0x01
     686:	fa 81       	ldd	r31, Y+2	; 0x02
     688:	a0 80       	ld	r10, Z
     68a:	b1 80       	ldd	r11, Z+1	; 0x01
     68c:	95 01       	movw	r18, r10
     68e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_irlow>
     692:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_irlow+0x1>
     696:	8a 15       	cp	r24, r10
     698:	9b 05       	cpc	r25, r11
     69a:	08 f4       	brcc	.+2      	; 0x69e <estimate_distance+0x176>
     69c:	d4 c0       	rjmp	.+424    	; 0x846 <estimate_distance+0x31e>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     69e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <kilo_irlow+0x2>
     6a2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <kilo_irlow+0x3>
     6a6:	8a 15       	cp	r24, r10
     6a8:	9b 05       	cpc	r25, r11
     6aa:	80 f0       	brcs	.+32     	; 0x6cc <estimate_distance+0x1a4>
     6ac:	ea e4       	ldi	r30, 0x4A	; 74
     6ae:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     6b0:	12 e0       	ldi	r17, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     6b2:	81 91       	ld	r24, Z+
     6b4:	91 91       	ld	r25, Z+
     6b6:	82 17       	cp	r24, r18
     6b8:	93 07       	cpc	r25, r19
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <estimate_distance+0x19e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     6bc:	1f 5f       	subi	r17, 0xFF	; 255
     6be:	1e 30       	cpi	r17, 0x0E	; 14
     6c0:	c1 f7       	brne	.-16     	; 0x6b2 <estimate_distance+0x18a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     6c2:	1a e5       	ldi	r17, 0x5A	; 90
     6c4:	68 c0       	rjmp	.+208    	; 0x796 <estimate_distance+0x26e>
                    index_low = i;
                    break;
                }
            }

            if(index_low == 255) {
     6c6:	1f 3f       	cpi	r17, 0xFF	; 255
     6c8:	11 f4       	brne	.+4      	; 0x6ce <estimate_distance+0x1a6>
     6ca:	bf c0       	rjmp	.+382    	; 0x84a <estimate_distance+0x322>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     6cc:	11 e0       	ldi	r17, 0x01	; 1
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     6ce:	81 2f       	mov	r24, r17
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	ea 5b       	subi	r30, 0xBA	; 186
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	60 80       	ld	r6, Z
     6de:	71 80       	ldd	r7, Z+1	; 0x01
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	fc 01       	movw	r30, r24
     6e6:	ec 5b       	subi	r30, 0xBC	; 188
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	b3 01       	movw	r22, r6
     6f0:	68 1b       	sub	r22, r24
     6f2:	79 0b       	sbc	r23, r25
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     704:	6b 01       	movw	r12, r22
     706:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     708:	b5 01       	movw	r22, r10
     70a:	bb 0c       	add	r11, r11
     70c:	88 0b       	sbc	r24, r24
     70e:	99 0b       	sbc	r25, r25
     710:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__floatsisf>
     714:	4b 01       	movw	r8, r22
     716:	5c 01       	movw	r10, r24
     718:	b3 01       	movw	r22, r6
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     722:	2b 01       	movw	r4, r22
     724:	3c 01       	movw	r6, r24
     726:	61 2f       	mov	r22, r17
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     748:	a7 01       	movw	r20, r14
     74a:	96 01       	movw	r18, r12
     74c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     750:	9b 01       	movw	r18, r22
     752:	ac 01       	movw	r20, r24
     754:	c3 01       	movw	r24, r6
     756:	b2 01       	movw	r22, r4
     758:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	c5 01       	movw	r24, r10
     762:	b4 01       	movw	r22, r8
     764:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e2       	ldi	r20, 0x20	; 32
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     774:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixsfsi>
     778:	8b 01       	movw	r16, r22
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixsfsi>
     782:	ab 01       	movw	r20, r22
     784:	bc 01       	movw	r22, r24
     786:	c8 01       	movw	r24, r16
     788:	ba 01       	movw	r22, r20
     78a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divmodhi4>
     78e:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     790:	6f 3f       	cpi	r22, 0xFF	; 255
     792:	09 f4       	brne	.+2      	; 0x796 <estimate_distance+0x26e>
     794:	55 c0       	rjmp	.+170    	; 0x840 <estimate_distance+0x318>
        if (dist_high != 255) {
     796:	ff ef       	ldi	r31, 0xFF	; 255
     798:	3f 16       	cp	r3, r31
     79a:	09 f4       	brne	.+2      	; 0x79e <estimate_distance+0x276>
     79c:	4e c0       	rjmp	.+156    	; 0x83a <estimate_distance+0x312>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     79e:	2b 81       	ldd	r18, Y+3	; 0x03
     7a0:	3c 81       	ldd	r19, Y+4	; 0x04
     7a2:	b9 01       	movw	r22, r18
     7a4:	33 0f       	add	r19, r19
     7a6:	88 0b       	sbc	r24, r24
     7a8:	99 0b       	sbc	r25, r25
     7aa:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__floatsisf>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
     7b2:	63 2d       	mov	r22, r3
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     7be:	4b 01       	movw	r8, r22
     7c0:	5c 01       	movw	r10, r24
     7c2:	a7 01       	movw	r20, r14
     7c4:	96 01       	movw	r18, r12
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	81 e6       	ldi	r24, 0x61	; 97
     7cc:	94 e4       	ldi	r25, 0x44	; 68
     7ce:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	c5 01       	movw	r24, r10
     7d8:	b4 01       	movw	r22, r8
     7da:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
     7e2:	61 2f       	mov	r22, r17
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__floatunsisf>
     7ee:	2b 01       	movw	r4, r22
     7f0:	3c 01       	movw	r6, r24
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	4f e2       	ldi	r20, 0x2F	; 47
     7f8:	54 e4       	ldi	r21, 0x44	; 68
     7fa:	c7 01       	movw	r24, r14
     7fc:	b6 01       	movw	r22, r12
     7fe:	0e 94 4b 09 	call	0x1296	; 0x1296 <__subsf3>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	c3 01       	movw	r24, r6
     808:	b2 01       	movw	r22, r4
     80a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3>
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	c5 01       	movw	r24, r10
     814:	b4 01       	movw	r22, r8
     816:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 e4       	ldi	r20, 0x48	; 72
     820:	53 e4       	ldi	r21, 0x43	; 67
     822:	0e 94 b8 09 	call	0x1370	; 0x1370 <__divsf3>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	44 e0       	ldi	r20, 0x04	; 4
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3>
     832:	0e 94 31 0a 	call	0x1462	; 0x1462 <__fixunssfsi>
     836:	86 2f       	mov	r24, r22
     838:	0a c0       	rjmp	.+20     	; 0x84e <estimate_distance+0x326>
        } else {
            return 33 + dist_low;
     83a:	81 e2       	ldi	r24, 0x21	; 33
     83c:	81 0f       	add	r24, r17
     83e:	07 c0       	rjmp	.+14     	; 0x84e <estimate_distance+0x326>
        }
    } else {
        return 33 + dist_high;
     840:	81 e2       	ldi	r24, 0x21	; 33
     842:	83 0d       	add	r24, r3
     844:	04 c0       	rjmp	.+8      	; 0x84e <estimate_distance+0x326>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	a6 cf       	rjmp	.-180    	; 0x796 <estimate_distance+0x26e>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     84a:	1a e5       	ldi	r17, 0x5A	; 90
     84c:	a4 cf       	rjmp	.-184    	; 0x796 <estimate_distance+0x26e>
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	7f 90       	pop	r7
     870:	6f 90       	pop	r6
     872:	5f 90       	pop	r5
     874:	4f 90       	pop	r4
     876:	3f 90       	pop	r3
     878:	08 95       	ret

0000087a <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
    tx_clock += tx_increment;
     89c:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     8a0:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     8a4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tx_increment>
     8a8:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <tx_increment+0x1>
     8ac:	82 0f       	add	r24, r18
     8ae:	93 1f       	adc	r25, r19
     8b0:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_clock+0x1>
     8b4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_clock>
    tx_increment = 0xFF;
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     8c0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    OCR0A = tx_increment;
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8c8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_ticks>
     8cc:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_ticks+0x1>
     8d0:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <kilo_ticks+0x2>
     8d4:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <kilo_ticks+0x3>
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	a1 1d       	adc	r26, r1
     8dc:	b1 1d       	adc	r27, r1
     8de:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kilo_ticks>
     8e2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <kilo_ticks+0x1>
     8e6:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <kilo_ticks+0x2>
     8ea:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     8ee:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     8f2:	81 11       	cpse	r24, r1
     8f4:	2d c0       	rjmp	.+90     	; 0x950 <__stack+0x51>
     8f6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <kilo_tx_period>
     8fa:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_tx_period+0x1>
     8fe:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     902:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     906:	82 17       	cp	r24, r18
     908:	93 07       	cpc	r25, r19
     90a:	10 f5       	brcc	.+68     	; 0x950 <__stack+0x51>
     90c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     910:	84 30       	cpi	r24, 0x04	; 4
     912:	f1 f4       	brne	.+60     	; 0x950 <__stack+0x51>
        message_t *msg = kilo_message_tx();
     914:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_tx>
     918:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_tx+0x1>
     91c:	09 95       	icall
        if (msg) {
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	b9 f0       	breq	.+46     	; 0x950 <__stack+0x51>
            if (message_send(msg)) {
     922:	0e 94 71 00 	call	0xe2	; 0xe2 <message_send>
     926:	88 23       	and	r24, r24
     928:	51 f0       	breq	.+20     	; 0x93e <__stack+0x3f>
                kilo_message_tx_success();
     92a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx_success>
     92e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx_success+0x1>
     932:	09 95       	icall
                tx_clock = 0;
     934:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     938:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
     93c:	09 c0       	rjmp	.+18     	; 0x950 <__stack+0x51>
            } else {
                tx_increment = rand()&0xFF;
     93e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <rand>
     942:	9c 01       	movw	r18, r24
     944:	33 27       	eor	r19, r19
     946:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <tx_increment+0x1>
     94a:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <tx_increment>
                OCR0A = tx_increment;
     94e:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     950:	ff 91       	pop	r31
     952:	ef 91       	pop	r30
     954:	bf 91       	pop	r27
     956:	af 91       	pop	r26
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	7f 91       	pop	r23
     95e:	6f 91       	pop	r22
     960:	5f 91       	pop	r21
     962:	4f 91       	pop	r20
     964:	3f 91       	pop	r19
     966:	2f 91       	pop	r18
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     972:	80 ff       	sbrs	r24, 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <set_color+0x8>
        DDRD |= (1<<5);
     976:	55 9a       	sbi	0x0a, 5	; 10
     978:	01 c0       	rjmp	.+2      	; 0x97c <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     97a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     97c:	81 ff       	sbrs	r24, 1
     97e:	02 c0       	rjmp	.+4      	; 0x984 <set_color+0x12>
        DDRD |= (1<<4);
     980:	54 9a       	sbi	0x0a, 4	; 10
     982:	01 c0       	rjmp	.+2      	; 0x986 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     984:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     986:	82 ff       	sbrs	r24, 2
     988:	02 c0       	rjmp	.+4      	; 0x98e <set_color+0x1c>
        DDRC |= (1<<3);
     98a:	3b 9a       	sbi	0x07, 3	; 7
     98c:	01 c0       	rjmp	.+2      	; 0x990 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     98e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     990:	83 ff       	sbrs	r24, 3
     992:	02 c0       	rjmp	.+4      	; 0x998 <set_color+0x26>
        DDRC |= (1<<2);
     994:	3a 9a       	sbi	0x07, 2	; 7
     996:	01 c0       	rjmp	.+2      	; 0x99a <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     998:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     99a:	84 ff       	sbrs	r24, 4
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <set_color+0x30>
        DDRC |= (1<<5);
     99e:	3d 9a       	sbi	0x07, 5	; 7
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9a4:	85 ff       	sbrs	r24, 5
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <set_color+0x3a>
        DDRC |= (1<<4);
     9a8:	3c 9a       	sbi	0x07, 4	; 7
     9aa:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9ac:	3c 98       	cbi	0x07, 4	; 7
     9ae:	08 95       	ret

000009b0 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9b0:	4c 01       	movw	r8, r24
     9b2:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9b4:	71 2c       	mov	r7, r1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f3 eb       	ldi	r31, 0xB3	; 179
     9ba:	af 2e       	mov	r10, r31
     9bc:	b1 2c       	mov	r11, r1
     9be:	f0 2d       	mov	r31, r0
    OCR2B = cw;
     9c0:	0f 2e       	mov	r0, r31
     9c2:	f4 eb       	ldi	r31, 0xB4	; 180
     9c4:	cf 2e       	mov	r12, r31
     9c6:	d1 2c       	mov	r13, r1
     9c8:	f0 2d       	mov	r31, r0
     9ca:	66 24       	eor	r6, r6
     9cc:	6a 94       	dec	r6
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9ce:	68 94       	set
     9d0:	33 24       	eor	r3, r3
     9d2:	32 f8       	bld	r3, 2
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
     9d4:	22 24       	eor	r2, r2
     9d6:	23 94       	inc	r2
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
     9d8:	ca e7       	ldi	r28, 0x7A	; 122
     9da:	d0 e0       	ldi	r29, 0x00	; 0
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9dc:	0f 2e       	mov	r0, r31
     9de:	f8 e1       	ldi	r31, 0x18	; 24
     9e0:	4f 2e       	mov	r4, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f9 e2       	ldi	r31, 0x29	; 41
     9e8:	5f 2e       	mov	r5, r31
     9ea:	f0 2d       	mov	r31, r0
                ports_off();
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     9ec:	00 e6       	ldi	r16, 0x60	; 96
     9ee:	10 e0       	ldi	r17, 0x00	; 0

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9f0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <kilo_state>
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	e7 30       	cpi	r30, 0x07	; 7
     9f8:	f1 05       	cpc	r31, r1
     9fa:	d0 f7       	brcc	.-12     	; 0x9f0 <kilo_start+0x40>
     9fc:	ec 5c       	subi	r30, 0xCC	; 204
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__tablejump2__>
            case SLEEPING:
                cli();
     a04:	f8 94       	cli
                acomp_off();
     a06:	80 b7       	in	r24, 0x30	; 48
     a08:	87 7f       	andi	r24, 0xF7	; 247
     a0a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a0c:	88 81       	ld	r24, Y
     a0e:	8f 77       	andi	r24, 0x7F	; 127
     a10:	88 83       	st	Y, r24
                ports_off();
     a12:	14 b8       	out	0x04, r1	; 4
     a14:	17 b8       	out	0x07, r1	; 7
     a16:	1a b8       	out	0x0a, r1	; 10
     a18:	15 b8       	out	0x05, r1	; 5
     a1a:	18 b8       	out	0x08, r1	; 8
     a1c:	1b b8       	out	0x0b, r1	; 11
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	a8 95       	wdr
     a24:	40 92 60 00 	sts	0x0060, r4	; 0x800060 <__DATA_REGION_ORIGIN__>
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	50 92 60 00 	sts	0x0060, r5	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a2e:	f8 01       	movw	r30, r16
     a30:	80 81       	ld	r24, Z
     a32:	80 64       	ori	r24, 0x40	; 64
     a34:	80 83       	st	Z, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a36:	83 b7       	in	r24, 0x33	; 51
     a38:	81 7f       	andi	r24, 0xF1	; 241
     a3a:	84 60       	ori	r24, 0x04	; 4
     a3c:	83 bf       	out	0x33, r24	; 51
                cli();
     a3e:	f8 94       	cli
                sleep_enable();
     a40:	83 b7       	in	r24, 0x33	; 51
     a42:	81 60       	ori	r24, 0x01	; 1
     a44:	83 bf       	out	0x33, r24	; 51
                sei();
     a46:	78 94       	sei
                sleep_cpu();
     a48:	88 95       	sleep
                sleep_disable();
     a4a:	83 b7       	in	r24, 0x33	; 51
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	83 bf       	out	0x33, r24	; 51
                sei();
     a50:	78 94       	sei
                rx_busy = 0;
     a52:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
                ports_on();
     a56:	52 9a       	sbi	0x0a, 2	; 10
     a58:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a5a:	88 81       	ld	r24, Y
     a5c:	80 68       	ori	r24, 0x80	; 128
     a5e:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a60:	87 e5       	ldi	r24, 0x57	; 87
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <kilo_start+0xb4>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <kilo_start+0xba>
     a6a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a6c:	80 b7       	in	r24, 0x30	; 48
     a6e:	88 61       	ori	r24, 0x18	; 24
     a70:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a72:	8f e3       	ldi	r24, 0x3F	; 63
     a74:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a78:	ef e1       	ldi	r30, 0x1F	; 31
     a7a:	fe e4       	ldi	r31, 0x4E	; 78
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <kilo_start+0xcc>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <kilo_start+0xd2>
     a82:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a84:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     a88:	88 23       	and	r24, r24
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <kilo_start+0xf4>
                    set_color(RGB(3,0,0));
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     a92:	ff ef       	ldi	r31, 0xFF	; 255
     a94:	20 e7       	ldi	r18, 0x70	; 112
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	f1 50       	subi	r31, 0x01	; 1
     a9a:	20 40       	sbci	r18, 0x00	; 0
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <kilo_start+0xe8>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <kilo_start+0xf2>
     aa2:	00 00       	nop
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
                break;
     aaa:	a2 cf       	rjmp	.-188    	; 0x9f0 <kilo_start+0x40>
            case IDLE:
                set_color(RGB(0,3,0));
     aac:	8c e0       	ldi	r24, 0x0C	; 12
     aae:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     ab2:	ef ec       	ldi	r30, 0xCF	; 207
     ab4:	f7 e0       	ldi	r31, 0x07	; 7
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <kilo_start+0x106>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <kilo_start+0x10c>
     abc:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     ac4:	ff ef       	ldi	r31, 0xFF	; 255
     ac6:	21 ee       	ldi	r18, 0xE1	; 225
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	f1 50       	subi	r31, 0x01	; 1
     acc:	20 40       	sbci	r18, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <kilo_start+0x11a>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <kilo_start+0x124>
     ad4:	00 00       	nop
     ad6:	8c cf       	rjmp	.-232    	; 0x9f0 <kilo_start+0x40>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     ad8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get_voltage>
                if(voltage > 682)
     adc:	8b 3a       	cpi	r24, 0xAB	; 171
     ade:	e2 e0       	ldi	r30, 0x02	; 2
     ae0:	9e 07       	cpc	r25, r30
     ae2:	24 f0       	brlt	.+8      	; 0xaec <kilo_start+0x13c>
                    set_color(RGB(0,3,0));
     ae4:	8c e0       	ldi	r24, 0x0C	; 12
     ae6:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     aea:	82 cf       	rjmp	.-252    	; 0x9f0 <kilo_start+0x40>
                else if(voltage > 648)
     aec:	89 38       	cpi	r24, 0x89	; 137
     aee:	f2 e0       	ldi	r31, 0x02	; 2
     af0:	9f 07       	cpc	r25, r31
     af2:	24 f0       	brlt	.+8      	; 0xafc <kilo_start+0x14c>
                    set_color(RGB(0,0,3));
     af4:	80 e3       	ldi	r24, 0x30	; 48
     af6:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     afa:	7a cf       	rjmp	.-268    	; 0x9f0 <kilo_start+0x40>
                else if(voltage > 614)
     afc:	87 36       	cpi	r24, 0x67	; 103
     afe:	92 40       	sbci	r25, 0x02	; 2
     b00:	24 f0       	brlt	.+8      	; 0xb0a <kilo_start+0x15a>
                    set_color(RGB(3,3,0));
     b02:	8f e0       	ldi	r24, 0x0F	; 15
     b04:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     b08:	73 cf       	rjmp	.-282    	; 0x9f0 <kilo_start+0x40>
                else
                    set_color(RGB(3,0,0));
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     b10:	6f cf       	rjmp	.-290    	; 0x9f0 <kilo_start+0x40>
                break;
            case CHARGING:
                if (is_charging()) {
     b12:	48 99       	sbic	0x09, 0	; 9
     b14:	16 c0       	rjmp	.+44     	; 0xb42 <kilo_start+0x192>
                    set_color(RGB(1,0,0));
     b16:	82 2d       	mov	r24, r2
     b18:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     b1c:	8f ec       	ldi	r24, 0xCF	; 207
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <kilo_start+0x170>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <kilo_start+0x176>
     b26:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	e1 ee       	ldi	r30, 0xE1	; 225
     b32:	f4 e0       	ldi	r31, 0x04	; 4
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	e0 40       	sbci	r30, 0x00	; 0
     b38:	f0 40       	sbci	r31, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <kilo_start+0x184>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <kilo_start+0x18e>
     b3e:	00 00       	nop
     b40:	57 cf       	rjmp	.-338    	; 0x9f0 <kilo_start+0x40>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
     b48:	53 cf       	rjmp	.-346    	; 0x9f0 <kilo_start+0x40>
                break;
            case SETUP:
                if (!has_setup) {
     b4a:	71 10       	cpse	r7, r1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <kilo_start+0x1a4>
                    setup();
     b4e:	f4 01       	movw	r30, r8
     b50:	09 95       	icall
                    has_setup = 1;
     b52:	72 2c       	mov	r7, r2
                }
                kilo_state = RUNNING;
     b54:	30 92 0c 01 	sts	0x010C, r3	; 0x80010c <kilo_state>
            case RUNNING:
                loop();
     b58:	f7 01       	movw	r30, r14
     b5a:	09 95       	icall
                break;
     b5c:	49 cf       	rjmp	.-366    	; 0x9f0 <kilo_start+0x40>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b5e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     b62:	81 11       	cpse	r24, r1
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <kilo_start+0x1c4>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b66:	f5 01       	movw	r30, r10
     b68:	10 82       	st	Z, r1
    OCR2B = cw;
     b6a:	f6 01       	movw	r30, r12
     b6c:	10 82       	st	Z, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b6e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
     b72:	3e cf       	rjmp	.-388    	; 0x9f0 <kilo_start+0x40>
                } else {
                    if (cur_motion != prev_motion) {
     b74:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
     b78:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <prev_motion>
     b7c:	98 17       	cp	r25, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <kilo_start+0x1d2>
     b80:	37 cf       	rjmp	.-402    	; 0x9f0 <kilo_start+0x40>
                        prev_motion = cur_motion;
     b82:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     b86:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b8a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	89 f4       	brne	.+34     	; 0xbb4 <kilo_start+0x204>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b92:	f5 01       	movw	r30, r10
     b94:	60 82       	st	Z, r6
    OCR2B = cw;
     b96:	f6 01       	movw	r30, r12
     b98:	10 82       	st	Z, r1
     b9a:	8f e2       	ldi	r24, 0x2F	; 47
     b9c:	95 e7       	ldi	r25, 0x75	; 117
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <kilo_start+0x1ee>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <kilo_start+0x1f4>
     ba4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ba6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     baa:	f5 01       	movw	r30, r10
     bac:	80 83       	st	Z, r24
    OCR2B = cw;
     bae:	f6 01       	movw	r30, r12
     bb0:	10 82       	st	Z, r1
     bb2:	1e cf       	rjmp	.-452    	; 0x9f0 <kilo_start+0x40>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bb4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	89 f4       	brne	.+34     	; 0xbde <kilo_start+0x22e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bbc:	f5 01       	movw	r30, r10
     bbe:	10 82       	st	Z, r1
    OCR2B = cw;
     bc0:	f6 01       	movw	r30, r12
     bc2:	60 82       	st	Z, r6
     bc4:	8f e2       	ldi	r24, 0x2F	; 47
     bc6:	95 e7       	ldi	r25, 0x75	; 117
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <kilo_start+0x218>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <kilo_start+0x21e>
     bce:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bd0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bd4:	f5 01       	movw	r30, r10
     bd6:	10 82       	st	Z, r1
    OCR2B = cw;
     bd8:	f6 01       	movw	r30, r12
     bda:	80 83       	st	Z, r24
     bdc:	09 cf       	rjmp	.-494    	; 0x9f0 <kilo_start+0x40>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bde:	f5 01       	movw	r30, r10
     be0:	10 82       	st	Z, r1
    OCR2B = cw;
     be2:	f6 01       	movw	r30, r12
     be4:	60 82       	st	Z, r6
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     be6:	f5 01       	movw	r30, r10
     be8:	60 82       	st	Z, r6
    OCR2B = cw;
     bea:	f6 01       	movw	r30, r12
     bec:	60 82       	st	Z, r6
     bee:	8f e2       	ldi	r24, 0x2F	; 47
     bf0:	95 e7       	ldi	r25, 0x75	; 117
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <kilo_start+0x242>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <kilo_start+0x248>
     bf8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bfa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
     bfe:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c02:	f5 01       	movw	r30, r10
     c04:	90 83       	st	Z, r25
    OCR2B = cw;
     c06:	f6 01       	movw	r30, r12
     c08:	80 83       	st	Z, r24
     c0a:	f2 ce       	rjmp	.-540    	; 0x9f0 <kilo_start+0x40>

00000c0c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
    rx_timer_off();
     c1a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     c1e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c22:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     c2c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
    rx_busy = 0;
     c30:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    adc_trigger_high_gain();
     c34:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c38:	93 ea       	ldi	r25, 0xA3	; 163
     c3a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c3e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c76:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c7a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c84:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_leadingbit>
     c88:	88 23       	and	r24, r24
     c8a:	31 f1       	breq	.+76     	; 0xcd8 <__vector_23+0x88>
        rx_timer_on();
     c8c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c90:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
     c9a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
        rx_leadingbit = 0;
     c9e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <rx_leadingbit>
        if (rx_leadingbyte) {
     ca2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     ca6:	88 23       	and	r24, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <__vector_23+0x5c>
     caa:	ca c1       	rjmp	.+916    	; 0x1040 <__vector_23+0x3f0>
            adc_finish_conversion();
     cac:	ea e7       	ldi	r30, 0x7A	; 122
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	86 fd       	sbrc	r24, 6
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <__vector_23+0x60>
            rx_dist.high_gain = ADCW;
     cb6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     cba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     cbe:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x3>
     cc2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist+0x2>
            adc_trigger_low_gain();
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     ccc:	93 ea       	ldi	r25, 0xA3	; 163
     cce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cd2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     cd6:	b4 c1       	rjmp	.+872    	; 0x1040 <__vector_23+0x3f0>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cd8:	c9 01       	movw	r24, r18
     cda:	87 58       	subi	r24, 0x87	; 135
     cdc:	91 09       	sbc	r25, r1
     cde:	84 37       	cpi	r24, 0x74	; 116
     ce0:	99 40       	sbci	r25, 0x09	; 9
     ce2:	a8 f0       	brcs	.+42     	; 0xd0e <__vector_23+0xbe>
            rx_timer_off();
     ce4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     ce8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
            rx_leadingbyte = 1;
     cf6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
            rx_busy = 0;
     cfa:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
            adc_trigger_high_gain();
     cfe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     d02:	93 ea       	ldi	r25, 0xA3	; 163
     d04:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d08:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     d0c:	99 c1       	rjmp	.+818    	; 0x1040 <__vector_23+0x3f0>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d0e:	26 58       	subi	r18, 0x86	; 134
     d10:	31 09       	sbc	r19, r1
     d12:	a4 ef       	ldi	r26, 0xF4	; 244
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__umulhisi3>
     d1a:	aa 27       	eor	r26, r26
     d1c:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	78 f4       	brcc	.+30     	; 0xd40 <__vector_23+0xf0>
                rx_bytevalue |= (1<<bitindex);
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	f9 01       	movw	r30, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <__vector_23+0xde>
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	8a 95       	dec	r24
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <__vector_23+0xda>
     d32:	cf 01       	movw	r24, r30
     d34:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     d38:	89 2b       	or	r24, r25
     d3a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_bytevalue>
     d3e:	80 c1       	rjmp	.+768    	; 0x1040 <__vector_23+0x3f0>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
                if (rx_leadingbyte) {
     d46:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     d4a:	88 23       	and	r24, r24
     d4c:	51 f1       	breq	.+84     	; 0xda2 <__vector_23+0x152>
                    adc_finish_conversion();
     d4e:	ea e7       	ldi	r30, 0x7A	; 122
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	86 fd       	sbrc	r24, 6
     d56:	fd cf       	rjmp	.-6      	; 0xd52 <__vector_23+0x102>
                    rx_dist.low_gain = ADCW;
     d58:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     d5c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     d60:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <rx_dist+0x1>
     d64:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_dist>
                    adc_trigger_high_gain();
     d68:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     d6c:	83 ea       	ldi	r24, 0xA3	; 163
     d6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d78:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rx_bytevalue>
     d7c:	88 23       	and	r24, r24
     d7e:	61 f0       	breq	.+24     	; 0xd98 <__vector_23+0x148>
                        rx_timer_off();
     d80:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     d84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     d92:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
     d96:	54 c1       	rjmp	.+680    	; 0x1040 <__vector_23+0x3f0>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d98:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <rx_leadingbyte>
                        rx_byteindex = 0;
     d9c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
     da0:	4f c1       	rjmp	.+670    	; 0x1040 <__vector_23+0x3f0>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     da2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rx_byteindex>
     da6:	e8 2f       	mov	r30, r24
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	e8 59       	subi	r30, 0x98	; 152
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     db2:	90 83       	st	Z, r25
                    rx_byteindex++;
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     dba:	8c 30       	cpi	r24, 0x0C	; 12
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__vector_23+0x170>
     dbe:	40 c1       	rjmp	.+640    	; 0x1040 <__vector_23+0x3f0>
                        rx_timer_off();
     dc0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     dc4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dc8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     dd2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     dd6:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <rx_msg+0xa>
     dda:	d0 91 73 01 	lds	r29, 0x0173	; 0x800173 <rx_msg+0xb>
     dde:	88 e6       	ldi	r24, 0x68	; 104
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 33 08 	call	0x1066	; 0x1066 <message_crc>
     de6:	c8 17       	cp	r28, r24
     de8:	d9 07       	cpc	r29, r25
     dea:	09 f0       	breq	.+2      	; 0xdee <__vector_23+0x19e>
     dec:	29 c1       	rjmp	.+594    	; 0x1040 <__vector_23+0x3f0>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     dee:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <rx_msg+0x9>
     df2:	88 23       	and	r24, r24
     df4:	54 f0       	brlt	.+20     	; 0xe0a <__vector_23+0x1ba>
        kilo_message_rx(&rx_msg, &rx_dist);
     df6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <kilo_message_rx>
     dfa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <kilo_message_rx+0x1>
     dfe:	6d e3       	ldi	r22, 0x3D	; 61
     e00:	71 e0       	ldi	r23, 0x01	; 1
     e02:	88 e6       	ldi	r24, 0x68	; 104
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	09 95       	icall
     e08:	1b c1       	rjmp	.+566    	; 0x1040 <__vector_23+0x3f0>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e0a:	88 58       	subi	r24, 0x88	; 136
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	30 f0       	brcs	.+12     	; 0xe1c <__vector_23+0x1cc>
        motors_off();
     e10:	53 98       	cbi	0x0a, 3	; 10
     e12:	23 98       	cbi	0x04, 3	; 4
     e14:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     e18:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
     e1c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <rx_msg+0x9>
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	e0 58       	subi	r30, 0x80	; 128
     e26:	f1 09       	sbc	r31, r1
     e28:	eb 30       	cpi	r30, 0x0B	; 11
     e2a:	f1 05       	cpc	r31, r1
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <__vector_23+0x1e0>
     e2e:	08 c1       	rjmp	.+528    	; 0x1040 <__vector_23+0x3f0>
     e30:	e5 5c       	subi	r30, 0xC5	; 197
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e38:	ee e6       	ldi	r30, 0x6E	; 110
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8d 7f       	andi	r24, 0xFD	; 253
     e40:	80 83       	st	Z, r24
     e42:	16 bc       	out	0x26, r1	; 38
            bootload();
     e44:	e0 e0       	ldi	r30, 0x00	; 0
     e46:	f0 e7       	ldi	r31, 0x70	; 112
     e48:	09 95       	icall
            break;
        case RESET:
            reset();
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e50:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <kilo_state>
     e54:	f5 c0       	rjmp	.+490    	; 0x1040 <__vector_23+0x3f0>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     e5c:	f1 c0       	rjmp	.+482    	; 0x1040 <__vector_23+0x3f0>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e5e:	85 e0       	ldi	r24, 0x05	; 5
     e60:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     e64:	ed c0       	rjmp	.+474    	; 0x1040 <__vector_23+0x3f0>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     e6c:	e9 c0       	rjmp	.+466    	; 0x1040 <__vector_23+0x3f0>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e6e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	09 f4       	brne	.+2      	; 0xe78 <__vector_23+0x228>
     e76:	e4 c0       	rjmp	.+456    	; 0x1040 <__vector_23+0x3f0>
     e78:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_23+0x232>
     e80:	df c0       	rjmp	.+446    	; 0x1040 <__vector_23+0x3f0>
                motors_on();
     e82:	53 9a       	sbi	0x0a, 3	; 10
     e84:	23 9a       	sbi	0x04, 3	; 4
     e86:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     e8a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     e94:	d5 c0       	rjmp	.+426    	; 0x1040 <__vector_23+0x3f0>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e96:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	09 f4       	brne	.+2      	; 0xea0 <__vector_23+0x250>
     e9e:	4b c0       	rjmp	.+150    	; 0xf36 <__vector_23+0x2e6>
     ea0:	28 f4       	brcc	.+10     	; 0xeac <__vector_23+0x25c>
     ea2:	88 23       	and	r24, r24
     ea4:	51 f0       	breq	.+20     	; 0xeba <__vector_23+0x26a>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	d9 f1       	breq	.+118    	; 0xf20 <__vector_23+0x2d0>
     eaa:	8c c0       	rjmp	.+280    	; 0xfc4 <__vector_23+0x374>
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	09 f4       	brne	.+2      	; 0xeb2 <__vector_23+0x262>
     eb0:	57 c0       	rjmp	.+174    	; 0xf60 <__vector_23+0x310>
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <__vector_23+0x268>
     eb6:	68 c0       	rjmp	.+208    	; 0xf88 <__vector_23+0x338>
     eb8:	85 c0       	rjmp	.+266    	; 0xfc4 <__vector_23+0x374>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     eba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     ebe:	86 30       	cpi	r24, 0x06	; 6
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_23+0x274>
     ec2:	be c0       	rjmp	.+380    	; 0x1040 <__vector_23+0x3f0>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     ec4:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_uid>
     ec8:	80 eb       	ldi	r24, 0xB0	; 176
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     ed0:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <kilo_uid+0x1>
     ed4:	81 eb       	ldi	r24, 0xB1	; 177
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     edc:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_turn_left>
     ee0:	85 e0       	ldi	r24, 0x05	; 5
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ee8:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
     eec:	89 e0       	ldi	r24, 0x09	; 9
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ef4:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_straight_left>
     ef8:	8c e0       	ldi	r24, 0x0C	; 12
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f00:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
     f04:	84 e1       	ldi	r24, 0x14	; 20
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <eeprom_write_byte>
                        motors_off();
     f0c:	53 98       	cbi	0x0a, 3	; 10
     f0e:	23 98       	cbi	0x04, 3	; 4
     f10:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     f14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     f1e:	52 c0       	rjmp	.+164    	; 0xfc4 <__vector_23+0x374>
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f20:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x1>
     f24:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_msg+0x2>
     f28:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <kilo_uid+0x1>
     f2c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_uid>
                    cur_motion = MOVE_STOP;
     f30:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     f34:	4b c0       	rjmp	.+150    	; 0xfcc <__vector_23+0x37c>
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f36:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	39 f4       	brne	.+14     	; 0xf4c <__vector_23+0x2fc>
     f3e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <rx_msg+0x3>
     f42:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
     f46:	98 17       	cp	r25, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <__vector_23+0x2fc>
     f4a:	40 c0       	rjmp	.+128    	; 0xfcc <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     f4c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_LEFT;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_turn_left = calibmsg->turn_left;
     f56:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x3>
     f5a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
     f5e:	36 c0       	rjmp	.+108    	; 0xfcc <__vector_23+0x37c>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f60:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__vector_23+0x324>
     f68:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_msg+0x4>
     f6c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <kilo_turn_right>
     f70:	98 17       	cp	r25, r24
     f72:	61 f1       	breq	.+88     	; 0xfcc <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     f74:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_turn_right = calibmsg->turn_right;
     f7e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x4>
     f82:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
     f86:	22 c0       	rjmp	.+68     	; 0xfcc <__vector_23+0x37c>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f88:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	61 f4       	brne	.+24     	; 0xfa8 <__vector_23+0x358>
     f90:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x6>
     f94:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
     f98:	98 13       	cpse	r25, r24
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <__vector_23+0x358>
     f9c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <rx_msg+0x5>
     fa0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <kilo_straight_left>
     fa4:	98 17       	cp	r25, r24
     fa6:	91 f0       	breq	.+36     	; 0xfcc <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     fa8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_straight_left = calibmsg->straight_left;
     fb2:	e8 e6       	ldi	r30, 0x68	; 104
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	85 81       	ldd	r24, Z+5	; 0x05
     fb8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     fbc:	86 81       	ldd	r24, Z+6	; 0x06
     fbe:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <__vector_23+0x37c>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     fc4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     fc8:	88 23       	and	r24, r24
     fca:	d1 f1       	breq	.+116    	; 0x1040 <__vector_23+0x3f0>
     fcc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     fd0:	86 30       	cpi	r24, 0x06	; 6
     fd2:	b1 f1       	breq	.+108    	; 0x1040 <__vector_23+0x3f0>
                motors_on();
     fd4:	53 9a       	sbi	0x0a, 3	; 10
     fd6:	23 9a       	sbi	0x04, 3	; 4
     fd8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     fdc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
     fe0:	86 e0       	ldi	r24, 0x06	; 6
     fe2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     fe6:	2c c0       	rjmp	.+88     	; 0x1040 <__vector_23+0x3f0>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     fe8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     fec:	86 30       	cpi	r24, 0x06	; 6
     fee:	81 f0       	breq	.+32     	; 0x1010 <__vector_23+0x3c0>
                motors_on();
     ff0:	53 9a       	sbi	0x0a, 3	; 10
     ff2:	23 9a       	sbi	0x04, 3	; 4
     ff4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     ff8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                set_color(RGB(0,0,0));
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1002:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
    1006:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                kilo_state = MOVING;
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9c 01       	movw	r18, r24
    1016:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <rx_msg>
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <__vector_23+0x3d0>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <__vector_23+0x3cc>
    1024:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_uid>
    1028:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <kilo_uid+0x1>
    102c:	82 23       	and	r24, r18
    102e:	93 23       	and	r25, r19
    1030:	89 2b       	or	r24, r25
    1032:	21 f0       	breq	.+8      	; 0x103c <__vector_23+0x3ec>
                cur_motion = MOVE_LEFT;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__vector_23+0x3f0>
            else
                cur_motion = MOVE_STOP;
    103c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
                    }
                }
            }
        }
    }
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1066:	fc 01       	movw	r30, r24
    1068:	ac 01       	movw	r20, r24
    106a:	46 5f       	subi	r20, 0xF6	; 246
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1072:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1074:	82 27       	eor	r24, r18
    1076:	08 2e       	mov	r0, r24
    1078:	82 95       	swap	r24
    107a:	80 7f       	andi	r24, 0xF0	; 240
    107c:	80 25       	eor	r24, r0
    107e:	09 2e       	mov	r0, r25
    1080:	98 2f       	mov	r25, r24
    1082:	82 95       	swap	r24
    1084:	8f 70       	andi	r24, 0x0F	; 15
    1086:	08 26       	eor	r0, r24
    1088:	86 95       	lsr	r24
    108a:	98 27       	eor	r25, r24
    108c:	89 27       	eor	r24, r25
    108e:	88 0f       	add	r24, r24
    1090:	88 0f       	add	r24, r24
    1092:	88 0f       	add	r24, r24
    1094:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1096:	e4 17       	cp	r30, r20
    1098:	f5 07       	cpc	r31, r21
    109a:	59 f7       	brne	.-42     	; 0x1072 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    109c:	08 95       	ret

0000109e <message_tx>:
}

message_t *message_tx()
{
	return &tx;
}
    109e:	88 e8       	ldi	r24, 0x88	; 136
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	08 95       	ret

000010a4 <message_tx_success>:

void message_tx_success()
{
	message_sent = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <message_sent+0x1>
    10ac:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <message_sent>
    10b0:	08 95       	ret

000010b2 <setup>:
			set_motors(0, kilo_turn_right);
		}
	}
}

void setup() {
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
	tx.type = NORMAL;
    10b6:	c8 e8       	ldi	r28, 0x88	; 136
    10b8:	d1 e0       	ldi	r29, 0x01	; 1
    10ba:	19 86       	std	Y+9, r1	; 0x09
	tx.data[0] = kilo_uid;
    10bc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_uid>
    10c0:	88 83       	st	Y, r24
	tx.crc = message_crc(&tx);
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 33 08 	call	0x1066	; 0x1066 <message_crc>
    10c8:	9b 87       	std	Y+11, r25	; 0x0b
    10ca:	8a 87       	std	Y+10, r24	; 0x0a
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <message_rx>:

void message_rx(message_t *msg, distance_measurement_t *dist_measure) {
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
	rx = *msg;  //store the incoming message
    10d8:	9c e0       	ldi	r25, 0x0C	; 12
    10da:	fe 01       	movw	r30, r28
    10dc:	ac e7       	ldi	r26, 0x7C	; 124
    10de:	b1 e0       	ldi	r27, 0x01	; 1
    10e0:	01 90       	ld	r0, Z+
    10e2:	0d 92       	st	X+, r0
    10e4:	9a 95       	dec	r25
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <message_rx+0xe>
	rcvd_data = msg->data[0];
    10e8:	88 81       	ld	r24, Y
    10ea:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <rcvd_data>
	dist = estimate_distance(dist_measure);
    10ee:	cb 01       	movw	r24, r22
    10f0:	0e 94 94 02 	call	0x528	; 0x528 <estimate_distance>
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <dist+0x1>
    10fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <dist>
	if(dist < Distance_Threshold) {
    10fe:	8b 34       	cpi	r24, 0x4B	; 75
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <message_rx+0x3e>
		message_rcved = 1;      // set the flag to 1 to indicate that a new message arrived		
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <message_rcved+0x1>
    110c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <message_rcved>
	}
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <set_motion>:
int random_number = 0;
int dice = 0;
int current_motion = STOP;

void set_motion(int new_motion) {
	if (current_motion != new_motion) {
    1116:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <current_motion>
    111a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <current_motion+0x1>
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	59 f1       	breq	.+86     	; 0x117a <set_motion+0x64>
		current_motion = new_motion;
    1124:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <current_motion+0x1>
    1128:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <current_motion>
		
		if (current_motion == STOP) {
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	29 f4       	brne	.+10     	; 0x113a <set_motion+0x24>
			set_motors(0, 0);
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    1138:	08 95       	ret
		}
		else if (current_motion == FORWARD) {
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	49 f4       	brne	.+18     	; 0x1152 <set_motion+0x3c>
			spinup_motors();
    1140:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
			set_motors(kilo_straight_left, kilo_straight_right);
    1144:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
    1148:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <kilo_straight_left>
    114c:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    1150:	08 95       	ret
		}
		else if (current_motion == LEFT) {
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	91 05       	cpc	r25, r1
    1156:	41 f4       	brne	.+16     	; 0x1168 <set_motion+0x52>
			spinup_motors();
    1158:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
			set_motors(kilo_turn_left, 0);
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
    1162:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    1166:	08 95       	ret
		}
		else if (current_motion == RIGHT) {
    1168:	03 97       	sbiw	r24, 0x03	; 3
    116a:	39 f4       	brne	.+14     	; 0x117a <set_motion+0x64>
			spinup_motors();
    116c:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
			set_motors(0, kilo_turn_right);
    1170:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    117a:	08 95       	ret

0000117c <loop>:
{
	message_sent = 1;
}

void loop() {
	if(kilo_ticks > (last_changed + 32)) {
    117c:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <kilo_ticks>
    1180:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <kilo_ticks+0x1>
    1184:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <kilo_ticks+0x2>
    1188:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <kilo_ticks+0x3>
    118c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <last_changed>
    1190:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <last_changed+0x1>
    1194:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <last_changed+0x2>
    1198:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <last_changed+0x3>
    119c:	80 96       	adiw	r24, 0x20	; 32
    119e:	a1 1d       	adc	r26, r1
    11a0:	b1 1d       	adc	r27, r1
    11a2:	84 17       	cp	r24, r20
    11a4:	95 07       	cpc	r25, r21
    11a6:	a6 07       	cpc	r26, r22
    11a8:	b7 07       	cpc	r27, r23
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <loop+0x32>
    11ac:	56 c0       	rjmp	.+172    	; 0x125a <loop+0xde>
		last_changed = kilo_ticks;
    11ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_ticks>
    11b2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_ticks+0x1>
    11b6:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <kilo_ticks+0x2>
    11ba:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <kilo_ticks+0x3>
    11be:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <last_changed>
    11c2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <last_changed+0x1>
    11c6:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <last_changed+0x2>
    11ca:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <last_changed+0x3>
		if(message_rcved == 1) {
    11ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <message_rcved>
    11d2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <message_rcved+0x1>
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	c9 f5       	brne	.+114    	; 0x124c <loop+0xd0>
			message_rcved = 0;
    11da:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <message_rcved+0x1>
    11de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <message_rcved>

			random_number = rand_hard();
    11e2:	0e 94 10 02 	call	0x420	; 0x420 <rand_hard>
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <random_number+0x1>
    11ec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <random_number>
			dice = random_number % 4;
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	90 78       	andi	r25, 0x80	; 128
    11f4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dice+0x1>
    11f8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dice>

			if (dice == 0 || dice == 1) {
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	40 f4       	brcc	.+16     	; 0x1212 <loop+0x96>
				set_motion(FORWARD);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 8b 08 	call	0x1116	; 0x1116 <set_motion>
				set_color(RGB(1,0,0));
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
    1210:	08 95       	ret
			} else if (dice == 2) {
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	41 f4       	brne	.+16     	; 0x1228 <loop+0xac>
				set_motion(LEFT);
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 8b 08 	call	0x1116	; 0x1116 <set_motion>
				set_color(RGB(0,0,1));
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
    1226:	08 95       	ret
			} else if (dice == 3) {
    1228:	03 97       	sbiw	r24, 0x03	; 3
    122a:	41 f4       	brne	.+16     	; 0x123c <loop+0xc0>
				set_motion(RIGHT);
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 8b 08 	call	0x1116	; 0x1116 <set_motion>
				set_color(RGB(0,1,1));;
    1234:	84 e1       	ldi	r24, 0x14	; 20
    1236:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
    123a:	08 95       	ret
			} else {
				set_motion(STOP);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 8b 08 	call	0x1116	; 0x1116 <set_motion>
				set_color(RGB(0,0,0));
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
    124a:	08 95       	ret
			}
		}
		else {
			set_motion(STOP);
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 8b 08 	call	0x1116	; 0x1116 <set_motion>
			set_color(RGB(0,1,0));
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	0e 94 b9 04 	call	0x972	; 0x972 <set_color>
    125a:	08 95       	ret

0000125c <main>:
	}
}

int main(void)
{
	kilo_init();
    125c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <kilo_init>

	//For message tx
	kilo_message_tx = message_tx;
    1260:	8f e4       	ldi	r24, 0x4F	; 79
    1262:	98 e0       	ldi	r25, 0x08	; 8
    1264:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_tx+0x1>
    1268:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_tx>
	kilo_message_tx_success = message_tx_success;
    126c:	82 e5       	ldi	r24, 0x52	; 82
    126e:	98 e0       	ldi	r25, 0x08	; 8
    1270:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx_success+0x1>
    1274:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx_success>

	//For message rx
	kilo_message_rx = message_rx;
    1278:	89 e6       	ldi	r24, 0x69	; 105
    127a:	98 e0       	ldi	r25, 0x08	; 8
    127c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <kilo_message_rx+0x1>
    1280:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <kilo_message_rx>

	kilo_start(setup,loop);
    1284:	6e eb       	ldi	r22, 0xBE	; 190
    1286:	78 e0       	ldi	r23, 0x08	; 8
    1288:	89 e5       	ldi	r24, 0x59	; 89
    128a:	98 e0       	ldi	r25, 0x08	; 8
    128c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <kilo_start>
}
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	08 95       	ret

00001296 <__subsf3>:
    1296:	50 58       	subi	r21, 0x80	; 128

00001298 <__addsf3>:
    1298:	bb 27       	eor	r27, r27
    129a:	aa 27       	eor	r26, r26
    129c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__addsf3x>
    12a0:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_round>
    12a4:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_pscA>
    12a8:	38 f0       	brcs	.+14     	; 0x12b8 <__addsf3+0x20>
    12aa:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscB>
    12ae:	20 f0       	brcs	.+8      	; 0x12b8 <__addsf3+0x20>
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__addsf3+0x28>
    12b2:	9f 3f       	cpi	r25, 0xFF	; 255
    12b4:	19 f4       	brne	.+6      	; 0x12bc <__addsf3+0x24>
    12b6:	26 f4       	brtc	.+8      	; 0x12c0 <__addsf3+0x28>
    12b8:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_nan>
    12bc:	0e f4       	brtc	.+2      	; 0x12c0 <__addsf3+0x28>
    12be:	e0 95       	com	r30
    12c0:	e7 fb       	bst	r30, 7
    12c2:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_inf>

000012c6 <__addsf3x>:
    12c6:	e9 2f       	mov	r30, r25
    12c8:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_split3>
    12cc:	58 f3       	brcs	.-42     	; 0x12a4 <__addsf3+0xc>
    12ce:	ba 17       	cp	r27, r26
    12d0:	62 07       	cpc	r22, r18
    12d2:	73 07       	cpc	r23, r19
    12d4:	84 07       	cpc	r24, r20
    12d6:	95 07       	cpc	r25, r21
    12d8:	20 f0       	brcs	.+8      	; 0x12e2 <__addsf3x+0x1c>
    12da:	79 f4       	brne	.+30     	; 0x12fa <__addsf3x+0x34>
    12dc:	a6 f5       	brtc	.+104    	; 0x1346 <__addsf3x+0x80>
    12de:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_zero>
    12e2:	0e f4       	brtc	.+2      	; 0x12e6 <__addsf3x+0x20>
    12e4:	e0 95       	com	r30
    12e6:	0b 2e       	mov	r0, r27
    12e8:	ba 2f       	mov	r27, r26
    12ea:	a0 2d       	mov	r26, r0
    12ec:	0b 01       	movw	r0, r22
    12ee:	b9 01       	movw	r22, r18
    12f0:	90 01       	movw	r18, r0
    12f2:	0c 01       	movw	r0, r24
    12f4:	ca 01       	movw	r24, r20
    12f6:	a0 01       	movw	r20, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	ff 27       	eor	r31, r31
    12fc:	59 1b       	sub	r21, r25
    12fe:	99 f0       	breq	.+38     	; 0x1326 <__addsf3x+0x60>
    1300:	59 3f       	cpi	r21, 0xF9	; 249
    1302:	50 f4       	brcc	.+20     	; 0x1318 <__addsf3x+0x52>
    1304:	50 3e       	cpi	r21, 0xE0	; 224
    1306:	68 f1       	brcs	.+90     	; 0x1362 <__addsf3x+0x9c>
    1308:	1a 16       	cp	r1, r26
    130a:	f0 40       	sbci	r31, 0x00	; 0
    130c:	a2 2f       	mov	r26, r18
    130e:	23 2f       	mov	r18, r19
    1310:	34 2f       	mov	r19, r20
    1312:	44 27       	eor	r20, r20
    1314:	58 5f       	subi	r21, 0xF8	; 248
    1316:	f3 cf       	rjmp	.-26     	; 0x12fe <__addsf3x+0x38>
    1318:	46 95       	lsr	r20
    131a:	37 95       	ror	r19
    131c:	27 95       	ror	r18
    131e:	a7 95       	ror	r26
    1320:	f0 40       	sbci	r31, 0x00	; 0
    1322:	53 95       	inc	r21
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__addsf3x+0x52>
    1326:	7e f4       	brtc	.+30     	; 0x1346 <__addsf3x+0x80>
    1328:	1f 16       	cp	r1, r31
    132a:	ba 0b       	sbc	r27, r26
    132c:	62 0b       	sbc	r22, r18
    132e:	73 0b       	sbc	r23, r19
    1330:	84 0b       	sbc	r24, r20
    1332:	ba f0       	brmi	.+46     	; 0x1362 <__addsf3x+0x9c>
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	a1 f0       	breq	.+40     	; 0x1360 <__addsf3x+0x9a>
    1338:	ff 0f       	add	r31, r31
    133a:	bb 1f       	adc	r27, r27
    133c:	66 1f       	adc	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	c2 f7       	brpl	.-16     	; 0x1334 <__addsf3x+0x6e>
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <__addsf3x+0x9c>
    1346:	ba 0f       	add	r27, r26
    1348:	62 1f       	adc	r22, r18
    134a:	73 1f       	adc	r23, r19
    134c:	84 1f       	adc	r24, r20
    134e:	48 f4       	brcc	.+18     	; 0x1362 <__addsf3x+0x9c>
    1350:	87 95       	ror	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b7 95       	ror	r27
    1358:	f7 95       	ror	r31
    135a:	9e 3f       	cpi	r25, 0xFE	; 254
    135c:	08 f0       	brcs	.+2      	; 0x1360 <__addsf3x+0x9a>
    135e:	b0 cf       	rjmp	.-160    	; 0x12c0 <__addsf3+0x28>
    1360:	93 95       	inc	r25
    1362:	88 0f       	add	r24, r24
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__addsf3x+0xa2>
    1366:	99 27       	eor	r25, r25
    1368:	ee 0f       	add	r30, r30
    136a:	97 95       	ror	r25
    136c:	87 95       	ror	r24
    136e:	08 95       	ret

00001370 <__divsf3>:
    1370:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divsf3x>
    1374:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_round>
    1378:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscB>
    137c:	58 f0       	brcs	.+22     	; 0x1394 <__divsf3+0x24>
    137e:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_pscA>
    1382:	40 f0       	brcs	.+16     	; 0x1394 <__divsf3+0x24>
    1384:	29 f4       	brne	.+10     	; 0x1390 <__divsf3+0x20>
    1386:	5f 3f       	cpi	r21, 0xFF	; 255
    1388:	29 f0       	breq	.+10     	; 0x1394 <__divsf3+0x24>
    138a:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_inf>
    138e:	51 11       	cpse	r21, r1
    1390:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_szero>
    1394:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_nan>

00001398 <__divsf3x>:
    1398:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_split3>
    139c:	68 f3       	brcs	.-38     	; 0x1378 <__divsf3+0x8>

0000139e <__divsf3_pse>:
    139e:	99 23       	and	r25, r25
    13a0:	b1 f3       	breq	.-20     	; 0x138e <__divsf3+0x1e>
    13a2:	55 23       	and	r21, r21
    13a4:	91 f3       	breq	.-28     	; 0x138a <__divsf3+0x1a>
    13a6:	95 1b       	sub	r25, r21
    13a8:	55 0b       	sbc	r21, r21
    13aa:	bb 27       	eor	r27, r27
    13ac:	aa 27       	eor	r26, r26
    13ae:	62 17       	cp	r22, r18
    13b0:	73 07       	cpc	r23, r19
    13b2:	84 07       	cpc	r24, r20
    13b4:	38 f0       	brcs	.+14     	; 0x13c4 <__divsf3_pse+0x26>
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	44 1f       	adc	r20, r20
    13c0:	aa 1f       	adc	r26, r26
    13c2:	a9 f3       	breq	.-22     	; 0x13ae <__divsf3_pse+0x10>
    13c4:	35 d0       	rcall	.+106    	; 0x1430 <__divsf3_pse+0x92>
    13c6:	0e 2e       	mov	r0, r30
    13c8:	3a f0       	brmi	.+14     	; 0x13d8 <__divsf3_pse+0x3a>
    13ca:	e0 e8       	ldi	r30, 0x80	; 128
    13cc:	32 d0       	rcall	.+100    	; 0x1432 <__divsf3_pse+0x94>
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	e6 95       	lsr	r30
    13d4:	00 1c       	adc	r0, r0
    13d6:	ca f7       	brpl	.-14     	; 0x13ca <__divsf3_pse+0x2c>
    13d8:	2b d0       	rcall	.+86     	; 0x1430 <__divsf3_pse+0x92>
    13da:	fe 2f       	mov	r31, r30
    13dc:	29 d0       	rcall	.+82     	; 0x1430 <__divsf3_pse+0x92>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	bb 1f       	adc	r27, r27
    13e6:	26 17       	cp	r18, r22
    13e8:	37 07       	cpc	r19, r23
    13ea:	48 07       	cpc	r20, r24
    13ec:	ab 07       	cpc	r26, r27
    13ee:	b0 e8       	ldi	r27, 0x80	; 128
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <__divsf3_pse+0x56>
    13f2:	bb 0b       	sbc	r27, r27
    13f4:	80 2d       	mov	r24, r0
    13f6:	bf 01       	movw	r22, r30
    13f8:	ff 27       	eor	r31, r31
    13fa:	93 58       	subi	r25, 0x83	; 131
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	3a f0       	brmi	.+14     	; 0x140e <__divsf3_pse+0x70>
    1400:	9e 3f       	cpi	r25, 0xFE	; 254
    1402:	51 05       	cpc	r21, r1
    1404:	78 f0       	brcs	.+30     	; 0x1424 <__divsf3_pse+0x86>
    1406:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_inf>
    140a:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_szero>
    140e:	5f 3f       	cpi	r21, 0xFF	; 255
    1410:	e4 f3       	brlt	.-8      	; 0x140a <__divsf3_pse+0x6c>
    1412:	98 3e       	cpi	r25, 0xE8	; 232
    1414:	d4 f3       	brlt	.-12     	; 0x140a <__divsf3_pse+0x6c>
    1416:	86 95       	lsr	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	b7 95       	ror	r27
    141e:	f7 95       	ror	r31
    1420:	9f 5f       	subi	r25, 0xFF	; 255
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__divsf3_pse+0x78>
    1424:	88 0f       	add	r24, r24
    1426:	91 1d       	adc	r25, r1
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret
    1430:	e1 e0       	ldi	r30, 0x01	; 1
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	bb 1f       	adc	r27, r27
    143a:	62 17       	cp	r22, r18
    143c:	73 07       	cpc	r23, r19
    143e:	84 07       	cpc	r24, r20
    1440:	ba 07       	cpc	r27, r26
    1442:	20 f0       	brcs	.+8      	; 0x144c <__divsf3_pse+0xae>
    1444:	62 1b       	sub	r22, r18
    1446:	73 0b       	sbc	r23, r19
    1448:	84 0b       	sbc	r24, r20
    144a:	ba 0b       	sbc	r27, r26
    144c:	ee 1f       	adc	r30, r30
    144e:	88 f7       	brcc	.-30     	; 0x1432 <__divsf3_pse+0x94>
    1450:	e0 95       	com	r30
    1452:	08 95       	ret

00001454 <__fixsfsi>:
    1454:	0e 94 31 0a 	call	0x1462	; 0x1462 <__fixunssfsi>
    1458:	68 94       	set
    145a:	b1 11       	cpse	r27, r1
    145c:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_szero>
    1460:	08 95       	ret

00001462 <__fixunssfsi>:
    1462:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_splitA>
    1466:	88 f0       	brcs	.+34     	; 0x148a <__fixunssfsi+0x28>
    1468:	9f 57       	subi	r25, 0x7F	; 127
    146a:	98 f0       	brcs	.+38     	; 0x1492 <__fixunssfsi+0x30>
    146c:	b9 2f       	mov	r27, r25
    146e:	99 27       	eor	r25, r25
    1470:	b7 51       	subi	r27, 0x17	; 23
    1472:	b0 f0       	brcs	.+44     	; 0x14a0 <__fixunssfsi+0x3e>
    1474:	e1 f0       	breq	.+56     	; 0x14ae <__fixunssfsi+0x4c>
    1476:	66 0f       	add	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	1a f0       	brmi	.+6      	; 0x1486 <__fixunssfsi+0x24>
    1480:	ba 95       	dec	r27
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__fixunssfsi+0x14>
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <__fixunssfsi+0x4c>
    1486:	b1 30       	cpi	r27, 0x01	; 1
    1488:	91 f0       	breq	.+36     	; 0x14ae <__fixunssfsi+0x4c>
    148a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__fp_zero>
    148e:	b1 e0       	ldi	r27, 0x01	; 1
    1490:	08 95       	ret
    1492:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_zero>
    1496:	67 2f       	mov	r22, r23
    1498:	78 2f       	mov	r23, r24
    149a:	88 27       	eor	r24, r24
    149c:	b8 5f       	subi	r27, 0xF8	; 248
    149e:	39 f0       	breq	.+14     	; 0x14ae <__fixunssfsi+0x4c>
    14a0:	b9 3f       	cpi	r27, 0xF9	; 249
    14a2:	cc f3       	brlt	.-14     	; 0x1496 <__fixunssfsi+0x34>
    14a4:	86 95       	lsr	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b3 95       	inc	r27
    14ac:	d9 f7       	brne	.-10     	; 0x14a4 <__fixunssfsi+0x42>
    14ae:	3e f4       	brtc	.+14     	; 0x14be <__fixunssfsi+0x5c>
    14b0:	90 95       	com	r25
    14b2:	80 95       	com	r24
    14b4:	70 95       	com	r23
    14b6:	61 95       	neg	r22
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	08 95       	ret

000014c0 <__floatunsisf>:
    14c0:	e8 94       	clt
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <__floatsisf+0x12>

000014c4 <__floatsisf>:
    14c4:	97 fb       	bst	r25, 7
    14c6:	3e f4       	brtc	.+14     	; 0x14d6 <__floatsisf+0x12>
    14c8:	90 95       	com	r25
    14ca:	80 95       	com	r24
    14cc:	70 95       	com	r23
    14ce:	61 95       	neg	r22
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	99 23       	and	r25, r25
    14d8:	a9 f0       	breq	.+42     	; 0x1504 <__floatsisf+0x40>
    14da:	f9 2f       	mov	r31, r25
    14dc:	96 e9       	ldi	r25, 0x96	; 150
    14de:	bb 27       	eor	r27, r27
    14e0:	93 95       	inc	r25
    14e2:	f6 95       	lsr	r31
    14e4:	87 95       	ror	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b7 95       	ror	r27
    14ec:	f1 11       	cpse	r31, r1
    14ee:	f8 cf       	rjmp	.-16     	; 0x14e0 <__floatsisf+0x1c>
    14f0:	fa f4       	brpl	.+62     	; 0x1530 <__floatsisf+0x6c>
    14f2:	bb 0f       	add	r27, r27
    14f4:	11 f4       	brne	.+4      	; 0x14fa <__floatsisf+0x36>
    14f6:	60 ff       	sbrs	r22, 0
    14f8:	1b c0       	rjmp	.+54     	; 0x1530 <__floatsisf+0x6c>
    14fa:	6f 5f       	subi	r22, 0xFF	; 255
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	16 c0       	rjmp	.+44     	; 0x1530 <__floatsisf+0x6c>
    1504:	88 23       	and	r24, r24
    1506:	11 f0       	breq	.+4      	; 0x150c <__floatsisf+0x48>
    1508:	96 e9       	ldi	r25, 0x96	; 150
    150a:	11 c0       	rjmp	.+34     	; 0x152e <__floatsisf+0x6a>
    150c:	77 23       	and	r23, r23
    150e:	21 f0       	breq	.+8      	; 0x1518 <__floatsisf+0x54>
    1510:	9e e8       	ldi	r25, 0x8E	; 142
    1512:	87 2f       	mov	r24, r23
    1514:	76 2f       	mov	r23, r22
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <__floatsisf+0x5e>
    1518:	66 23       	and	r22, r22
    151a:	71 f0       	breq	.+28     	; 0x1538 <__floatsisf+0x74>
    151c:	96 e8       	ldi	r25, 0x86	; 134
    151e:	86 2f       	mov	r24, r22
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	2a f0       	brmi	.+10     	; 0x1530 <__floatsisf+0x6c>
    1526:	9a 95       	dec	r25
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	da f7       	brpl	.-10     	; 0x1526 <__floatsisf+0x62>
    1530:	88 0f       	add	r24, r24
    1532:	96 95       	lsr	r25
    1534:	87 95       	ror	r24
    1536:	97 f9       	bld	r25, 7
    1538:	08 95       	ret

0000153a <__fp_inf>:
    153a:	97 f9       	bld	r25, 7
    153c:	9f 67       	ori	r25, 0x7F	; 127
    153e:	80 e8       	ldi	r24, 0x80	; 128
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	08 95       	ret

00001546 <__fp_nan>:
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	80 ec       	ldi	r24, 0xC0	; 192
    154a:	08 95       	ret

0000154c <__fp_pscA>:
    154c:	00 24       	eor	r0, r0
    154e:	0a 94       	dec	r0
    1550:	16 16       	cp	r1, r22
    1552:	17 06       	cpc	r1, r23
    1554:	18 06       	cpc	r1, r24
    1556:	09 06       	cpc	r0, r25
    1558:	08 95       	ret

0000155a <__fp_pscB>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	12 16       	cp	r1, r18
    1560:	13 06       	cpc	r1, r19
    1562:	14 06       	cpc	r1, r20
    1564:	05 06       	cpc	r0, r21
    1566:	08 95       	ret

00001568 <__fp_round>:
    1568:	09 2e       	mov	r0, r25
    156a:	03 94       	inc	r0
    156c:	00 0c       	add	r0, r0
    156e:	11 f4       	brne	.+4      	; 0x1574 <__fp_round+0xc>
    1570:	88 23       	and	r24, r24
    1572:	52 f0       	brmi	.+20     	; 0x1588 <__fp_round+0x20>
    1574:	bb 0f       	add	r27, r27
    1576:	40 f4       	brcc	.+16     	; 0x1588 <__fp_round+0x20>
    1578:	bf 2b       	or	r27, r31
    157a:	11 f4       	brne	.+4      	; 0x1580 <__fp_round+0x18>
    157c:	60 ff       	sbrs	r22, 0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <__fp_round+0x20>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	08 95       	ret

0000158a <__fp_split3>:
    158a:	57 fd       	sbrc	r21, 7
    158c:	90 58       	subi	r25, 0x80	; 128
    158e:	44 0f       	add	r20, r20
    1590:	55 1f       	adc	r21, r21
    1592:	59 f0       	breq	.+22     	; 0x15aa <__fp_splitA+0x10>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	71 f0       	breq	.+28     	; 0x15b4 <__fp_splitA+0x1a>
    1598:	47 95       	ror	r20

0000159a <__fp_splitA>:
    159a:	88 0f       	add	r24, r24
    159c:	97 fb       	bst	r25, 7
    159e:	99 1f       	adc	r25, r25
    15a0:	61 f0       	breq	.+24     	; 0x15ba <__fp_splitA+0x20>
    15a2:	9f 3f       	cpi	r25, 0xFF	; 255
    15a4:	79 f0       	breq	.+30     	; 0x15c4 <__fp_splitA+0x2a>
    15a6:	87 95       	ror	r24
    15a8:	08 95       	ret
    15aa:	12 16       	cp	r1, r18
    15ac:	13 06       	cpc	r1, r19
    15ae:	14 06       	cpc	r1, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	f2 cf       	rjmp	.-28     	; 0x1598 <__fp_split3+0xe>
    15b4:	46 95       	lsr	r20
    15b6:	f1 df       	rcall	.-30     	; 0x159a <__fp_splitA>
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <__fp_splitA+0x30>
    15ba:	16 16       	cp	r1, r22
    15bc:	17 06       	cpc	r1, r23
    15be:	18 06       	cpc	r1, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	f1 cf       	rjmp	.-30     	; 0x15a6 <__fp_splitA+0xc>
    15c4:	86 95       	lsr	r24
    15c6:	71 05       	cpc	r23, r1
    15c8:	61 05       	cpc	r22, r1
    15ca:	08 94       	sec
    15cc:	08 95       	ret

000015ce <__fp_zero>:
    15ce:	e8 94       	clt

000015d0 <__fp_szero>:
    15d0:	bb 27       	eor	r27, r27
    15d2:	66 27       	eor	r22, r22
    15d4:	77 27       	eor	r23, r23
    15d6:	cb 01       	movw	r24, r22
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret

000015dc <__mulsf3>:
    15dc:	0e 94 01 0b 	call	0x1602	; 0x1602 <__mulsf3x>
    15e0:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_round>
    15e4:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_pscA>
    15e8:	38 f0       	brcs	.+14     	; 0x15f8 <__mulsf3+0x1c>
    15ea:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscB>
    15ee:	20 f0       	brcs	.+8      	; 0x15f8 <__mulsf3+0x1c>
    15f0:	95 23       	and	r25, r21
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <__mulsf3+0x1c>
    15f4:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_inf>
    15f8:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_nan>
    15fc:	11 24       	eor	r1, r1
    15fe:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_szero>

00001602 <__mulsf3x>:
    1602:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_split3>
    1606:	70 f3       	brcs	.-36     	; 0x15e4 <__mulsf3+0x8>

00001608 <__mulsf3_pse>:
    1608:	95 9f       	mul	r25, r21
    160a:	c1 f3       	breq	.-16     	; 0x15fc <__mulsf3+0x20>
    160c:	95 0f       	add	r25, r21
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	55 1f       	adc	r21, r21
    1612:	62 9f       	mul	r22, r18
    1614:	f0 01       	movw	r30, r0
    1616:	72 9f       	mul	r23, r18
    1618:	bb 27       	eor	r27, r27
    161a:	f0 0d       	add	r31, r0
    161c:	b1 1d       	adc	r27, r1
    161e:	63 9f       	mul	r22, r19
    1620:	aa 27       	eor	r26, r26
    1622:	f0 0d       	add	r31, r0
    1624:	b1 1d       	adc	r27, r1
    1626:	aa 1f       	adc	r26, r26
    1628:	64 9f       	mul	r22, r20
    162a:	66 27       	eor	r22, r22
    162c:	b0 0d       	add	r27, r0
    162e:	a1 1d       	adc	r26, r1
    1630:	66 1f       	adc	r22, r22
    1632:	82 9f       	mul	r24, r18
    1634:	22 27       	eor	r18, r18
    1636:	b0 0d       	add	r27, r0
    1638:	a1 1d       	adc	r26, r1
    163a:	62 1f       	adc	r22, r18
    163c:	73 9f       	mul	r23, r19
    163e:	b0 0d       	add	r27, r0
    1640:	a1 1d       	adc	r26, r1
    1642:	62 1f       	adc	r22, r18
    1644:	83 9f       	mul	r24, r19
    1646:	a0 0d       	add	r26, r0
    1648:	61 1d       	adc	r22, r1
    164a:	22 1f       	adc	r18, r18
    164c:	74 9f       	mul	r23, r20
    164e:	33 27       	eor	r19, r19
    1650:	a0 0d       	add	r26, r0
    1652:	61 1d       	adc	r22, r1
    1654:	23 1f       	adc	r18, r19
    1656:	84 9f       	mul	r24, r20
    1658:	60 0d       	add	r22, r0
    165a:	21 1d       	adc	r18, r1
    165c:	82 2f       	mov	r24, r18
    165e:	76 2f       	mov	r23, r22
    1660:	6a 2f       	mov	r22, r26
    1662:	11 24       	eor	r1, r1
    1664:	9f 57       	subi	r25, 0x7F	; 127
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	9a f0       	brmi	.+38     	; 0x1690 <__mulsf3_pse+0x88>
    166a:	f1 f0       	breq	.+60     	; 0x16a8 <__mulsf3_pse+0xa0>
    166c:	88 23       	and	r24, r24
    166e:	4a f0       	brmi	.+18     	; 0x1682 <__mulsf3_pse+0x7a>
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	bb 1f       	adc	r27, r27
    1676:	66 1f       	adc	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	91 50       	subi	r25, 0x01	; 1
    167e:	50 40       	sbci	r21, 0x00	; 0
    1680:	a9 f7       	brne	.-22     	; 0x166c <__mulsf3_pse+0x64>
    1682:	9e 3f       	cpi	r25, 0xFE	; 254
    1684:	51 05       	cpc	r21, r1
    1686:	80 f0       	brcs	.+32     	; 0x16a8 <__mulsf3_pse+0xa0>
    1688:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_inf>
    168c:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_szero>
    1690:	5f 3f       	cpi	r21, 0xFF	; 255
    1692:	e4 f3       	brlt	.-8      	; 0x168c <__mulsf3_pse+0x84>
    1694:	98 3e       	cpi	r25, 0xE8	; 232
    1696:	d4 f3       	brlt	.-12     	; 0x168c <__mulsf3_pse+0x84>
    1698:	86 95       	lsr	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	f7 95       	ror	r31
    16a2:	e7 95       	ror	r30
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <__mulsf3_pse+0x90>
    16a8:	fe 2b       	or	r31, r30
    16aa:	88 0f       	add	r24, r24
    16ac:	91 1d       	adc	r25, r1
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <__divmodhi4>:
    16b6:	97 fb       	bst	r25, 7
    16b8:	07 2e       	mov	r0, r23
    16ba:	16 f4       	brtc	.+4      	; 0x16c0 <__divmodhi4+0xa>
    16bc:	00 94       	com	r0
    16be:	07 d0       	rcall	.+14     	; 0x16ce <__divmodhi4_neg1>
    16c0:	77 fd       	sbrc	r23, 7
    16c2:	09 d0       	rcall	.+18     	; 0x16d6 <__divmodhi4_neg2>
    16c4:	0e 94 84 0b 	call	0x1708	; 0x1708 <__udivmodhi4>
    16c8:	07 fc       	sbrc	r0, 7
    16ca:	05 d0       	rcall	.+10     	; 0x16d6 <__divmodhi4_neg2>
    16cc:	3e f4       	brtc	.+14     	; 0x16dc <__divmodhi4_exit>

000016ce <__divmodhi4_neg1>:
    16ce:	90 95       	com	r25
    16d0:	81 95       	neg	r24
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	08 95       	ret

000016d6 <__divmodhi4_neg2>:
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255

000016dc <__divmodhi4_exit>:
    16dc:	08 95       	ret

000016de <__tablejump2__>:
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	05 90       	lpm	r0, Z+
    16e4:	f4 91       	lpm	r31, Z
    16e6:	e0 2d       	mov	r30, r0
    16e8:	09 94       	ijmp

000016ea <__umulhisi3>:
    16ea:	a2 9f       	mul	r26, r18
    16ec:	b0 01       	movw	r22, r0
    16ee:	b3 9f       	mul	r27, r19
    16f0:	c0 01       	movw	r24, r0
    16f2:	a3 9f       	mul	r26, r19
    16f4:	70 0d       	add	r23, r0
    16f6:	81 1d       	adc	r24, r1
    16f8:	11 24       	eor	r1, r1
    16fa:	91 1d       	adc	r25, r1
    16fc:	b2 9f       	mul	r27, r18
    16fe:	70 0d       	add	r23, r0
    1700:	81 1d       	adc	r24, r1
    1702:	11 24       	eor	r1, r1
    1704:	91 1d       	adc	r25, r1
    1706:	08 95       	ret

00001708 <__udivmodhi4>:
    1708:	aa 1b       	sub	r26, r26
    170a:	bb 1b       	sub	r27, r27
    170c:	51 e1       	ldi	r21, 0x11	; 17
    170e:	07 c0       	rjmp	.+14     	; 0x171e <__udivmodhi4_ep>

00001710 <__udivmodhi4_loop>:
    1710:	aa 1f       	adc	r26, r26
    1712:	bb 1f       	adc	r27, r27
    1714:	a6 17       	cp	r26, r22
    1716:	b7 07       	cpc	r27, r23
    1718:	10 f0       	brcs	.+4      	; 0x171e <__udivmodhi4_ep>
    171a:	a6 1b       	sub	r26, r22
    171c:	b7 0b       	sbc	r27, r23

0000171e <__udivmodhi4_ep>:
    171e:	88 1f       	adc	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	5a 95       	dec	r21
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__udivmodhi4_loop>
    1726:	80 95       	com	r24
    1728:	90 95       	com	r25
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	08 95       	ret

00001730 <do_rand>:
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
    1746:	68 81       	ld	r22, Y
    1748:	79 81       	ldd	r23, Y+1	; 0x01
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	61 15       	cp	r22, r1
    1750:	71 05       	cpc	r23, r1
    1752:	81 05       	cpc	r24, r1
    1754:	91 05       	cpc	r25, r1
    1756:	21 f4       	brne	.+8      	; 0x1760 <do_rand+0x30>
    1758:	64 e2       	ldi	r22, 0x24	; 36
    175a:	79 ed       	ldi	r23, 0xD9	; 217
    175c:	8b e5       	ldi	r24, 0x5B	; 91
    175e:	97 e0       	ldi	r25, 0x07	; 7
    1760:	2d e1       	ldi	r18, 0x1D	; 29
    1762:	33 ef       	ldi	r19, 0xF3	; 243
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__divmodsi4>
    176c:	49 01       	movw	r8, r18
    176e:	5a 01       	movw	r10, r20
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	a7 ea       	ldi	r26, 0xA7	; 167
    1776:	b1 e4       	ldi	r27, 0x41	; 65
    1778:	0e 94 29 0c 	call	0x1852	; 0x1852 <__muluhisi3>
    177c:	6b 01       	movw	r12, r22
    177e:	7c 01       	movw	r14, r24
    1780:	ac ee       	ldi	r26, 0xEC	; 236
    1782:	b4 ef       	ldi	r27, 0xF4	; 244
    1784:	a5 01       	movw	r20, r10
    1786:	94 01       	movw	r18, r8
    1788:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulohisi3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8c 0d       	add	r24, r12
    1792:	9d 1d       	adc	r25, r13
    1794:	ae 1d       	adc	r26, r14
    1796:	bf 1d       	adc	r27, r15
    1798:	b7 ff       	sbrs	r27, 7
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <do_rand+0x72>
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	a1 09       	sbc	r26, r1
    17a0:	b0 48       	sbci	r27, 0x80	; 128
    17a2:	88 83       	st	Y, r24
    17a4:	99 83       	std	Y+1, r25	; 0x01
    17a6:	aa 83       	std	Y+2, r26	; 0x02
    17a8:	bb 83       	std	Y+3, r27	; 0x03
    17aa:	9f 77       	andi	r25, 0x7F	; 127
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	08 95       	ret

000017c2 <rand_r>:
    17c2:	0e 94 98 0b 	call	0x1730	; 0x1730 <do_rand>
    17c6:	08 95       	ret

000017c8 <rand>:
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	0e 94 98 0b 	call	0x1730	; 0x1730 <do_rand>
    17d0:	08 95       	ret

000017d2 <srand>:
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    17da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    17de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    17e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    17e6:	08 95       	ret

000017e8 <eeprom_read_byte>:
    17e8:	f9 99       	sbic	0x1f, 1	; 31
    17ea:	fe cf       	rjmp	.-4      	; 0x17e8 <eeprom_read_byte>
    17ec:	92 bd       	out	0x22, r25	; 34
    17ee:	81 bd       	out	0x21, r24	; 33
    17f0:	f8 9a       	sbi	0x1f, 0	; 31
    17f2:	99 27       	eor	r25, r25
    17f4:	80 b5       	in	r24, 0x20	; 32
    17f6:	08 95       	ret

000017f8 <eeprom_write_byte>:
    17f8:	26 2f       	mov	r18, r22

000017fa <eeprom_write_r18>:
    17fa:	f9 99       	sbic	0x1f, 1	; 31
    17fc:	fe cf       	rjmp	.-4      	; 0x17fa <eeprom_write_r18>
    17fe:	1f ba       	out	0x1f, r1	; 31
    1800:	92 bd       	out	0x22, r25	; 34
    1802:	81 bd       	out	0x21, r24	; 33
    1804:	20 bd       	out	0x20, r18	; 32
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	fa 9a       	sbi	0x1f, 2	; 31
    180c:	f9 9a       	sbi	0x1f, 1	; 31
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	08 95       	ret

00001814 <__divmodsi4>:
    1814:	05 2e       	mov	r0, r21
    1816:	97 fb       	bst	r25, 7
    1818:	1e f4       	brtc	.+6      	; 0x1820 <__divmodsi4+0xc>
    181a:	00 94       	com	r0
    181c:	0e 94 21 0c 	call	0x1842	; 0x1842 <__negsi2>
    1820:	57 fd       	sbrc	r21, 7
    1822:	07 d0       	rcall	.+14     	; 0x1832 <__divmodsi4_neg2>
    1824:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmodsi4>
    1828:	07 fc       	sbrc	r0, 7
    182a:	03 d0       	rcall	.+6      	; 0x1832 <__divmodsi4_neg2>
    182c:	4e f4       	brtc	.+18     	; 0x1840 <__divmodsi4_exit>
    182e:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__negsi2>

00001832 <__divmodsi4_neg2>:
    1832:	50 95       	com	r21
    1834:	40 95       	com	r20
    1836:	30 95       	com	r19
    1838:	21 95       	neg	r18
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	4f 4f       	sbci	r20, 0xFF	; 255
    183e:	5f 4f       	sbci	r21, 0xFF	; 255

00001840 <__divmodsi4_exit>:
    1840:	08 95       	ret

00001842 <__negsi2>:
    1842:	90 95       	com	r25
    1844:	80 95       	com	r24
    1846:	70 95       	com	r23
    1848:	61 95       	neg	r22
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__muluhisi3>:
    1852:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__umulhisi3>
    1856:	a5 9f       	mul	r26, r21
    1858:	90 0d       	add	r25, r0
    185a:	b4 9f       	mul	r27, r20
    185c:	90 0d       	add	r25, r0
    185e:	a4 9f       	mul	r26, r20
    1860:	80 0d       	add	r24, r0
    1862:	91 1d       	adc	r25, r1
    1864:	11 24       	eor	r1, r1
    1866:	08 95       	ret

00001868 <__mulshisi3>:
    1868:	b7 ff       	sbrs	r27, 7
    186a:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__muluhisi3>

0000186e <__mulohisi3>:
    186e:	0e 94 29 0c 	call	0x1852	; 0x1852 <__muluhisi3>
    1872:	82 1b       	sub	r24, r18
    1874:	93 0b       	sbc	r25, r19
    1876:	08 95       	ret

00001878 <__udivmodsi4>:
    1878:	a1 e2       	ldi	r26, 0x21	; 33
    187a:	1a 2e       	mov	r1, r26
    187c:	aa 1b       	sub	r26, r26
    187e:	bb 1b       	sub	r27, r27
    1880:	fd 01       	movw	r30, r26
    1882:	0d c0       	rjmp	.+26     	; 0x189e <__udivmodsi4_ep>

00001884 <__udivmodsi4_loop>:
    1884:	aa 1f       	adc	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	ee 1f       	adc	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	a2 17       	cp	r26, r18
    188e:	b3 07       	cpc	r27, r19
    1890:	e4 07       	cpc	r30, r20
    1892:	f5 07       	cpc	r31, r21
    1894:	20 f0       	brcs	.+8      	; 0x189e <__udivmodsi4_ep>
    1896:	a2 1b       	sub	r26, r18
    1898:	b3 0b       	sbc	r27, r19
    189a:	e4 0b       	sbc	r30, r20
    189c:	f5 0b       	sbc	r31, r21

0000189e <__udivmodsi4_ep>:
    189e:	66 1f       	adc	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 1f       	adc	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	1a 94       	dec	r1
    18a8:	69 f7       	brne	.-38     	; 0x1884 <__udivmodsi4_loop>
    18aa:	60 95       	com	r22
    18ac:	70 95       	com	r23
    18ae:	80 95       	com	r24
    18b0:	90 95       	com	r25
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	bd 01       	movw	r22, r26
    18b8:	cf 01       	movw	r24, r30
    18ba:	08 95       	ret

000018bc <_exit>:
    18bc:	f8 94       	cli

000018be <__stop_program>:
    18be:	ff cf       	rjmp	.-2      	; 0x18be <__stop_program>
