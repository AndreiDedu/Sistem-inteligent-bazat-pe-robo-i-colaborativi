
Gather_2_Grupuri.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001b40  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  00800122  00800122  00001bf6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027da  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  00004602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c1  00000000  00000000  00005445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00006c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abf  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001323  00000000  00000000  00007af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	99 04       	cpc	r9, r9
      6a:	ed 04       	cpc	r14, r13
      6c:	03 05       	cpc	r16, r3
      6e:	3c 05       	cpc	r19, r12
      70:	43 05       	cpc	r20, r3
      72:	20 05       	cpc	r18, r0
      74:	46 05       	cpc	r20, r6
      76:	b3 06       	cpc	r11, r19
      78:	b7 07       	cpc	r27, r23
      7a:	b7 07       	cpc	r27, r23
      7c:	bc 06       	cpc	r11, r28
      7e:	bf 06       	cpc	r11, r31
      80:	c2 06       	cpc	r12, r18
      82:	c6 06       	cpc	r12, r22
      84:	ca 06       	cpc	r12, r26
      86:	ce 06       	cpc	r12, r30
      88:	8b 07       	cpc	r24, r27
      8a:	e2 06       	cpc	r14, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
    seed ^= accumulator++>>2;
    return seed;
}

void rand_seed(uint8_t s) {
    seed = s;
      98:	14 be       	out	0x34, r1	; 52
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e4       	ldi	r30, 0x40	; 64
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a2 32       	cpi	r26, 0x22	; 34
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a2 e2       	ldi	r26, 0x22	; 34
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ad 3a       	cpi	r26, 0xAD	; 173
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <main>
      da:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
      e2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
      e4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
      e6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
      e8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <tx_mask>
    or tmpreg1, ddrreg
      ec:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
      ee:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
      f0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
      f2:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tx_mask>
      f6:	20 30       	cpi	r18, 0x00	; 0
      f8:	29 f0       	breq	.+10     	; 0x104 <message_send+0x22>
      fa:	00 00       	nop
      fc:	25 b1       	in	r18, 0x05	; 5
      fe:	23 2b       	or	r18, r19
     100:	25 b9       	out	0x05, r18	; 5
     102:	04 c0       	rjmp	.+8      	; 0x10c <message_send+0x2a>
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 c0       	rjmp	.+0      	; 0x10c <message_send+0x2a>
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	30 95       	com	r19
     114:	25 b1       	in	r18, 0x05	; 5
     116:	23 23       	and	r18, r19
     118:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     11a:	2e ea       	ldi	r18, 0xAE	; 174
     11c:	2a 95       	dec	r18
     11e:	f1 f7       	brne	.-4      	; 0x11c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     120:	2b ee       	ldi	r18, 0xEB	; 235

00000122 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     122:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     124:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     126:	0a c0       	rjmp	.+20     	; 0x13c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     128:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     12a:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tx_mask>
    com tmpreg2
     12e:	30 95       	com	r19
    in tmpreg1, IR_PORT
     130:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     132:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     134:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     136:	0f be       	out	0x3f, r0	; 63
    return 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret

0000013c <nocollision>:
nocollision:
    nop
     13c:	00 00       	nop
    dec tmpreg1
     13e:	2a 95       	dec	r18
    brne checkcollision
     140:	81 f7       	brne	.-32     	; 0x122 <checkcollision>

    ldi tmpreg1, 0x01
     142:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     144:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tx_mask>
     148:	20 30       	cpi	r18, 0x00	; 0
     14a:	29 f0       	breq	.+10     	; 0x156 <nocollision+0x1a>
     14c:	00 00       	nop
     14e:	25 b1       	in	r18, 0x05	; 5
     150:	23 2b       	or	r18, r19
     152:	25 b9       	out	0x05, r18	; 5
     154:	04 c0       	rjmp	.+8      	; 0x15e <nocollision+0x22>
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 c0       	rjmp	.+0      	; 0x15e <nocollision+0x22>
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 00       	nop
     164:	30 95       	com	r19
     166:	25 b1       	in	r18, 0x05	; 5
     168:	23 23       	and	r18, r19
     16a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
     16c:	00 00       	nop
     16e:	24 e5       	ldi	r18, 0x54	; 84
     170:	2a 95       	dec	r18
     172:	f1 f7       	brne	.-4      	; 0x170 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
     174:	fc 01       	movw	r30, r24
    ldi byteidx, 12
     176:	8c e0       	ldi	r24, 0x0C	; 12

00000178 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
     178:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
     17a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
     17c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
     17e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
     180:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
     182:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
     184:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
     186:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
     188:	50 e0       	ldi	r21, 0x00	; 0

0000018a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
     18a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
     18c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
     18e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
     190:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
     192:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tx_mask>
     196:	20 30       	cpi	r18, 0x00	; 0
     198:	29 f0       	breq	.+10     	; 0x1a4 <sendbit+0x1a>
     19a:	00 00       	nop
     19c:	25 b1       	in	r18, 0x05	; 5
     19e:	23 2b       	or	r18, r19
     1a0:	25 b9       	out	0x05, r18	; 5
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <sendbit+0x22>
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	00 00       	nop
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <sendbit+0x22>
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	00 00       	nop
     1b2:	30 95       	com	r19
     1b4:	25 b1       	in	r18, 0x05	; 5
     1b6:	23 23       	and	r18, r19
     1b8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
     1ba:	00 00       	nop
     1bc:	21 e5       	ldi	r18, 0x51	; 81
     1be:	2a 95       	dec	r18
     1c0:	f1 f7       	brne	.-4      	; 0x1be <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
     1c2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
     1c4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
     1c6:	9a 95       	dec	r25
    brne sendbit
     1c8:	01 f7       	brne	.-64     	; 0x18a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
     1ca:	8a 95       	dec	r24
    brne sendbyte
     1cc:	a9 f6       	brne	.-86     	; 0x178 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
     1ce:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
     1d0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
     1d2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     1d4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     1d6:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tx_mask>
    com tmpreg2
     1da:	30 95       	com	r19
    in tmpreg1, IR_PORT
     1dc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     1de:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     1e0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     1e2:	0f be       	out	0x3f, r0	; 63
    return 1
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret

000001e8 <message_rx_dummy>:
     1e8:	08 95       	ret

000001ea <message_tx_dummy>:
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <message_tx_success_dummy>:
     1f0:	08 95       	ret

000001f2 <kilo_init>:
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	f8 94       	cli
     202:	14 b8       	out	0x04, r1	; 4
     204:	17 b8       	out	0x07, r1	; 7
     206:	1a b8       	out	0x0a, r1	; 10
     208:	15 b8       	out	0x05, r1	; 5
     20a:	18 b8       	out	0x08, r1	; 8
     20c:	1b b8       	out	0x0b, r1	; 11
     20e:	52 9a       	sbi	0x0a, 2	; 10
     210:	5a 9a       	sbi	0x0b, 2	; 11
     212:	14 bc       	out	0x24, r1	; 36
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	85 bd       	out	0x25, r24	; 37
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	87 bd       	out	0x27, r24	; 39
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     222:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     226:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     22a:	2f e8       	ldi	r18, 0x8F	; 143
     22c:	3b e0       	ldi	r19, 0x0B	; 11
     22e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     232:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     23a:	53 98       	cbi	0x0a, 3	; 10
     23c:	23 98       	cbi	0x04, 3	; 4
     23e:	91 ea       	ldi	r25, 0xA1	; 161
     240:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     244:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     248:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     24c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     250:	8b e0       	ldi	r24, 0x0B	; 11
     252:	80 bf       	out	0x30, r24	; 48
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	83 e8       	ldi	r24, 0x83	; 131
     266:	80 83       	st	Z, r24
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	86 fd       	sbrc	r24, 6
     272:	fd cf       	rjmp	.-6      	; 0x26e <kilo_init+0x7c>
     274:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     278:	83 ea       	ldi	r24, 0xA3	; 163
     27a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     28c:	8f 3f       	cpi	r24, 0xFF	; 255
     28e:	11 f0       	breq	.+4      	; 0x294 <kilo_init+0xa2>
     290:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     294:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_leadingbit>
     29e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_leadingbyte>
     2a2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_byteindex>
     2a6:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <rx_bytevalue>
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     2b2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tx_mask>
     2b6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tx_mask>
     2ba:	88 73       	andi	r24, 0x38	; 56
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <kilo_init+0xd2>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tx_mask>
     2c4:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <tx_clock+0x1>
     2c8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock>
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tx_increment+0x1>
     2d4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tx_increment>
     2d8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <kilo_ticks>
     2dc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <kilo_ticks+0x1>
     2e0:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <kilo_ticks+0x2>
     2e4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <kilo_ticks+0x3>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     2ee:	82 e4       	ldi	r24, 0x42	; 66
     2f0:	9f e0       	ldi	r25, 0x0F	; 15
     2f2:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <kilo_tx_period+0x1>
     2f6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_tx_period>
     2fa:	80 eb       	ldi	r24, 0xB0	; 176
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     302:	c8 2f       	mov	r28, r24
     304:	81 eb       	ldi	r24, 0xB1	; 177
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     30c:	2c 2f       	mov	r18, r28
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	38 2b       	or	r19, r24
     312:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <kilo_uid+0x1>
     316:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <kilo_uid>
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     322:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <kilo_turn_left>
     326:	89 e0       	ldi	r24, 0x09	; 9
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     32e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <kilo_turn_right>
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     33a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_left>
     33e:	84 e1       	ldi	r24, 0x14	; 20
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     346:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_straight_right>
     34a:	0f 2e       	mov	r0, r31
     34c:	ff e5       	ldi	r31, 0x5F	; 95
     34e:	ef 2e       	mov	r14, r31
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
     356:	08 e3       	ldi	r16, 0x38	; 56
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	c0 e2       	ldi	r28, 0x20	; 32
     35c:	d0 e0       	ldi	r29, 0x00	; 0
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     364:	d8 2e       	mov	r13, r24
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     36e:	2d 2d       	mov	r18, r13
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	32 2f       	mov	r19, r18
     374:	22 27       	eor	r18, r18
     376:	28 2b       	or	r18, r24
     378:	f7 01       	movw	r30, r14
     37a:	21 93       	st	Z+, r18
     37c:	31 93       	st	Z+, r19
     37e:	7f 01       	movw	r14, r30
     380:	ce 01       	movw	r24, r28
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     388:	d8 2e       	mov	r13, r24
     38a:	ce 01       	movw	r24, r28
     38c:	c1 96       	adiw	r24, 0x31	; 49
     38e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     392:	2d 2d       	mov	r18, r13
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	32 2f       	mov	r19, r18
     398:	22 27       	eor	r18, r18
     39a:	28 2b       	or	r18, r24
     39c:	f8 01       	movw	r30, r16
     39e:	21 93       	st	Z+, r18
     3a0:	31 93       	st	Z+, r19
     3a2:	8f 01       	movw	r16, r30
     3a4:	22 96       	adiw	r28, 0x02	; 2
     3a6:	cc 33       	cpi	r28, 0x3C	; 60
     3a8:	d1 05       	cpc	r29, r1
     3aa:	c9 f6       	brne	.-78     	; 0x35e <kilo_init+0x16c>
     3ac:	78 94       	sei
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	08 95       	ret

000003be <__vector_6>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	a8 95       	wdr
     3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d4:	88 61       	ori	r24, 0x18	; 24
     3d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <delay>:
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	41 f0       	breq	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f0:	ef ec       	ldi	r30, 0xCF	; 207
     3f2:	f7 e0       	ldi	r31, 0x07	; 7
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <delay+0x8>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <delay+0xe>
     3fa:	00 00       	nop
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	c1 f7       	brne	.-16     	; 0x3f0 <delay+0x4>
     400:	08 95       	ret

00000402 <set_motors>:
     402:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     406:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     40a:	08 95       	ret

0000040c <spinup_motors>:
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     412:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
     41e:	08 95       	ret

00000420 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     420:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_busy>
     424:	81 11       	cpse	r24, r1
     426:	14 c0       	rjmp	.+40     	; 0x450 <get_voltage+0x30>
        cli();                                    // disable interrupts
     428:	f8 94       	cli
        adc_setup_conversion(6);
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     430:	ea e7       	ldi	r30, 0x7A	; 122
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	83 e8       	ldi	r24, 0x83	; 131
     436:	80 83       	st	Z, r24
        adc_start_conversion();
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	80 83       	st	Z, r24
        adc_finish_conversion();
     43e:	80 81       	ld	r24, Z
     440:	86 fd       	sbrc	r24, 6
     442:	fd cf       	rjmp	.-6      	; 0x43e <get_voltage+0x1e>
        voltage = ADCW;                           // store AD result
     444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     44c:	78 94       	sei
     44e:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     454:	08 95       	ret

00000456 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     456:	3f 92       	push	r3
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <estimate_distance+0x24>
     47a:	00 d0       	rcall	.+0      	; 0x47c <estimate_distance+0x26>
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     484:	fc 01       	movw	r30, r24
     486:	02 80       	ldd	r0, Z+2	; 0x02
     488:	f3 81       	ldd	r31, Z+3	; 0x03
     48a:	e0 2d       	mov	r30, r0
     48c:	fc 83       	std	Y+4, r31	; 0x04
     48e:	eb 83       	std	Y+3, r30	; 0x03
     490:	e4 38       	cpi	r30, 0x84	; 132
     492:	23 e0       	ldi	r18, 0x03	; 3
     494:	f2 07       	cpc	r31, r18
     496:	0c f0       	brlt	.+2      	; 0x49a <estimate_distance+0x44>
     498:	82 c0       	rjmp	.+260    	; 0x59e <estimate_distance+0x148>
        if (dist->high_gain > kilo_irhigh[0]) {
     49a:	9f 01       	movw	r18, r30
     49c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <kilo_irhigh>
     4a0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <kilo_irhigh+0x1>
     4a4:	8e 17       	cp	r24, r30
     4a6:	9f 07       	cpc	r25, r31
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <estimate_distance+0x56>
     4aa:	7c c0       	rjmp	.+248    	; 0x5a4 <estimate_distance+0x14e>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     4ac:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irhigh+0x2>
     4b0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irhigh+0x3>
     4b4:	8e 17       	cp	r24, r30
     4b6:	9f 07       	cpc	r25, r31
     4b8:	68 f0       	brcs	.+26     	; 0x4d4 <estimate_distance+0x7e>
     4ba:	ec e3       	ldi	r30, 0x3C	; 60
     4bc:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     4be:	12 e0       	ldi	r17, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     4c0:	81 91       	ld	r24, Z+
     4c2:	91 91       	ld	r25, Z+
     4c4:	82 17       	cp	r24, r18
     4c6:	93 07       	cpc	r25, r19
     4c8:	30 f0       	brcs	.+12     	; 0x4d6 <estimate_distance+0x80>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	1e 30       	cpi	r17, 0x0E	; 14
     4ce:	c1 f7       	brne	.-16     	; 0x4c0 <estimate_distance+0x6a>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     4d0:	1d e0       	ldi	r17, 0x0D	; 13
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <estimate_distance+0x80>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     4d4:	11 e0       	ldi	r17, 0x01	; 1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     4d6:	81 2f       	mov	r24, r17
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	e8 5c       	subi	r30, 0xC8	; 200
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	60 80       	ld	r6, Z
     4e6:	71 80       	ldd	r7, Z+1	; 0x01
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	fc 01       	movw	r30, r24
     4ee:	ea 5c       	subi	r30, 0xCA	; 202
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	b3 01       	movw	r22, r6
     4f8:	68 1b       	sub	r22, r24
     4fa:	79 0b       	sbc	r23, r25
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     510:	4b 81       	ldd	r20, Y+3	; 0x03
     512:	5c 81       	ldd	r21, Y+4	; 0x04
     514:	ba 01       	movw	r22, r20
     516:	55 0f       	add	r21, r21
     518:	88 0b       	sbc	r24, r24
     51a:	99 0b       	sbc	r25, r25
     51c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__floatsisf>
     520:	4b 01       	movw	r8, r22
     522:	5c 01       	movw	r10, r24
     524:	b3 01       	movw	r22, r6
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     52e:	2b 01       	movw	r4, r22
     530:	3c 01       	movw	r6, r24
     532:	61 2f       	mov	r22, r17
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	5f e3       	ldi	r21, 0x3F	; 63
     546:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	a9 01       	movw	r20, r18
     550:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     554:	a7 01       	movw	r20, r14
     556:	96 01       	movw	r18, r12
     558:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	c3 01       	movw	r24, r6
     562:	b2 01       	movw	r22, r4
     564:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	c5 01       	movw	r24, r10
     56e:	b4 01       	movw	r22, r8
     570:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e2       	ldi	r20, 0x20	; 32
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     580:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fixsfsi>
     584:	5b 01       	movw	r10, r22
     586:	c7 01       	movw	r24, r14
     588:	b6 01       	movw	r22, r12
     58a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fixsfsi>
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	c5 01       	movw	r24, r10
     594:	ba 01       	movw	r22, r20
     596:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodhi4>
     59a:	36 2e       	mov	r3, r22
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <estimate_distance+0x150>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     59e:	33 24       	eor	r3, r3
     5a0:	3a 94       	dec	r3
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <estimate_distance+0x150>
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     5a4:	31 2c       	mov	r3, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	8d 3b       	cpi	r24, 0xBD	; 189
     5ac:	92 40       	sbci	r25, 0x02	; 2
     5ae:	0c f4       	brge	.+2      	; 0x5b2 <estimate_distance+0x15c>
     5b0:	de c0       	rjmp	.+444    	; 0x76e <estimate_distance+0x318>
        if (dist->low_gain > kilo_irlow[0]) {
     5b2:	e9 81       	ldd	r30, Y+1	; 0x01
     5b4:	fa 81       	ldd	r31, Y+2	; 0x02
     5b6:	a0 80       	ld	r10, Z
     5b8:	b1 80       	ldd	r11, Z+1	; 0x01
     5ba:	95 01       	movw	r18, r10
     5bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <kilo_irlow>
     5c0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <kilo_irlow+0x1>
     5c4:	8a 15       	cp	r24, r10
     5c6:	9b 05       	cpc	r25, r11
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <estimate_distance+0x176>
     5ca:	d4 c0       	rjmp	.+424    	; 0x774 <estimate_distance+0x31e>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     5cc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <kilo_irlow+0x2>
     5d0:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <kilo_irlow+0x3>
     5d4:	8a 15       	cp	r24, r10
     5d6:	9b 05       	cpc	r25, r11
     5d8:	80 f0       	brcs	.+32     	; 0x5fa <estimate_distance+0x1a4>
     5da:	e3 e6       	ldi	r30, 0x63	; 99
     5dc:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     5de:	12 e0       	ldi	r17, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     5e0:	81 91       	ld	r24, Z+
     5e2:	91 91       	ld	r25, Z+
     5e4:	82 17       	cp	r24, r18
     5e6:	93 07       	cpc	r25, r19
     5e8:	28 f0       	brcs	.+10     	; 0x5f4 <estimate_distance+0x19e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     5ea:	1f 5f       	subi	r17, 0xFF	; 255
     5ec:	1e 30       	cpi	r17, 0x0E	; 14
     5ee:	c1 f7       	brne	.-16     	; 0x5e0 <estimate_distance+0x18a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     5f0:	1a e5       	ldi	r17, 0x5A	; 90
     5f2:	68 c0       	rjmp	.+208    	; 0x6c4 <estimate_distance+0x26e>
                    index_low = i;
                    break;
                }
            }

            if(index_low == 255) {
     5f4:	1f 3f       	cpi	r17, 0xFF	; 255
     5f6:	11 f4       	brne	.+4      	; 0x5fc <estimate_distance+0x1a6>
     5f8:	bf c0       	rjmp	.+382    	; 0x778 <estimate_distance+0x322>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     5fa:	11 e0       	ldi	r17, 0x01	; 1
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     5fc:	81 2f       	mov	r24, r17
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e1 5a       	subi	r30, 0xA1	; 161
     608:	fe 4f       	sbci	r31, 0xFE	; 254
     60a:	60 80       	ld	r6, Z
     60c:	71 80       	ldd	r7, Z+1	; 0x01
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	fc 01       	movw	r30, r24
     614:	e3 5a       	subi	r30, 0xA3	; 163
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	b3 01       	movw	r22, r6
     61e:	68 1b       	sub	r22, r24
     620:	79 0b       	sbc	r23, r25
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     636:	b5 01       	movw	r22, r10
     638:	bb 0c       	add	r11, r11
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__floatsisf>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	b3 01       	movw	r22, r6
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     650:	2b 01       	movw	r4, r22
     652:	3c 01       	movw	r6, r24
     654:	61 2f       	mov	r22, r17
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	a9 01       	movw	r20, r18
     672:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     676:	a7 01       	movw	r20, r14
     678:	96 01       	movw	r18, r12
     67a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c5 01       	movw	r24, r10
     690:	b4 01       	movw	r22, r8
     692:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     6a2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fixsfsi>
     6a6:	8b 01       	movw	r16, r22
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fixsfsi>
     6b0:	ab 01       	movw	r20, r22
     6b2:	bc 01       	movw	r22, r24
     6b4:	c8 01       	movw	r24, r16
     6b6:	ba 01       	movw	r22, r20
     6b8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodhi4>
     6bc:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     6be:	6f 3f       	cpi	r22, 0xFF	; 255
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <estimate_distance+0x26e>
     6c2:	55 c0       	rjmp	.+170    	; 0x76e <estimate_distance+0x318>
        if (dist_high != 255) {
     6c4:	ff ef       	ldi	r31, 0xFF	; 255
     6c6:	3f 16       	cp	r3, r31
     6c8:	09 f4       	brne	.+2      	; 0x6cc <estimate_distance+0x276>
     6ca:	4e c0       	rjmp	.+156    	; 0x768 <estimate_distance+0x312>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     6cc:	2b 81       	ldd	r18, Y+3	; 0x03
     6ce:	3c 81       	ldd	r19, Y+4	; 0x04
     6d0:	b9 01       	movw	r22, r18
     6d2:	33 0f       	add	r19, r19
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__floatsisf>
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
     6e0:	63 2d       	mov	r22, r3
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	a7 01       	movw	r20, r14
     6f2:	96 01       	movw	r18, r12
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	81 e6       	ldi	r24, 0x61	; 97
     6fa:	94 e4       	ldi	r25, 0x44	; 68
     6fc:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	61 2f       	mov	r22, r17
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     71c:	2b 01       	movw	r4, r22
     71e:	3c 01       	movw	r6, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	4f e2       	ldi	r20, 0x2F	; 47
     726:	54 e4       	ldi	r21, 0x44	; 68
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__subsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c3 01       	movw	r24, r6
     736:	b2 01       	movw	r22, r4
     738:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c5 01       	movw	r24, r10
     742:	b4 01       	movw	r22, r8
     744:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	48 e4       	ldi	r20, 0x48	; 72
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__divsf3>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	44 e0       	ldi	r20, 0x04	; 4
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__addsf3>
     760:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__fixunssfsi>
     764:	86 2f       	mov	r24, r22
     766:	0a c0       	rjmp	.+20     	; 0x77c <estimate_distance+0x326>
        } else {
            return 33 + dist_low;
     768:	81 e2       	ldi	r24, 0x21	; 33
     76a:	81 0f       	add	r24, r17
     76c:	07 c0       	rjmp	.+14     	; 0x77c <estimate_distance+0x326>
        }
    } else {
        return 33 + dist_high;
     76e:	81 e2       	ldi	r24, 0x21	; 33
     770:	83 0d       	add	r24, r3
     772:	04 c0       	rjmp	.+8      	; 0x77c <estimate_distance+0x326>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	a6 cf       	rjmp	.-180    	; 0x6c4 <estimate_distance+0x26e>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     778:	1a e5       	ldi	r17, 0x5A	; 90
     77a:	a4 cf       	rjmp	.-184    	; 0x6c4 <estimate_distance+0x26e>
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	6f 90       	pop	r6
     7a0:	5f 90       	pop	r5
     7a2:	4f 90       	pop	r4
     7a4:	3f 90       	pop	r3
     7a6:	08 95       	ret

000007a8 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
    tx_clock += tx_increment;
     7ca:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <tx_clock>
     7ce:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <tx_clock+0x1>
     7d2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <tx_increment>
     7d6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <tx_increment+0x1>
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tx_clock+0x1>
     7e2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tx_clock>
    tx_increment = 0xFF;
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tx_increment+0x1>
     7ee:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tx_increment>
    OCR0A = tx_increment;
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     7f6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <kilo_ticks>
     7fa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_ticks+0x1>
     7fe:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <kilo_ticks+0x2>
     802:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <kilo_ticks+0x3>
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	a1 1d       	adc	r26, r1
     80a:	b1 1d       	adc	r27, r1
     80c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <kilo_ticks>
     810:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <kilo_ticks+0x1>
     814:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <kilo_ticks+0x2>
     818:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     81c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_busy>
     820:	81 11       	cpse	r24, r1
     822:	2d c0       	rjmp	.+90     	; 0x87e <__vector_14+0xd6>
     824:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <kilo_tx_period>
     828:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <kilo_tx_period+0x1>
     82c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <tx_clock>
     830:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <tx_clock+0x1>
     834:	82 17       	cp	r24, r18
     836:	93 07       	cpc	r25, r19
     838:	10 f5       	brcc	.+68     	; 0x87e <__vector_14+0xd6>
     83a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	f1 f4       	brne	.+60     	; 0x87e <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     842:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_tx>
     846:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_tx+0x1>
     84a:	09 95       	icall
        if (msg) {
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	b9 f0       	breq	.+46     	; 0x87e <__vector_14+0xd6>
            if (message_send(msg)) {
     850:	0e 94 71 00 	call	0xe2	; 0xe2 <message_send>
     854:	88 23       	and	r24, r24
     856:	51 f0       	breq	.+20     	; 0x86c <__vector_14+0xc4>
                kilo_message_tx_success();
     858:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx_success>
     85c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx_success+0x1>
     860:	09 95       	icall
                tx_clock = 0;
     862:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <tx_clock+0x1>
     866:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock>
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     86c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <rand>
     870:	9c 01       	movw	r18, r24
     872:	33 27       	eor	r19, r19
     874:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <tx_increment+0x1>
     878:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <tx_increment>
                OCR0A = tx_increment;
     87c:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8a0:	80 ff       	sbrs	r24, 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <set_color+0x8>
        DDRD |= (1<<5);
     8a4:	55 9a       	sbi	0x0a, 5	; 10
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     8a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     8aa:	81 ff       	sbrs	r24, 1
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <set_color+0x12>
        DDRD |= (1<<4);
     8ae:	54 9a       	sbi	0x0a, 4	; 10
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     8b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     8b4:	82 ff       	sbrs	r24, 2
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <set_color+0x1c>
        DDRC |= (1<<3);
     8b8:	3b 9a       	sbi	0x07, 3	; 7
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     8bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     8be:	83 ff       	sbrs	r24, 3
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <set_color+0x26>
        DDRC |= (1<<2);
     8c2:	3a 9a       	sbi	0x07, 2	; 7
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     8c6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     8c8:	84 ff       	sbrs	r24, 4
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <set_color+0x30>
        DDRC |= (1<<5);
     8cc:	3d 9a       	sbi	0x07, 5	; 7
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     8d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     8d2:	85 ff       	sbrs	r24, 5
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <set_color+0x3a>
        DDRC |= (1<<4);
     8d6:	3c 9a       	sbi	0x07, 4	; 7
     8d8:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     8da:	3c 98       	cbi	0x07, 4	; 7
     8dc:	08 95       	ret

000008de <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     8de:	4c 01       	movw	r8, r24
     8e0:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     8e2:	71 2c       	mov	r7, r1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e4:	0f 2e       	mov	r0, r31
     8e6:	f3 eb       	ldi	r31, 0xB3	; 179
     8e8:	af 2e       	mov	r10, r31
     8ea:	b1 2c       	mov	r11, r1
     8ec:	f0 2d       	mov	r31, r0
    OCR2B = cw;
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f4 eb       	ldi	r31, 0xB4	; 180
     8f2:	cf 2e       	mov	r12, r31
     8f4:	d1 2c       	mov	r13, r1
     8f6:	f0 2d       	mov	r31, r0
     8f8:	66 24       	eor	r6, r6
     8fa:	6a 94       	dec	r6
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     8fc:	68 94       	set
     8fe:	33 24       	eor	r3, r3
     900:	32 f8       	bld	r3, 2
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
     902:	22 24       	eor	r2, r2
     904:	23 94       	inc	r2
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
     906:	ca e7       	ldi	r28, 0x7A	; 122
     908:	d0 e0       	ldi	r29, 0x00	; 0
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     90a:	0f 2e       	mov	r0, r31
     90c:	f8 e1       	ldi	r31, 0x18	; 24
     90e:	4f 2e       	mov	r4, r31
     910:	f0 2d       	mov	r31, r0
     912:	0f 2e       	mov	r0, r31
     914:	f9 e2       	ldi	r31, 0x29	; 41
     916:	5f 2e       	mov	r5, r31
     918:	f0 2d       	mov	r31, r0
                ports_off();
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     91a:	00 e6       	ldi	r16, 0x60	; 96
     91c:	10 e0       	ldi	r17, 0x00	; 0

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     91e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <kilo_state>
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e7 30       	cpi	r30, 0x07	; 7
     926:	f1 05       	cpc	r31, r1
     928:	d0 f7       	brcc	.-12     	; 0x91e <__stack+0x1f>
     92a:	ec 5c       	subi	r30, 0xCC	; 204
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__tablejump2__>
            case SLEEPING:
                cli();
     932:	f8 94       	cli
                acomp_off();
     934:	80 b7       	in	r24, 0x30	; 48
     936:	87 7f       	andi	r24, 0xF7	; 247
     938:	80 bf       	out	0x30, r24	; 48
                adc_off();
     93a:	88 81       	ld	r24, Y
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	88 83       	st	Y, r24
                ports_off();
     940:	14 b8       	out	0x04, r1	; 4
     942:	17 b8       	out	0x07, r1	; 7
     944:	1a b8       	out	0x0a, r1	; 10
     946:	15 b8       	out	0x05, r1	; 5
     948:	18 b8       	out	0x08, r1	; 8
     94a:	1b b8       	out	0x0b, r1	; 11
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	a8 95       	wdr
     952:	40 92 60 00 	sts	0x0060, r4	; 0x800060 <__DATA_REGION_ORIGIN__>
     956:	0f be       	out	0x3f, r0	; 63
     958:	50 92 60 00 	sts	0x0060, r5	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     95c:	f8 01       	movw	r30, r16
     95e:	80 81       	ld	r24, Z
     960:	80 64       	ori	r24, 0x40	; 64
     962:	80 83       	st	Z, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     964:	83 b7       	in	r24, 0x33	; 51
     966:	81 7f       	andi	r24, 0xF1	; 241
     968:	84 60       	ori	r24, 0x04	; 4
     96a:	83 bf       	out	0x33, r24	; 51
                cli();
     96c:	f8 94       	cli
                sleep_enable();
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	81 60       	ori	r24, 0x01	; 1
     972:	83 bf       	out	0x33, r24	; 51
                sei();
     974:	78 94       	sei
                sleep_cpu();
     976:	88 95       	sleep
                sleep_disable();
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	8e 7f       	andi	r24, 0xFE	; 254
     97c:	83 bf       	out	0x33, r24	; 51
                sei();
     97e:	78 94       	sei
                rx_busy = 0;
     980:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>
                ports_on();
     984:	52 9a       	sbi	0x0a, 2	; 10
     986:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     988:	88 81       	ld	r24, Y
     98a:	80 68       	ori	r24, 0x80	; 128
     98c:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98e:	87 e5       	ldi	r24, 0x57	; 87
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x99>
     998:	00 00       	nop
                _delay_us(300);
                acomp_on();
     99a:	80 b7       	in	r24, 0x30	; 48
     99c:	88 61       	ori	r24, 0x18	; 24
     99e:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9a0:	8f e3       	ldi	r24, 0x3F	; 63
     9a2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a6:	ef e1       	ldi	r30, 0x1F	; 31
     9a8:	fe e4       	ldi	r31, 0x4E	; 78
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <__stack+0xab>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <__stack+0xb1>
     9b0:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9b2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_busy>
     9b6:	88 23       	and	r24, r24
     9b8:	61 f0       	breq	.+24     	; 0x9d2 <__stack+0xd3>
                    set_color(RGB(3,0,0));
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9c0:	ff ef       	ldi	r31, 0xFF	; 255
     9c2:	20 e7       	ldi	r18, 0x70	; 112
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	f1 50       	subi	r31, 0x01	; 1
     9c8:	20 40       	sbci	r18, 0x00	; 0
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__stack+0xc7>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <__stack+0xd1>
     9d0:	00 00       	nop
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
                break;
     9d8:	a2 cf       	rjmp	.-188    	; 0x91e <__stack+0x1f>
            case IDLE:
                set_color(RGB(0,3,0));
     9da:	8c e0       	ldi	r24, 0x0C	; 12
     9dc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9e0:	ef ec       	ldi	r30, 0xCF	; 207
     9e2:	f7 e0       	ldi	r31, 0x07	; 7
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <__stack+0xe5>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <__stack+0xeb>
     9ea:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9f2:	ff ef       	ldi	r31, 0xFF	; 255
     9f4:	21 ee       	ldi	r18, 0xE1	; 225
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	f1 50       	subi	r31, 0x01	; 1
     9fa:	20 40       	sbci	r18, 0x00	; 0
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <__stack+0xf9>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <__stack+0x103>
     a02:	00 00       	nop
     a04:	8c cf       	rjmp	.-232    	; 0x91e <__stack+0x1f>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a06:	0e 94 10 02 	call	0x420	; 0x420 <get_voltage>
                if(voltage > 682)
     a0a:	8b 3a       	cpi	r24, 0xAB	; 171
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	9e 07       	cpc	r25, r30
     a10:	24 f0       	brlt	.+8      	; 0xa1a <__stack+0x11b>
                    set_color(RGB(0,3,0));
     a12:	8c e0       	ldi	r24, 0x0C	; 12
     a14:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a18:	82 cf       	rjmp	.-252    	; 0x91e <__stack+0x1f>
                else if(voltage > 648)
     a1a:	89 38       	cpi	r24, 0x89	; 137
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	9f 07       	cpc	r25, r31
     a20:	24 f0       	brlt	.+8      	; 0xa2a <__stack+0x12b>
                    set_color(RGB(0,0,3));
     a22:	80 e3       	ldi	r24, 0x30	; 48
     a24:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a28:	7a cf       	rjmp	.-268    	; 0x91e <__stack+0x1f>
                else if(voltage > 614)
     a2a:	87 36       	cpi	r24, 0x67	; 103
     a2c:	92 40       	sbci	r25, 0x02	; 2
     a2e:	24 f0       	brlt	.+8      	; 0xa38 <__stack+0x139>
                    set_color(RGB(3,3,0));
     a30:	8f e0       	ldi	r24, 0x0F	; 15
     a32:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a36:	73 cf       	rjmp	.-282    	; 0x91e <__stack+0x1f>
                else
                    set_color(RGB(3,0,0));
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a3e:	6f cf       	rjmp	.-290    	; 0x91e <__stack+0x1f>
                break;
            case CHARGING:
                if (is_charging()) {
     a40:	48 99       	sbic	0x09, 0	; 9
     a42:	16 c0       	rjmp	.+44     	; 0xa70 <__stack+0x171>
                    set_color(RGB(1,0,0));
     a44:	82 2d       	mov	r24, r2
     a46:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a4a:	8f ec       	ldi	r24, 0xCF	; 207
     a4c:	97 e0       	ldi	r25, 0x07	; 7
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <__stack+0x14f>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <__stack+0x155>
     a54:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a5c:	9f ef       	ldi	r25, 0xFF	; 255
     a5e:	e1 ee       	ldi	r30, 0xE1	; 225
     a60:	f4 e0       	ldi	r31, 0x04	; 4
     a62:	91 50       	subi	r25, 0x01	; 1
     a64:	e0 40       	sbci	r30, 0x00	; 0
     a66:	f0 40       	sbci	r31, 0x00	; 0
     a68:	e1 f7       	brne	.-8      	; 0xa62 <__stack+0x163>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <__stack+0x16d>
     a6c:	00 00       	nop
     a6e:	57 cf       	rjmp	.-338    	; 0x91e <__stack+0x1f>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a76:	53 cf       	rjmp	.-346    	; 0x91e <__stack+0x1f>
                break;
            case SETUP:
                if (!has_setup) {
     a78:	71 10       	cpse	r7, r1
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <__stack+0x183>
                    setup();
     a7c:	f4 01       	movw	r30, r8
     a7e:	09 95       	icall
                    has_setup = 1;
     a80:	72 2c       	mov	r7, r2
                }
                kilo_state = RUNNING;
     a82:	30 92 24 01 	sts	0x0124, r3	; 0x800124 <kilo_state>
            case RUNNING:
                loop();
     a86:	f7 01       	movw	r30, r14
     a88:	09 95       	icall
                break;
     a8a:	49 cf       	rjmp	.-366    	; 0x91e <__stack+0x1f>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a8c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     a90:	81 11       	cpse	r24, r1
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <__stack+0x1a3>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a94:	f5 01       	movw	r30, r10
     a96:	10 82       	st	Z, r1
    OCR2B = cw;
     a98:	f6 01       	movw	r30, r12
     a9a:	10 82       	st	Z, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     a9c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <prev_motion>
     aa0:	3e cf       	rjmp	.-388    	; 0x91e <__stack+0x1f>
                } else {
                    if (cur_motion != prev_motion) {
     aa2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
     aa6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <prev_motion>
     aaa:	98 17       	cp	r25, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	37 cf       	rjmp	.-402    	; 0x91e <__stack+0x1f>
                        prev_motion = cur_motion;
     ab0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     ab4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ab8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	89 f4       	brne	.+34     	; 0xae2 <__stack+0x1e3>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac0:	f5 01       	movw	r30, r10
     ac2:	60 82       	st	Z, r6
    OCR2B = cw;
     ac4:	f6 01       	movw	r30, r12
     ac6:	10 82       	st	Z, r1
     ac8:	8f e2       	ldi	r24, 0x2F	; 47
     aca:	95 e7       	ldi	r25, 0x75	; 117
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <__stack+0x1cd>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <__stack+0x1d3>
     ad2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ad4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ad8:	f5 01       	movw	r30, r10
     ada:	80 83       	st	Z, r24
    OCR2B = cw;
     adc:	f6 01       	movw	r30, r12
     ade:	10 82       	st	Z, r1
     ae0:	1e cf       	rjmp	.-452    	; 0x91e <__stack+0x1f>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ae2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	89 f4       	brne	.+34     	; 0xb0c <__stack+0x20d>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aea:	f5 01       	movw	r30, r10
     aec:	10 82       	st	Z, r1
    OCR2B = cw;
     aee:	f6 01       	movw	r30, r12
     af0:	60 82       	st	Z, r6
     af2:	8f e2       	ldi	r24, 0x2F	; 47
     af4:	95 e7       	ldi	r25, 0x75	; 117
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <__stack+0x1f7>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <__stack+0x1fd>
     afc:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     afe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b02:	f5 01       	movw	r30, r10
     b04:	10 82       	st	Z, r1
    OCR2B = cw;
     b06:	f6 01       	movw	r30, r12
     b08:	80 83       	st	Z, r24
     b0a:	09 cf       	rjmp	.-494    	; 0x91e <__stack+0x1f>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b0c:	f5 01       	movw	r30, r10
     b0e:	10 82       	st	Z, r1
    OCR2B = cw;
     b10:	f6 01       	movw	r30, r12
     b12:	60 82       	st	Z, r6
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b14:	f5 01       	movw	r30, r10
     b16:	60 82       	st	Z, r6
    OCR2B = cw;
     b18:	f6 01       	movw	r30, r12
     b1a:	60 82       	st	Z, r6
     b1c:	8f e2       	ldi	r24, 0x2F	; 47
     b1e:	95 e7       	ldi	r25, 0x75	; 117
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <__stack+0x221>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <__stack+0x227>
     b26:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b28:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_straight_right>
     b2c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b30:	f5 01       	movw	r30, r10
     b32:	90 83       	st	Z, r25
    OCR2B = cw;
     b34:	f6 01       	movw	r30, r12
     b36:	80 83       	st	Z, r24
     b38:	f2 ce       	rjmp	.-540    	; 0x91e <__stack+0x1f>

00000b3a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
    rx_timer_off();
     b48:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     b4c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b50:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_leadingbit>
    rx_leadingbyte = 1;
     b5a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_leadingbyte>
    rx_busy = 0;
     b5e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>
    adc_trigger_high_gain();
     b62:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     b66:	93 ea       	ldi	r25, 0xA3	; 163
     b68:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     b6c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ba4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ba8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bb2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_leadingbit>
     bb6:	88 23       	and	r24, r24
     bb8:	31 f1       	breq	.+76     	; 0xc06 <__vector_23+0x88>
        rx_timer_on();
     bba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bbe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
     bc8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <rx_bytevalue>
        rx_leadingbit = 0;
     bcc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_leadingbit>
        if (rx_leadingbyte) {
     bd0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_leadingbyte>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <__vector_23+0x5c>
     bd8:	ca c1       	rjmp	.+916    	; 0xf6e <__vector_23+0x3f0>
            adc_finish_conversion();
     bda:	ea e7       	ldi	r30, 0x7A	; 122
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	86 fd       	sbrc	r24, 6
     be2:	fd cf       	rjmp	.-6      	; 0xbde <__vector_23+0x60>
            rx_dist.high_gain = ADCW;
     be4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     be8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     bec:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <rx_dist+0x3>
     bf0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <rx_dist+0x2>
            adc_trigger_low_gain();
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     bfa:	93 ea       	ldi	r25, 0xA3	; 163
     bfc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c00:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     c04:	b4 c1       	rjmp	.+872    	; 0xf6e <__vector_23+0x3f0>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c06:	c9 01       	movw	r24, r18
     c08:	87 58       	subi	r24, 0x87	; 135
     c0a:	91 09       	sbc	r25, r1
     c0c:	84 37       	cpi	r24, 0x74	; 116
     c0e:	99 40       	sbci	r25, 0x09	; 9
     c10:	a8 f0       	brcs	.+42     	; 0xc3c <__vector_23+0xbe>
            rx_timer_off();
     c12:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     c16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_leadingbit>
            rx_leadingbyte = 1;
     c24:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_leadingbyte>
            rx_busy = 0;
     c28:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>
            adc_trigger_high_gain();
     c2c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c30:	93 ea       	ldi	r25, 0xA3	; 163
     c32:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c36:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     c3a:	99 c1       	rjmp	.+818    	; 0xf6e <__vector_23+0x3f0>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c3c:	26 58       	subi	r18, 0x86	; 134
     c3e:	31 09       	sbc	r19, r1
     c40:	a4 ef       	ldi	r26, 0xF4	; 244
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	0e 94 b5 0c 	call	0x196a	; 0x196a <__umulhisi3>
     c48:	aa 27       	eor	r26, r26
     c4a:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	78 f4       	brcc	.+30     	; 0xc6e <__vector_23+0xf0>
                rx_bytevalue |= (1<<bitindex);
     c50:	21 e0       	ldi	r18, 0x01	; 1
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__vector_23+0xde>
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	8a 95       	dec	r24
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <__vector_23+0xda>
     c60:	cf 01       	movw	r24, r30
     c62:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <rx_bytevalue>
     c66:	89 2b       	or	r24, r25
     c68:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <rx_bytevalue>
     c6c:	80 c1       	rjmp	.+768    	; 0xf6e <__vector_23+0x3f0>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_leadingbit>
                if (rx_leadingbyte) {
     c74:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_leadingbyte>
     c78:	88 23       	and	r24, r24
     c7a:	51 f1       	breq	.+84     	; 0xcd0 <__vector_23+0x152>
                    adc_finish_conversion();
     c7c:	ea e7       	ldi	r30, 0x7A	; 122
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	86 fd       	sbrc	r24, 6
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <__vector_23+0x102>
                    rx_dist.low_gain = ADCW;
     c86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     c8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     c8e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <rx_dist+0x1>
     c92:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_dist>
                    adc_trigger_high_gain();
     c96:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c9a:	83 ea       	ldi	r24, 0xA3	; 163
     c9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
     ca6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <rx_bytevalue>
     caa:	88 23       	and	r24, r24
     cac:	61 f0       	breq	.+24     	; 0xcc6 <__vector_23+0x148>
                        rx_timer_off();
     cae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     cb2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cb6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_leadingbyte>
                        rx_busy = 0;
     cc0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>
     cc4:	54 c1       	rjmp	.+680    	; 0xf6e <__vector_23+0x3f0>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cc6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <rx_leadingbyte>
                        rx_byteindex = 0;
     cca:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_byteindex>
     cce:	4f c1       	rjmp	.+670    	; 0xf6e <__vector_23+0x3f0>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     cd0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_byteindex>
     cd4:	e8 2f       	mov	r30, r24
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ef 57       	subi	r30, 0x7F	; 127
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <rx_bytevalue>
     ce0:	90 83       	st	Z, r25
                    rx_byteindex++;
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ce8:	8c 30       	cpi	r24, 0x0C	; 12
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_23+0x170>
     cec:	40 c1       	rjmp	.+640    	; 0xf6e <__vector_23+0x3f0>
                        rx_timer_off();
     cee:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     cf2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cf6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_leadingbyte>
                        rx_busy = 0;
     d00:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d04:	c0 91 8b 01 	lds	r28, 0x018B	; 0x80018b <rx_msg+0xa>
     d08:	d0 91 8c 01 	lds	r29, 0x018C	; 0x80018c <rx_msg+0xb>
     d0c:	81 e8       	ldi	r24, 0x81	; 129
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
     d14:	c8 17       	cp	r28, r24
     d16:	d9 07       	cpc	r29, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_23+0x19e>
     d1a:	29 c1       	rjmp	.+594    	; 0xf6e <__vector_23+0x3f0>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d1c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rx_msg+0x9>
     d20:	88 23       	and	r24, r24
     d22:	54 f0       	brlt	.+20     	; 0xd38 <__vector_23+0x1ba>
        kilo_message_rx(&rx_msg, &rx_dist);
     d24:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <kilo_message_rx>
     d28:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <kilo_message_rx+0x1>
     d2c:	66 e5       	ldi	r22, 0x56	; 86
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	81 e8       	ldi	r24, 0x81	; 129
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	09 95       	icall
     d36:	1b c1       	rjmp	.+566    	; 0xf6e <__vector_23+0x3f0>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d38:	88 58       	subi	r24, 0x88	; 136
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	30 f0       	brcs	.+12     	; 0xd4a <__vector_23+0x1cc>
        motors_off();
     d3e:	53 98       	cbi	0x0a, 3	; 10
     d40:	23 98       	cbi	0x04, 3	; 4
     d42:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     d46:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
     d4a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rx_msg+0x9>
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	e0 58       	subi	r30, 0x80	; 128
     d54:	f1 09       	sbc	r31, r1
     d56:	eb 30       	cpi	r30, 0x0B	; 11
     d58:	f1 05       	cpc	r31, r1
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <__vector_23+0x1e0>
     d5c:	08 c1       	rjmp	.+528    	; 0xf6e <__vector_23+0x3f0>
     d5e:	e5 5c       	subi	r30, 0xC5	; 197
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d66:	ee e6       	ldi	r30, 0x6E	; 110
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 83       	st	Z, r24
     d70:	16 bc       	out	0x26, r1	; 38
            bootload();
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f0 e7       	ldi	r31, 0x70	; 112
     d76:	09 95       	icall
            break;
        case RESET:
            reset();
     d78:	e0 e0       	ldi	r30, 0x00	; 0
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d7e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <kilo_state>
     d82:	f5 c0       	rjmp	.+490    	; 0xf6e <__vector_23+0x3f0>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     d8a:	f1 c0       	rjmp	.+482    	; 0xf6e <__vector_23+0x3f0>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     d92:	ed c0       	rjmp	.+474    	; 0xf6e <__vector_23+0x3f0>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     d9a:	e9 c0       	rjmp	.+466    	; 0xf6e <__vector_23+0x3f0>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d9c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	09 f4       	brne	.+2      	; 0xda6 <__vector_23+0x228>
     da4:	e4 c0       	rjmp	.+456    	; 0xf6e <__vector_23+0x3f0>
     da6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__vector_23+0x232>
     dae:	df c0       	rjmp	.+446    	; 0xf6e <__vector_23+0x3f0>
                motors_on();
     db0:	53 9a       	sbi	0x0a, 3	; 10
     db2:	23 9a       	sbi	0x04, 3	; 4
     db4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     db8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     dc2:	d5 c0       	rjmp	.+426    	; 0xf6e <__vector_23+0x3f0>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dc4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <__vector_23+0x250>
     dcc:	4b c0       	rjmp	.+150    	; 0xe64 <__vector_23+0x2e6>
     dce:	28 f4       	brcc	.+10     	; 0xdda <__vector_23+0x25c>
     dd0:	88 23       	and	r24, r24
     dd2:	51 f0       	breq	.+20     	; 0xde8 <__vector_23+0x26a>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	d9 f1       	breq	.+118    	; 0xe4e <__vector_23+0x2d0>
     dd8:	8c c0       	rjmp	.+280    	; 0xef2 <__vector_23+0x374>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	09 f4       	brne	.+2      	; 0xde0 <__vector_23+0x262>
     dde:	57 c0       	rjmp	.+174    	; 0xe8e <__vector_23+0x310>
     de0:	84 30       	cpi	r24, 0x04	; 4
     de2:	09 f4       	brne	.+2      	; 0xde6 <__vector_23+0x268>
     de4:	68 c0       	rjmp	.+208    	; 0xeb6 <__vector_23+0x338>
     de6:	85 c0       	rjmp	.+266    	; 0xef2 <__vector_23+0x374>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     de8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     dec:	86 30       	cpi	r24, 0x06	; 6
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__vector_23+0x274>
     df0:	be c0       	rjmp	.+380    	; 0xf6e <__vector_23+0x3f0>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     df2:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_uid>
     df6:	80 eb       	ldi	r24, 0xB0	; 176
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     dfe:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_uid+0x1>
     e02:	81 eb       	ldi	r24, 0xB1	; 177
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e0a:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <kilo_turn_left>
     e0e:	85 e0       	ldi	r24, 0x05	; 5
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e16:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <kilo_turn_right>
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e22:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_left>
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e2e:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_straight_right>
     e32:	84 e1       	ldi	r24, 0x14	; 20
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        motors_off();
     e3a:	53 98       	cbi	0x0a, 3	; 10
     e3c:	23 98       	cbi	0x04, 3	; 4
     e3e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     e42:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     e4c:	52 c0       	rjmp	.+164    	; 0xef2 <__vector_23+0x374>
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e4e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rx_msg+0x1>
     e52:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <rx_msg+0x2>
     e56:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <kilo_uid+0x1>
     e5a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <kilo_uid>
                    cur_motion = MOVE_STOP;
     e5e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
     e62:	4b c0       	rjmp	.+150    	; 0xefa <__vector_23+0x37c>
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e64:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	39 f4       	brne	.+14     	; 0xe7a <__vector_23+0x2fc>
     e6c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <rx_msg+0x3>
     e70:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <kilo_turn_left>
     e74:	98 17       	cp	r25, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <__vector_23+0x2fc>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     e7a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <prev_motion>
                        cur_motion = MOVE_LEFT;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
                        kilo_turn_left = calibmsg->turn_left;
     e84:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_msg+0x3>
     e88:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <kilo_turn_left>
     e8c:	36 c0       	rjmp	.+108    	; 0xefa <__vector_23+0x37c>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e8e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	31 f4       	brne	.+12     	; 0xea2 <__vector_23+0x324>
     e96:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rx_msg+0x4>
     e9a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <kilo_turn_right>
     e9e:	98 17       	cp	r25, r24
     ea0:	61 f1       	breq	.+88     	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     ea2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
                        kilo_turn_right = calibmsg->turn_right;
     eac:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <rx_msg+0x4>
     eb0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <kilo_turn_right>
     eb4:	22 c0       	rjmp	.+68     	; 0xefa <__vector_23+0x37c>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     eb6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	61 f4       	brne	.+24     	; 0xed6 <__vector_23+0x358>
     ebe:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <rx_msg+0x6>
     ec2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_straight_right>
     ec6:	98 13       	cpse	r25, r24
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <__vector_23+0x358>
     eca:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_msg+0x5>
     ece:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <kilo_straight_left>
     ed2:	98 17       	cp	r25, r24
     ed4:	91 f0       	breq	.+36     	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     ed6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
                        kilo_straight_left = calibmsg->straight_left;
     ee0:	e1 e8       	ldi	r30, 0x81	; 129
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	85 81       	ldd	r24, Z+5	; 0x05
     ee6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_straight_right>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <__vector_23+0x37c>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ef2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg>
     ef6:	88 23       	and	r24, r24
     ef8:	d1 f1       	breq	.+116    	; 0xf6e <__vector_23+0x3f0>
     efa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	b1 f1       	breq	.+108    	; 0xf6e <__vector_23+0x3f0>
                motors_on();
     f02:	53 9a       	sbi	0x0a, 3	; 10
     f04:	23 9a       	sbi	0x04, 3	; 4
     f06:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     f0a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
     f14:	2c c0       	rjmp	.+88     	; 0xf6e <__vector_23+0x3f0>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f16:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_state>
     f1a:	86 30       	cpi	r24, 0x06	; 6
     f1c:	81 f0       	breq	.+32     	; 0xf3e <__vector_23+0x3c0>
                motors_on();
     f1e:	53 9a       	sbi	0x0a, 3	; 10
     f20:	23 9a       	sbi	0x04, 3	; 4
     f22:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     f26:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                set_color(RGB(0,0,0));
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f30:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
     f34:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <prev_motion>
                kilo_state = MOVING;
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c 01       	movw	r18, r24
     f44:	00 90 81 01 	lds	r0, 0x0181	; 0x800181 <rx_msg>
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__vector_23+0x3d0>
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <__vector_23+0x3cc>
     f52:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <kilo_uid>
     f56:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_uid+0x1>
     f5a:	82 23       	and	r24, r18
     f5c:	93 23       	and	r25, r19
     f5e:	89 2b       	or	r24, r25
     f60:	21 f0       	breq	.+8      	; 0xf6a <__vector_23+0x3ec>
                cur_motion = MOVE_LEFT;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <__vector_23+0x3f0>
            else
                cur_motion = MOVE_STOP;
     f6a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
                    }
                }
            }
        }
    }
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f94:	fc 01       	movw	r30, r24
     f96:	ac 01       	movw	r20, r24
     f98:	46 5f       	subi	r20, 0xF6	; 246
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     fa0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     fa2:	82 27       	eor	r24, r18
     fa4:	08 2e       	mov	r0, r24
     fa6:	82 95       	swap	r24
     fa8:	80 7f       	andi	r24, 0xF0	; 240
     faa:	80 25       	eor	r24, r0
     fac:	09 2e       	mov	r0, r25
     fae:	98 2f       	mov	r25, r24
     fb0:	82 95       	swap	r24
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	08 26       	eor	r0, r24
     fb6:	86 95       	lsr	r24
     fb8:	98 27       	eor	r25, r24
     fba:	89 27       	eor	r24, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	88 0f       	add	r24, r24
     fc0:	88 0f       	add	r24, r24
     fc2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fc4:	e4 17       	cp	r30, r20
     fc6:	f5 07       	cpc	r31, r21
     fc8:	59 f7       	brne	.-42     	; 0xfa0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fca:	08 95       	ret

00000fcc <message_tx>:
	else if (random_direction == 1){
		set_motion(LEFT);
	}
	
	else if (random_direction == 2) {
		set_motion(RIGHT);
     fcc:	81 ea       	ldi	r24, 0xA1	; 161
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	08 95       	ret

00000fd2 <message_tx_success>:
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <message_sent+0x1>
     fda:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <message_sent>
     fde:	08 95       	ret

00000fe0 <setup2>:
     fe0:	08 95       	ret

00000fe2 <loop1>:
     fe2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <message_sent>
     fe6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <message_sent+0x1>
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	71 f4       	brne	.+28     	; 0x100a <loop1+0x28>
     fee:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <message_sent+0x1>
     ff2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <message_sent>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     ffc:	84 e6       	ldi	r24, 0x64	; 100
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    100a:	08 95       	ret

0000100c <message_rx>:
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
    1012:	9c e0       	ldi	r25, 0x0C	; 12
    1014:	fe 01       	movw	r30, r28
    1016:	a5 e9       	ldi	r26, 0x95	; 149
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	01 90       	ld	r0, Z+
    101c:	0d 92       	st	X+, r0
    101e:	9a 95       	dec	r25
    1020:	e1 f7       	brne	.-8      	; 0x101a <message_rx+0xe>
    1022:	88 81       	ld	r24, Y
    1024:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <data>
    1028:	cb 01       	movw	r24, r22
    102a:	0e 94 2b 02 	call	0x456	; 0x456 <estimate_distance>
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <dist+0x1>
    1034:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dist>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <new_message1+0x1>
    1040:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <new_message1>
    1044:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <new_message2+0x1>
    1048:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <new_message2>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <setup1>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	c1 ea       	ldi	r28, 0xA1	; 161
    1058:	d1 e0       	ldi	r29, 0x01	; 1
    105a:	19 86       	std	Y+9, r1	; 0x09
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	88 83       	st	Y, r24
    1060:	ce 01       	movw	r24, r28
    1062:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
    1066:	9b 87       	std	Y+11, r25	; 0x0b
    1068:	8a 87       	std	Y+10, r24	; 0x0a
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <set_motion>:
    1070:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <current_motion>
    1074:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <current_motion+0x1>
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	59 f1       	breq	.+86     	; 0x10d4 <set_motion+0x64>
    107e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <current_motion+0x1>
    1082:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <current_motion>
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	29 f4       	brne	.+10     	; 0x1094 <set_motion+0x24>
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    1092:	08 95       	ret
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	49 f4       	brne	.+18     	; 0x10ac <set_motion+0x3c>
    109a:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    109e:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_straight_right>
    10a2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <kilo_straight_left>
    10a6:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    10aa:	08 95       	ret
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	91 05       	cpc	r25, r1
    10b0:	41 f4       	brne	.+16     	; 0x10c2 <set_motion+0x52>
    10b2:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <kilo_turn_left>
    10bc:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    10c0:	08 95       	ret
    10c2:	03 97       	sbiw	r24, 0x03	; 3
    10c4:	39 f4       	brne	.+14     	; 0x10d4 <set_motion+0x64>
    10c6:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    10ca:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <kilo_turn_right>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    10d4:	08 95       	ret

000010d6 <move_random>:
	}
}

void move_random() {
	
	set_motion(FORWARD);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
    10de:	08 95       	ret

000010e0 <move>:
	
}

void move() {
	
	if(firstTimeInRange == 1) {
    10e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <firstTimeInRange>
    10e4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <firstTimeInRange+0x1>
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	91 f5       	brne	.+100    	; 0x1152 <move+0x72>
		if(firstMove) {
    10ee:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <firstMove>
    10f2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <firstMove+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <move+0x32>
			firstMove = 0;
    10fa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <firstMove+0x1>
    10fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <firstMove>
			set_motion(FORWARD);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			set_color(RGB(1,0,0));
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    1110:	ba c0       	rjmp	.+372    	; 0x1286 <move+0x1a6>
		}
		
		else if (dist > last_dist) {
    1112:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <dist>
    1116:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <dist+0x1>
    111a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <last_dist>
    111e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <last_dist+0x1>
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	0c f0       	brlt	.+2      	; 0x112a <move+0x4a>
    1128:	ae c0       	rjmp	.+348    	; 0x1286 <move+0x1a6>
			set_motion(STOP);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			set_color(RGB(0,0,1));
    1132:	80 e1       	ldi	r24, 0x10	; 16
    1134:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
			firstTimeInRange = 2;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <firstTimeInRange+0x1>
    1140:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <firstTimeInRange>
			firstMove = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <firstMove+0x1>
    114c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <firstMove>
    1150:	9a c0       	rjmp	.+308    	; 0x1286 <move+0x1a6>
		}
	}

	else if(firstTimeInRange == 2) {
    1152:	02 97       	sbiw	r24, 0x02	; 2
    1154:	09 f0       	breq	.+2      	; 0x1158 <move+0x78>
    1156:	97 c0       	rjmp	.+302    	; 0x1286 <move+0x1a6>
		if(firstMove) {
    1158:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <firstMove>
    115c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <firstMove+0x1>
    1160:	89 2b       	or	r24, r25
    1162:	09 f4       	brne	.+2      	; 0x1166 <move+0x86>
    1164:	43 c0       	rjmp	.+134    	; 0x11ec <move+0x10c>
			last_dist2 = dist;
    1166:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dist>
    116a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <dist+0x1>
    116e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <last_dist2+0x1>
    1172:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <last_dist2>
			set_motion(correct_motion);
    1176:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <correct_motion>
    117a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <correct_motion+0x1>
    117e:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			set_color(RGB(1,0,1));
    1182:	81 e1       	ldi	r24, 0x11	; 17
    1184:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
			mayGetOutOfRange = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <mayGetOutOfRange+0x1>
    1190:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mayGetOutOfRange>
			delay(turnMultiplier * 1500);
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e8       	ldi	r19, 0x80	; 128
    1198:	4b eb       	ldi	r20, 0xBB	; 187
    119a:	54 e4       	ldi	r21, 0x44	; 68
    119c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <turnMultiplier>
    11a0:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <turnMultiplier+0x1>
    11a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <turnMultiplier+0x2>
    11a8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <turnMultiplier+0x3>
    11ac:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
    11b0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__fixunssfsi>
    11b4:	cb 01       	movw	r24, r22
    11b6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
			turnMultiplier = 1;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e8       	ldi	r26, 0x80	; 128
    11c0:	bf e3       	ldi	r27, 0x3F	; 63
    11c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <turnMultiplier>
    11c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <turnMultiplier+0x1>
    11ca:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <turnMultiplier+0x2>
    11ce:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <turnMultiplier+0x3>
			
			set_motion(FORWARD);
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			delay(2000);
    11da:	80 ed       	ldi	r24, 0xD0	; 208
    11dc:	97 e0       	ldi	r25, 0x07	; 7
    11de:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
			firstMove = 0;
    11e2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <firstMove+0x1>
    11e6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <firstMove>
    11ea:	4d c0       	rjmp	.+154    	; 0x1286 <move+0x1a6>
		}
		else if (firstMove == 0 && dist >= last_dist2) {
    11ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <dist>
    11f0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <dist+0x1>
    11f4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <last_dist2>
    11f8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <last_dist2+0x1>
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	a4 f1       	brlt	.+104    	; 0x126a <move+0x18a>
			set_motion(STOP);
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			
			set_color(RGB(1,1,0));
    120a:	85 e0       	ldi	r24, 0x05	; 5
    120c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
			
			if(correct_motion == RIGHT) {
    1210:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <correct_motion>
    1214:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <correct_motion+0x1>
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	39 f4       	brne	.+14     	; 0x122c <move+0x14c>
				correct_motion = LEFT;
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <correct_motion+0x1>
    1226:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <correct_motion>
    122a:	08 c0       	rjmp	.+16     	; 0x123c <move+0x15c>
			}
			else if(correct_motion == LEFT) {
    122c:	02 97       	sbiw	r24, 0x02	; 2
    122e:	31 f4       	brne	.+12     	; 0x123c <move+0x15c>
				correct_motion = RIGHT;
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <correct_motion+0x1>
    1238:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <correct_motion>
			}
			turnMultiplier = 3;
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e4       	ldi	r26, 0x40	; 64
    1242:	b0 e4       	ldi	r27, 0x40	; 64
    1244:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <turnMultiplier>
    1248:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <turnMultiplier+0x1>
    124c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <turnMultiplier+0x2>
    1250:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <turnMultiplier+0x3>
			firstMove = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <firstMove+0x1>
    125c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <firstMove>
			mayGetOutOfRange = 0;
    1260:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mayGetOutOfRange+0x1>
    1264:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mayGetOutOfRange>
    1268:	0e c0       	rjmp	.+28     	; 0x1286 <move+0x1a6>
			delay(2000);
			displayNumber(last_dist2);
			delay(2000);
			*/
			
			mayGetOutOfRange = 0;
    126a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mayGetOutOfRange+0x1>
    126e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mayGetOutOfRange>
			firstTimeInRange = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <firstTimeInRange+0x1>
    127a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <firstTimeInRange>
			firstMove = 1;
    127e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <firstMove+0x1>
    1282:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <firstMove>
		}
		
	}
	
	last_dist = dist;
    1286:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dist>
    128a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <dist+0x1>
    128e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <last_dist+0x1>
    1292:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <last_dist>
    1296:	08 95       	ret

00001298 <loop2>:
void setup2() {
	
}


void loop2() {
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
	
	if (startingMove) {
    129c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <startingMove>
    12a0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <startingMove+0x1>
    12a4:	89 2b       	or	r24, r25
    12a6:	91 f0       	breq	.+36     	; 0x12cc <loop2+0x34>
		if(kilo_uid == 3) {
    12a8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <kilo_uid>
    12ac:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_uid+0x1>
    12b0:	03 97       	sbiw	r24, 0x03	; 3
    12b2:	31 f4       	brne	.+12     	; 0x12c0 <loop2+0x28>
			inPositionDistance = 33;
    12b4:	81 e2       	ldi	r24, 0x21	; 33
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <inPositionDistance+0x1>
    12bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <inPositionDistance>
		}
		move_random();
    12c0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <move_random>
		startingMove = 0;
    12c4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <startingMove+0x1>
    12c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <startingMove>
	}
	
	if(new_message1 == 1) {
    12cc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <new_message1>
    12d0:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <new_message1+0x1>
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	e9 f5       	brne	.+122    	; 0x1352 <loop2+0xba>
		if(dist <= inPositionDistance && (data == 1 || data == 2)) {
    12d8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <dist>
    12dc:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <dist+0x1>
    12e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <inPositionDistance>
    12e4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <inPositionDistance+0x1>
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	24 f1       	brlt	.+72     	; 0x1336 <loop2+0x9e>
    12ee:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <data>
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	f8 f4       	brcc	.+62     	; 0x1336 <loop2+0x9e>
			set_motion(STOP);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
			set_color(RGB(1,1,1));
    1300:	85 e1       	ldi	r24, 0x15	; 21
    1302:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
			if(firstInTimeinPosition) {
    1306:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <firstInTimeinPosition>
    130a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <firstInTimeinPosition+0x1>
    130e:	89 2b       	or	r24, r25
    1310:	e1 f0       	breq	.+56     	; 0x134a <loop2+0xb2>
				
				transmit_message.type = NORMAL;
    1312:	c1 ea       	ldi	r28, 0xA1	; 161
    1314:	d1 e0       	ldi	r29, 0x01	; 1
    1316:	19 86       	std	Y+9, r1	; 0x09
				transmit_message.data[0] = 2;
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	88 83       	st	Y, r24
				transmit_message.crc = message_crc(&transmit_message);
    131c:	ce 01       	movw	r24, r28
    131e:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
    1322:	9b 87       	std	Y+11, r25	; 0x0b
    1324:	8a 87       	std	Y+10, r24	; 0x0a
				
				firstInTimeinPosition = 0;
    1326:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <firstInTimeinPosition+0x1>
    132a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <firstInTimeinPosition>
				isInPosition = 1;	
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <isInPosition>
    1334:	0a c0       	rjmp	.+20     	; 0x134a <loop2+0xb2>
			}

		}
		else {
			if(data == 1 && !isInPosition)
    1336:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <data>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	31 f4       	brne	.+12     	; 0x134a <loop2+0xb2>
    133e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <isInPosition>
    1342:	81 11       	cpse	r24, r1
    1344:	02 c0       	rjmp	.+4      	; 0x134a <loop2+0xb2>
				move();
    1346:	0e 94 70 08 	call	0x10e0	; 0x10e0 <move>
		}
		new_message1 = 0;
    134a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <new_message1+0x1>
    134e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <new_message1>
	}
	
	if (kilo_ticks > last_update2 + 3 * SECOND)
    1352:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <kilo_ticks>
    1356:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <kilo_ticks+0x1>
    135a:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <kilo_ticks+0x2>
    135e:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <kilo_ticks+0x3>
    1362:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <last_update2>
    1366:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <last_update2+0x1>
    136a:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <last_update2+0x2>
    136e:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <last_update2+0x3>
    1372:	80 5a       	subi	r24, 0xA0	; 160
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	af 4f       	sbci	r26, 0xFF	; 255
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	84 17       	cp	r24, r20
    137c:	95 07       	cpc	r25, r21
    137e:	a6 07       	cpc	r26, r22
    1380:	b7 07       	cpc	r27, r23
    1382:	08 f0       	brcs	.+2      	; 0x1386 <loop2+0xee>
    1384:	8c c0       	rjmp	.+280    	; 0x149e <loop2+0x206>
	{
		last_update2 = kilo_ticks;
    1386:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <kilo_ticks>
    138a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_ticks+0x1>
    138e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <kilo_ticks+0x2>
    1392:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <kilo_ticks+0x3>
    1396:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <last_update2>
    139a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <last_update2+0x1>
    139e:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <last_update2+0x2>
    13a2:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <last_update2+0x3>
		
		if(new_message2) {
    13a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <new_message2>
    13aa:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <new_message2+0x1>
    13ae:	89 2b       	or	r24, r25
    13b0:	29 f0       	breq	.+10     	; 0x13bc <loop2+0x124>
			new_message2 = 0;
    13b2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <new_message2+0x1>
    13b6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <new_message2>
    13ba:	71 c0       	rjmp	.+226    	; 0x149e <loop2+0x206>
		}
		else {
			if (mayGetOutOfRange == 1) {
    13bc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mayGetOutOfRange>
    13c0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <mayGetOutOfRange+0x1>
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	e9 f5       	brne	.+122    	; 0x1442 <loop2+0x1aa>
				if (correct_motion == RIGHT) {
    13c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <correct_motion>
    13cc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <correct_motion+0x1>
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	39 f4       	brne	.+14     	; 0x13e4 <loop2+0x14c>
					correct_motion = LEFT;
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <correct_motion+0x1>
    13de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <correct_motion>
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <loop2+0x15c>
				}
				else if (correct_motion == LEFT){
    13e4:	02 97       	sbiw	r24, 0x02	; 2
    13e6:	31 f4       	brne	.+12     	; 0x13f4 <loop2+0x15c>
					correct_motion = RIGHT;
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <correct_motion+0x1>
    13f0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <correct_motion>
					
				}
				last_dist = 1000;
    13f4:	88 ee       	ldi	r24, 0xE8	; 232
    13f6:	93 e0       	ldi	r25, 0x03	; 3
    13f8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <last_dist+0x1>
    13fc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <last_dist>
				firstMove = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <firstMove+0x1>
    1408:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <firstMove>
				firstTimeInRange = 1;
    140c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <firstTimeInRange+0x1>
    1410:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <firstTimeInRange>
				set_motion(correct_motion);
    1414:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <correct_motion>
    1418:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <correct_motion+0x1>
    141c:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
				delay(4*1500);
    1420:	80 e7       	ldi	r24, 0x70	; 112
    1422:	97 e1       	ldi	r25, 0x17	; 23
    1424:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
				set_motion(FORWARD);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 38 08 	call	0x1070	; 0x1070 <set_motion>
				delay(4000);
    1430:	80 ea       	ldi	r24, 0xA0	; 160
    1432:	9f e0       	ldi	r25, 0x0F	; 15
    1434:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
				mayGetOutOfRange = 0;
    1438:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mayGetOutOfRange+0x1>
    143c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mayGetOutOfRange>
    1440:	2e c0       	rjmp	.+92     	; 0x149e <loop2+0x206>
			}
			else {
				transmit_message.type = NORMAL;
    1442:	c1 ea       	ldi	r28, 0xA1	; 161
    1444:	d1 e0       	ldi	r29, 0x01	; 1
    1446:	19 86       	std	Y+9, r1	; 0x09
				transmit_message.data[0] = 0;
    1448:	18 82       	st	Y, r1
				transmit_message.crc = message_crc(&transmit_message);
    144a:	ce 01       	movw	r24, r28
    144c:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
    1450:	9b 87       	std	Y+11, r25	; 0x0b
    1452:	8a 87       	std	Y+10, r24	; 0x0a
				
				correct_motion = RIGHT;
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <correct_motion+0x1>
    145c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <correct_motion>
				isInPosition = 0;
    1460:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <isInPosition>
				firstTimeInRange = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <firstTimeInRange+0x1>
    146c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <firstTimeInRange>
				firstMove = 1;
    1470:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <firstMove+0x1>
    1474:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <firstMove>
				last_dist = 1000;
    1478:	88 ee       	ldi	r24, 0xE8	; 232
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <last_dist+0x1>
    1480:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <last_dist>
				right_distante = 1000;
    1484:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <right_distante+0x1>
    1488:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <right_distante>
				left_distante = 1000;
    148c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <left_distante+0x1>
    1490:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <left_distante>
				move_random();
    1494:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <move_random>
				set_color(RGB(0,1,1));
    1498:	84 e1       	ldi	r24, 0x14	; 20
    149a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
			}
		}
	}
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <main>:
/* Sfarsit */


int main()
{
	kilo_init();
    14a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <kilo_init>
	if(kilo_uid == 3 || kilo_uid == 9) {
    14a8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <kilo_uid>
    14ac:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_uid+0x1>
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	11 f0       	breq	.+4      	; 0x14ba <main+0x16>
    14b6:	09 97       	sbiw	r24, 0x09	; 9
    14b8:	99 f4       	brne	.+38     	; 0x14e0 <main+0x3c>
		/* Robotii beacon */
		kilo_message_tx = message_tx;
    14ba:	86 ee       	ldi	r24, 0xE6	; 230
    14bc:	97 e0       	ldi	r25, 0x07	; 7
    14be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_tx+0x1>
    14c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_tx>
		kilo_message_tx_success = message_tx_success;
    14c6:	89 ee       	ldi	r24, 0xE9	; 233
    14c8:	97 e0       	ldi	r25, 0x07	; 7
    14ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx_success+0x1>
    14ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx_success>
		kilo_start(setup1, loop1);		
    14d2:	61 ef       	ldi	r22, 0xF1	; 241
    14d4:	77 e0       	ldi	r23, 0x07	; 7
    14d6:	89 e2       	ldi	r24, 0x29	; 41
    14d8:	98 e0       	ldi	r25, 0x08	; 8
    14da:	0e 94 6f 04 	call	0x8de	; 0x8de <kilo_start>
    14de:	18 c0       	rjmp	.+48     	; 0x1510 <main+0x6c>
	}
	else {
		/* Robotii care se deplaseaza */
		kilo_message_rx = message_rx;
    14e0:	86 e0       	ldi	r24, 0x06	; 6
    14e2:	98 e0       	ldi	r25, 0x08	; 8
    14e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <kilo_message_rx+0x1>
    14e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <kilo_message_rx>
		kilo_message_tx = message_tx;
    14ec:	86 ee       	ldi	r24, 0xE6	; 230
    14ee:	97 e0       	ldi	r25, 0x07	; 7
    14f0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_tx+0x1>
    14f4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_tx>
		kilo_message_tx_success = message_tx_success;
    14f8:	89 ee       	ldi	r24, 0xE9	; 233
    14fa:	97 e0       	ldi	r25, 0x07	; 7
    14fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx_success+0x1>
    1500:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx_success>
		kilo_start(setup2, loop2);
    1504:	6c e4       	ldi	r22, 0x4C	; 76
    1506:	79 e0       	ldi	r23, 0x09	; 9
    1508:	80 ef       	ldi	r24, 0xF0	; 240
    150a:	97 e0       	ldi	r25, 0x07	; 7
    150c:	0e 94 6f 04 	call	0x8de	; 0x8de <kilo_start>
	}

	return 0;
}
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	08 95       	ret

00001516 <__subsf3>:
    1516:	50 58       	subi	r21, 0x80	; 128

00001518 <__addsf3>:
    1518:	bb 27       	eor	r27, r27
    151a:	aa 27       	eor	r26, r26
    151c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__addsf3x>
    1520:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_round>
    1524:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscA>
    1528:	38 f0       	brcs	.+14     	; 0x1538 <__addsf3+0x20>
    152a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscB>
    152e:	20 f0       	brcs	.+8      	; 0x1538 <__addsf3+0x20>
    1530:	39 f4       	brne	.+14     	; 0x1540 <__addsf3+0x28>
    1532:	9f 3f       	cpi	r25, 0xFF	; 255
    1534:	19 f4       	brne	.+6      	; 0x153c <__addsf3+0x24>
    1536:	26 f4       	brtc	.+8      	; 0x1540 <__addsf3+0x28>
    1538:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__fp_nan>
    153c:	0e f4       	brtc	.+2      	; 0x1540 <__addsf3+0x28>
    153e:	e0 95       	com	r30
    1540:	e7 fb       	bst	r30, 7
    1542:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_inf>

00001546 <__addsf3x>:
    1546:	e9 2f       	mov	r30, r25
    1548:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_split3>
    154c:	58 f3       	brcs	.-42     	; 0x1524 <__addsf3+0xc>
    154e:	ba 17       	cp	r27, r26
    1550:	62 07       	cpc	r22, r18
    1552:	73 07       	cpc	r23, r19
    1554:	84 07       	cpc	r24, r20
    1556:	95 07       	cpc	r25, r21
    1558:	20 f0       	brcs	.+8      	; 0x1562 <__addsf3x+0x1c>
    155a:	79 f4       	brne	.+30     	; 0x157a <__addsf3x+0x34>
    155c:	a6 f5       	brtc	.+104    	; 0x15c6 <__addsf3x+0x80>
    155e:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_zero>
    1562:	0e f4       	brtc	.+2      	; 0x1566 <__addsf3x+0x20>
    1564:	e0 95       	com	r30
    1566:	0b 2e       	mov	r0, r27
    1568:	ba 2f       	mov	r27, r26
    156a:	a0 2d       	mov	r26, r0
    156c:	0b 01       	movw	r0, r22
    156e:	b9 01       	movw	r22, r18
    1570:	90 01       	movw	r18, r0
    1572:	0c 01       	movw	r0, r24
    1574:	ca 01       	movw	r24, r20
    1576:	a0 01       	movw	r20, r0
    1578:	11 24       	eor	r1, r1
    157a:	ff 27       	eor	r31, r31
    157c:	59 1b       	sub	r21, r25
    157e:	99 f0       	breq	.+38     	; 0x15a6 <__addsf3x+0x60>
    1580:	59 3f       	cpi	r21, 0xF9	; 249
    1582:	50 f4       	brcc	.+20     	; 0x1598 <__addsf3x+0x52>
    1584:	50 3e       	cpi	r21, 0xE0	; 224
    1586:	68 f1       	brcs	.+90     	; 0x15e2 <__addsf3x+0x9c>
    1588:	1a 16       	cp	r1, r26
    158a:	f0 40       	sbci	r31, 0x00	; 0
    158c:	a2 2f       	mov	r26, r18
    158e:	23 2f       	mov	r18, r19
    1590:	34 2f       	mov	r19, r20
    1592:	44 27       	eor	r20, r20
    1594:	58 5f       	subi	r21, 0xF8	; 248
    1596:	f3 cf       	rjmp	.-26     	; 0x157e <__addsf3x+0x38>
    1598:	46 95       	lsr	r20
    159a:	37 95       	ror	r19
    159c:	27 95       	ror	r18
    159e:	a7 95       	ror	r26
    15a0:	f0 40       	sbci	r31, 0x00	; 0
    15a2:	53 95       	inc	r21
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__addsf3x+0x52>
    15a6:	7e f4       	brtc	.+30     	; 0x15c6 <__addsf3x+0x80>
    15a8:	1f 16       	cp	r1, r31
    15aa:	ba 0b       	sbc	r27, r26
    15ac:	62 0b       	sbc	r22, r18
    15ae:	73 0b       	sbc	r23, r19
    15b0:	84 0b       	sbc	r24, r20
    15b2:	ba f0       	brmi	.+46     	; 0x15e2 <__addsf3x+0x9c>
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	a1 f0       	breq	.+40     	; 0x15e0 <__addsf3x+0x9a>
    15b8:	ff 0f       	add	r31, r31
    15ba:	bb 1f       	adc	r27, r27
    15bc:	66 1f       	adc	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	c2 f7       	brpl	.-16     	; 0x15b4 <__addsf3x+0x6e>
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <__addsf3x+0x9c>
    15c6:	ba 0f       	add	r27, r26
    15c8:	62 1f       	adc	r22, r18
    15ca:	73 1f       	adc	r23, r19
    15cc:	84 1f       	adc	r24, r20
    15ce:	48 f4       	brcc	.+18     	; 0x15e2 <__addsf3x+0x9c>
    15d0:	87 95       	ror	r24
    15d2:	77 95       	ror	r23
    15d4:	67 95       	ror	r22
    15d6:	b7 95       	ror	r27
    15d8:	f7 95       	ror	r31
    15da:	9e 3f       	cpi	r25, 0xFE	; 254
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <__addsf3x+0x9a>
    15de:	b0 cf       	rjmp	.-160    	; 0x1540 <__addsf3+0x28>
    15e0:	93 95       	inc	r25
    15e2:	88 0f       	add	r24, r24
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <__addsf3x+0xa2>
    15e6:	99 27       	eor	r25, r25
    15e8:	ee 0f       	add	r30, r30
    15ea:	97 95       	ror	r25
    15ec:	87 95       	ror	r24
    15ee:	08 95       	ret

000015f0 <__divsf3>:
    15f0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__divsf3x>
    15f4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_round>
    15f8:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscB>
    15fc:	58 f0       	brcs	.+22     	; 0x1614 <__divsf3+0x24>
    15fe:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscA>
    1602:	40 f0       	brcs	.+16     	; 0x1614 <__divsf3+0x24>
    1604:	29 f4       	brne	.+10     	; 0x1610 <__divsf3+0x20>
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	29 f0       	breq	.+10     	; 0x1614 <__divsf3+0x24>
    160a:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_inf>
    160e:	51 11       	cpse	r21, r1
    1610:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_szero>
    1614:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__fp_nan>

00001618 <__divsf3x>:
    1618:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_split3>
    161c:	68 f3       	brcs	.-38     	; 0x15f8 <__divsf3+0x8>

0000161e <__divsf3_pse>:
    161e:	99 23       	and	r25, r25
    1620:	b1 f3       	breq	.-20     	; 0x160e <__divsf3+0x1e>
    1622:	55 23       	and	r21, r21
    1624:	91 f3       	breq	.-28     	; 0x160a <__divsf3+0x1a>
    1626:	95 1b       	sub	r25, r21
    1628:	55 0b       	sbc	r21, r21
    162a:	bb 27       	eor	r27, r27
    162c:	aa 27       	eor	r26, r26
    162e:	62 17       	cp	r22, r18
    1630:	73 07       	cpc	r23, r19
    1632:	84 07       	cpc	r24, r20
    1634:	38 f0       	brcs	.+14     	; 0x1644 <__divsf3_pse+0x26>
    1636:	9f 5f       	subi	r25, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	22 0f       	add	r18, r18
    163c:	33 1f       	adc	r19, r19
    163e:	44 1f       	adc	r20, r20
    1640:	aa 1f       	adc	r26, r26
    1642:	a9 f3       	breq	.-22     	; 0x162e <__divsf3_pse+0x10>
    1644:	35 d0       	rcall	.+106    	; 0x16b0 <__divsf3_pse+0x92>
    1646:	0e 2e       	mov	r0, r30
    1648:	3a f0       	brmi	.+14     	; 0x1658 <__divsf3_pse+0x3a>
    164a:	e0 e8       	ldi	r30, 0x80	; 128
    164c:	32 d0       	rcall	.+100    	; 0x16b2 <__divsf3_pse+0x94>
    164e:	91 50       	subi	r25, 0x01	; 1
    1650:	50 40       	sbci	r21, 0x00	; 0
    1652:	e6 95       	lsr	r30
    1654:	00 1c       	adc	r0, r0
    1656:	ca f7       	brpl	.-14     	; 0x164a <__divsf3_pse+0x2c>
    1658:	2b d0       	rcall	.+86     	; 0x16b0 <__divsf3_pse+0x92>
    165a:	fe 2f       	mov	r31, r30
    165c:	29 d0       	rcall	.+82     	; 0x16b0 <__divsf3_pse+0x92>
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	bb 1f       	adc	r27, r27
    1666:	26 17       	cp	r18, r22
    1668:	37 07       	cpc	r19, r23
    166a:	48 07       	cpc	r20, r24
    166c:	ab 07       	cpc	r26, r27
    166e:	b0 e8       	ldi	r27, 0x80	; 128
    1670:	09 f0       	breq	.+2      	; 0x1674 <__divsf3_pse+0x56>
    1672:	bb 0b       	sbc	r27, r27
    1674:	80 2d       	mov	r24, r0
    1676:	bf 01       	movw	r22, r30
    1678:	ff 27       	eor	r31, r31
    167a:	93 58       	subi	r25, 0x83	; 131
    167c:	5f 4f       	sbci	r21, 0xFF	; 255
    167e:	3a f0       	brmi	.+14     	; 0x168e <__divsf3_pse+0x70>
    1680:	9e 3f       	cpi	r25, 0xFE	; 254
    1682:	51 05       	cpc	r21, r1
    1684:	78 f0       	brcs	.+30     	; 0x16a4 <__divsf3_pse+0x86>
    1686:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_inf>
    168a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_szero>
    168e:	5f 3f       	cpi	r21, 0xFF	; 255
    1690:	e4 f3       	brlt	.-8      	; 0x168a <__divsf3_pse+0x6c>
    1692:	98 3e       	cpi	r25, 0xE8	; 232
    1694:	d4 f3       	brlt	.-12     	; 0x168a <__divsf3_pse+0x6c>
    1696:	86 95       	lsr	r24
    1698:	77 95       	ror	r23
    169a:	67 95       	ror	r22
    169c:	b7 95       	ror	r27
    169e:	f7 95       	ror	r31
    16a0:	9f 5f       	subi	r25, 0xFF	; 255
    16a2:	c9 f7       	brne	.-14     	; 0x1696 <__divsf3_pse+0x78>
    16a4:	88 0f       	add	r24, r24
    16a6:	91 1d       	adc	r25, r1
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	97 f9       	bld	r25, 7
    16ae:	08 95       	ret
    16b0:	e1 e0       	ldi	r30, 0x01	; 1
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	bb 1f       	adc	r27, r27
    16ba:	62 17       	cp	r22, r18
    16bc:	73 07       	cpc	r23, r19
    16be:	84 07       	cpc	r24, r20
    16c0:	ba 07       	cpc	r27, r26
    16c2:	20 f0       	brcs	.+8      	; 0x16cc <__divsf3_pse+0xae>
    16c4:	62 1b       	sub	r22, r18
    16c6:	73 0b       	sbc	r23, r19
    16c8:	84 0b       	sbc	r24, r20
    16ca:	ba 0b       	sbc	r27, r26
    16cc:	ee 1f       	adc	r30, r30
    16ce:	88 f7       	brcc	.-30     	; 0x16b2 <__divsf3_pse+0x94>
    16d0:	e0 95       	com	r30
    16d2:	08 95       	ret

000016d4 <__fixsfsi>:
    16d4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__fixunssfsi>
    16d8:	68 94       	set
    16da:	b1 11       	cpse	r27, r1
    16dc:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_szero>
    16e0:	08 95       	ret

000016e2 <__fixunssfsi>:
    16e2:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_splitA>
    16e6:	88 f0       	brcs	.+34     	; 0x170a <__fixunssfsi+0x28>
    16e8:	9f 57       	subi	r25, 0x7F	; 127
    16ea:	98 f0       	brcs	.+38     	; 0x1712 <__fixunssfsi+0x30>
    16ec:	b9 2f       	mov	r27, r25
    16ee:	99 27       	eor	r25, r25
    16f0:	b7 51       	subi	r27, 0x17	; 23
    16f2:	b0 f0       	brcs	.+44     	; 0x1720 <__fixunssfsi+0x3e>
    16f4:	e1 f0       	breq	.+56     	; 0x172e <__fixunssfsi+0x4c>
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	1a f0       	brmi	.+6      	; 0x1706 <__fixunssfsi+0x24>
    1700:	ba 95       	dec	r27
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__fixunssfsi+0x14>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <__fixunssfsi+0x4c>
    1706:	b1 30       	cpi	r27, 0x01	; 1
    1708:	91 f0       	breq	.+36     	; 0x172e <__fixunssfsi+0x4c>
    170a:	0e 94 27 0c 	call	0x184e	; 0x184e <__fp_zero>
    170e:	b1 e0       	ldi	r27, 0x01	; 1
    1710:	08 95       	ret
    1712:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_zero>
    1716:	67 2f       	mov	r22, r23
    1718:	78 2f       	mov	r23, r24
    171a:	88 27       	eor	r24, r24
    171c:	b8 5f       	subi	r27, 0xF8	; 248
    171e:	39 f0       	breq	.+14     	; 0x172e <__fixunssfsi+0x4c>
    1720:	b9 3f       	cpi	r27, 0xF9	; 249
    1722:	cc f3       	brlt	.-14     	; 0x1716 <__fixunssfsi+0x34>
    1724:	86 95       	lsr	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b3 95       	inc	r27
    172c:	d9 f7       	brne	.-10     	; 0x1724 <__fixunssfsi+0x42>
    172e:	3e f4       	brtc	.+14     	; 0x173e <__fixunssfsi+0x5c>
    1730:	90 95       	com	r25
    1732:	80 95       	com	r24
    1734:	70 95       	com	r23
    1736:	61 95       	neg	r22
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	8f 4f       	sbci	r24, 0xFF	; 255
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	08 95       	ret

00001740 <__floatunsisf>:
    1740:	e8 94       	clt
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <__floatsisf+0x12>

00001744 <__floatsisf>:
    1744:	97 fb       	bst	r25, 7
    1746:	3e f4       	brtc	.+14     	; 0x1756 <__floatsisf+0x12>
    1748:	90 95       	com	r25
    174a:	80 95       	com	r24
    174c:	70 95       	com	r23
    174e:	61 95       	neg	r22
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	99 23       	and	r25, r25
    1758:	a9 f0       	breq	.+42     	; 0x1784 <__floatsisf+0x40>
    175a:	f9 2f       	mov	r31, r25
    175c:	96 e9       	ldi	r25, 0x96	; 150
    175e:	bb 27       	eor	r27, r27
    1760:	93 95       	inc	r25
    1762:	f6 95       	lsr	r31
    1764:	87 95       	ror	r24
    1766:	77 95       	ror	r23
    1768:	67 95       	ror	r22
    176a:	b7 95       	ror	r27
    176c:	f1 11       	cpse	r31, r1
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <__floatsisf+0x1c>
    1770:	fa f4       	brpl	.+62     	; 0x17b0 <__floatsisf+0x6c>
    1772:	bb 0f       	add	r27, r27
    1774:	11 f4       	brne	.+4      	; 0x177a <__floatsisf+0x36>
    1776:	60 ff       	sbrs	r22, 0
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <__floatsisf+0x6c>
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	16 c0       	rjmp	.+44     	; 0x17b0 <__floatsisf+0x6c>
    1784:	88 23       	and	r24, r24
    1786:	11 f0       	breq	.+4      	; 0x178c <__floatsisf+0x48>
    1788:	96 e9       	ldi	r25, 0x96	; 150
    178a:	11 c0       	rjmp	.+34     	; 0x17ae <__floatsisf+0x6a>
    178c:	77 23       	and	r23, r23
    178e:	21 f0       	breq	.+8      	; 0x1798 <__floatsisf+0x54>
    1790:	9e e8       	ldi	r25, 0x8E	; 142
    1792:	87 2f       	mov	r24, r23
    1794:	76 2f       	mov	r23, r22
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__floatsisf+0x5e>
    1798:	66 23       	and	r22, r22
    179a:	71 f0       	breq	.+28     	; 0x17b8 <__floatsisf+0x74>
    179c:	96 e8       	ldi	r25, 0x86	; 134
    179e:	86 2f       	mov	r24, r22
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	2a f0       	brmi	.+10     	; 0x17b0 <__floatsisf+0x6c>
    17a6:	9a 95       	dec	r25
    17a8:	66 0f       	add	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	da f7       	brpl	.-10     	; 0x17a6 <__floatsisf+0x62>
    17b0:	88 0f       	add	r24, r24
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <__fp_inf>:
    17ba:	97 f9       	bld	r25, 7
    17bc:	9f 67       	ori	r25, 0x7F	; 127
    17be:	80 e8       	ldi	r24, 0x80	; 128
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	08 95       	ret

000017c6 <__fp_nan>:
    17c6:	9f ef       	ldi	r25, 0xFF	; 255
    17c8:	80 ec       	ldi	r24, 0xC0	; 192
    17ca:	08 95       	ret

000017cc <__fp_pscA>:
    17cc:	00 24       	eor	r0, r0
    17ce:	0a 94       	dec	r0
    17d0:	16 16       	cp	r1, r22
    17d2:	17 06       	cpc	r1, r23
    17d4:	18 06       	cpc	r1, r24
    17d6:	09 06       	cpc	r0, r25
    17d8:	08 95       	ret

000017da <__fp_pscB>:
    17da:	00 24       	eor	r0, r0
    17dc:	0a 94       	dec	r0
    17de:	12 16       	cp	r1, r18
    17e0:	13 06       	cpc	r1, r19
    17e2:	14 06       	cpc	r1, r20
    17e4:	05 06       	cpc	r0, r21
    17e6:	08 95       	ret

000017e8 <__fp_round>:
    17e8:	09 2e       	mov	r0, r25
    17ea:	03 94       	inc	r0
    17ec:	00 0c       	add	r0, r0
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <__fp_round+0xc>
    17f0:	88 23       	and	r24, r24
    17f2:	52 f0       	brmi	.+20     	; 0x1808 <__fp_round+0x20>
    17f4:	bb 0f       	add	r27, r27
    17f6:	40 f4       	brcc	.+16     	; 0x1808 <__fp_round+0x20>
    17f8:	bf 2b       	or	r27, r31
    17fa:	11 f4       	brne	.+4      	; 0x1800 <__fp_round+0x18>
    17fc:	60 ff       	sbrs	r22, 0
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <__fp_round+0x20>
    1800:	6f 5f       	subi	r22, 0xFF	; 255
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	08 95       	ret

0000180a <__fp_split3>:
    180a:	57 fd       	sbrc	r21, 7
    180c:	90 58       	subi	r25, 0x80	; 128
    180e:	44 0f       	add	r20, r20
    1810:	55 1f       	adc	r21, r21
    1812:	59 f0       	breq	.+22     	; 0x182a <__fp_splitA+0x10>
    1814:	5f 3f       	cpi	r21, 0xFF	; 255
    1816:	71 f0       	breq	.+28     	; 0x1834 <__fp_splitA+0x1a>
    1818:	47 95       	ror	r20

0000181a <__fp_splitA>:
    181a:	88 0f       	add	r24, r24
    181c:	97 fb       	bst	r25, 7
    181e:	99 1f       	adc	r25, r25
    1820:	61 f0       	breq	.+24     	; 0x183a <__fp_splitA+0x20>
    1822:	9f 3f       	cpi	r25, 0xFF	; 255
    1824:	79 f0       	breq	.+30     	; 0x1844 <__fp_splitA+0x2a>
    1826:	87 95       	ror	r24
    1828:	08 95       	ret
    182a:	12 16       	cp	r1, r18
    182c:	13 06       	cpc	r1, r19
    182e:	14 06       	cpc	r1, r20
    1830:	55 1f       	adc	r21, r21
    1832:	f2 cf       	rjmp	.-28     	; 0x1818 <__fp_split3+0xe>
    1834:	46 95       	lsr	r20
    1836:	f1 df       	rcall	.-30     	; 0x181a <__fp_splitA>
    1838:	08 c0       	rjmp	.+16     	; 0x184a <__fp_splitA+0x30>
    183a:	16 16       	cp	r1, r22
    183c:	17 06       	cpc	r1, r23
    183e:	18 06       	cpc	r1, r24
    1840:	99 1f       	adc	r25, r25
    1842:	f1 cf       	rjmp	.-30     	; 0x1826 <__fp_splitA+0xc>
    1844:	86 95       	lsr	r24
    1846:	71 05       	cpc	r23, r1
    1848:	61 05       	cpc	r22, r1
    184a:	08 94       	sec
    184c:	08 95       	ret

0000184e <__fp_zero>:
    184e:	e8 94       	clt

00001850 <__fp_szero>:
    1850:	bb 27       	eor	r27, r27
    1852:	66 27       	eor	r22, r22
    1854:	77 27       	eor	r23, r23
    1856:	cb 01       	movw	r24, r22
    1858:	97 f9       	bld	r25, 7
    185a:	08 95       	ret

0000185c <__mulsf3>:
    185c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__mulsf3x>
    1860:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_round>
    1864:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscA>
    1868:	38 f0       	brcs	.+14     	; 0x1878 <__mulsf3+0x1c>
    186a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscB>
    186e:	20 f0       	brcs	.+8      	; 0x1878 <__mulsf3+0x1c>
    1870:	95 23       	and	r25, r21
    1872:	11 f0       	breq	.+4      	; 0x1878 <__mulsf3+0x1c>
    1874:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_inf>
    1878:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__fp_nan>
    187c:	11 24       	eor	r1, r1
    187e:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_szero>

00001882 <__mulsf3x>:
    1882:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_split3>
    1886:	70 f3       	brcs	.-36     	; 0x1864 <__mulsf3+0x8>

00001888 <__mulsf3_pse>:
    1888:	95 9f       	mul	r25, r21
    188a:	c1 f3       	breq	.-16     	; 0x187c <__mulsf3+0x20>
    188c:	95 0f       	add	r25, r21
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	55 1f       	adc	r21, r21
    1892:	62 9f       	mul	r22, r18
    1894:	f0 01       	movw	r30, r0
    1896:	72 9f       	mul	r23, r18
    1898:	bb 27       	eor	r27, r27
    189a:	f0 0d       	add	r31, r0
    189c:	b1 1d       	adc	r27, r1
    189e:	63 9f       	mul	r22, r19
    18a0:	aa 27       	eor	r26, r26
    18a2:	f0 0d       	add	r31, r0
    18a4:	b1 1d       	adc	r27, r1
    18a6:	aa 1f       	adc	r26, r26
    18a8:	64 9f       	mul	r22, r20
    18aa:	66 27       	eor	r22, r22
    18ac:	b0 0d       	add	r27, r0
    18ae:	a1 1d       	adc	r26, r1
    18b0:	66 1f       	adc	r22, r22
    18b2:	82 9f       	mul	r24, r18
    18b4:	22 27       	eor	r18, r18
    18b6:	b0 0d       	add	r27, r0
    18b8:	a1 1d       	adc	r26, r1
    18ba:	62 1f       	adc	r22, r18
    18bc:	73 9f       	mul	r23, r19
    18be:	b0 0d       	add	r27, r0
    18c0:	a1 1d       	adc	r26, r1
    18c2:	62 1f       	adc	r22, r18
    18c4:	83 9f       	mul	r24, r19
    18c6:	a0 0d       	add	r26, r0
    18c8:	61 1d       	adc	r22, r1
    18ca:	22 1f       	adc	r18, r18
    18cc:	74 9f       	mul	r23, r20
    18ce:	33 27       	eor	r19, r19
    18d0:	a0 0d       	add	r26, r0
    18d2:	61 1d       	adc	r22, r1
    18d4:	23 1f       	adc	r18, r19
    18d6:	84 9f       	mul	r24, r20
    18d8:	60 0d       	add	r22, r0
    18da:	21 1d       	adc	r18, r1
    18dc:	82 2f       	mov	r24, r18
    18de:	76 2f       	mov	r23, r22
    18e0:	6a 2f       	mov	r22, r26
    18e2:	11 24       	eor	r1, r1
    18e4:	9f 57       	subi	r25, 0x7F	; 127
    18e6:	50 40       	sbci	r21, 0x00	; 0
    18e8:	9a f0       	brmi	.+38     	; 0x1910 <__mulsf3_pse+0x88>
    18ea:	f1 f0       	breq	.+60     	; 0x1928 <__mulsf3_pse+0xa0>
    18ec:	88 23       	and	r24, r24
    18ee:	4a f0       	brmi	.+18     	; 0x1902 <__mulsf3_pse+0x7a>
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	bb 1f       	adc	r27, r27
    18f6:	66 1f       	adc	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	91 50       	subi	r25, 0x01	; 1
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	a9 f7       	brne	.-22     	; 0x18ec <__mulsf3_pse+0x64>
    1902:	9e 3f       	cpi	r25, 0xFE	; 254
    1904:	51 05       	cpc	r21, r1
    1906:	80 f0       	brcs	.+32     	; 0x1928 <__mulsf3_pse+0xa0>
    1908:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_inf>
    190c:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_szero>
    1910:	5f 3f       	cpi	r21, 0xFF	; 255
    1912:	e4 f3       	brlt	.-8      	; 0x190c <__mulsf3_pse+0x84>
    1914:	98 3e       	cpi	r25, 0xE8	; 232
    1916:	d4 f3       	brlt	.-12     	; 0x190c <__mulsf3_pse+0x84>
    1918:	86 95       	lsr	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	b7 95       	ror	r27
    1920:	f7 95       	ror	r31
    1922:	e7 95       	ror	r30
    1924:	9f 5f       	subi	r25, 0xFF	; 255
    1926:	c1 f7       	brne	.-16     	; 0x1918 <__mulsf3_pse+0x90>
    1928:	fe 2b       	or	r31, r30
    192a:	88 0f       	add	r24, r24
    192c:	91 1d       	adc	r25, r1
    192e:	96 95       	lsr	r25
    1930:	87 95       	ror	r24
    1932:	97 f9       	bld	r25, 7
    1934:	08 95       	ret

00001936 <__divmodhi4>:
    1936:	97 fb       	bst	r25, 7
    1938:	07 2e       	mov	r0, r23
    193a:	16 f4       	brtc	.+4      	; 0x1940 <__divmodhi4+0xa>
    193c:	00 94       	com	r0
    193e:	07 d0       	rcall	.+14     	; 0x194e <__divmodhi4_neg1>
    1940:	77 fd       	sbrc	r23, 7
    1942:	09 d0       	rcall	.+18     	; 0x1956 <__divmodhi4_neg2>
    1944:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__udivmodhi4>
    1948:	07 fc       	sbrc	r0, 7
    194a:	05 d0       	rcall	.+10     	; 0x1956 <__divmodhi4_neg2>
    194c:	3e f4       	brtc	.+14     	; 0x195c <__divmodhi4_exit>

0000194e <__divmodhi4_neg1>:
    194e:	90 95       	com	r25
    1950:	81 95       	neg	r24
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	08 95       	ret

00001956 <__divmodhi4_neg2>:
    1956:	70 95       	com	r23
    1958:	61 95       	neg	r22
    195a:	7f 4f       	sbci	r23, 0xFF	; 255

0000195c <__divmodhi4_exit>:
    195c:	08 95       	ret

0000195e <__tablejump2__>:
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	05 90       	lpm	r0, Z+
    1964:	f4 91       	lpm	r31, Z
    1966:	e0 2d       	mov	r30, r0
    1968:	09 94       	ijmp

0000196a <__umulhisi3>:
    196a:	a2 9f       	mul	r26, r18
    196c:	b0 01       	movw	r22, r0
    196e:	b3 9f       	mul	r27, r19
    1970:	c0 01       	movw	r24, r0
    1972:	a3 9f       	mul	r26, r19
    1974:	70 0d       	add	r23, r0
    1976:	81 1d       	adc	r24, r1
    1978:	11 24       	eor	r1, r1
    197a:	91 1d       	adc	r25, r1
    197c:	b2 9f       	mul	r27, r18
    197e:	70 0d       	add	r23, r0
    1980:	81 1d       	adc	r24, r1
    1982:	11 24       	eor	r1, r1
    1984:	91 1d       	adc	r25, r1
    1986:	08 95       	ret

00001988 <__udivmodhi4>:
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	51 e1       	ldi	r21, 0x11	; 17
    198e:	07 c0       	rjmp	.+14     	; 0x199e <__udivmodhi4_ep>

00001990 <__udivmodhi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	a6 17       	cp	r26, r22
    1996:	b7 07       	cpc	r27, r23
    1998:	10 f0       	brcs	.+4      	; 0x199e <__udivmodhi4_ep>
    199a:	a6 1b       	sub	r26, r22
    199c:	b7 0b       	sbc	r27, r23

0000199e <__udivmodhi4_ep>:
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	5a 95       	dec	r21
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__udivmodhi4_loop>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	08 95       	ret

000019b0 <do_rand>:
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
    19c6:	68 81       	ld	r22, Y
    19c8:	79 81       	ldd	r23, Y+1	; 0x01
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	81 05       	cpc	r24, r1
    19d4:	91 05       	cpc	r25, r1
    19d6:	21 f4       	brne	.+8      	; 0x19e0 <do_rand+0x30>
    19d8:	64 e2       	ldi	r22, 0x24	; 36
    19da:	79 ed       	ldi	r23, 0xD9	; 217
    19dc:	8b e5       	ldi	r24, 0x5B	; 91
    19de:	97 e0       	ldi	r25, 0x07	; 7
    19e0:	2d e1       	ldi	r18, 0x1D	; 29
    19e2:	33 ef       	ldi	r19, 0xF3	; 243
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__divmodsi4>
    19ec:	49 01       	movw	r8, r18
    19ee:	5a 01       	movw	r10, r20
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	a7 ea       	ldi	r26, 0xA7	; 167
    19f6:	b1 e4       	ldi	r27, 0x41	; 65
    19f8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    19fc:	6b 01       	movw	r12, r22
    19fe:	7c 01       	movw	r14, r24
    1a00:	ac ee       	ldi	r26, 0xEC	; 236
    1a02:	b4 ef       	ldi	r27, 0xF4	; 244
    1a04:	a5 01       	movw	r20, r10
    1a06:	94 01       	movw	r18, r8
    1a08:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulohisi3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8c 0d       	add	r24, r12
    1a12:	9d 1d       	adc	r25, r13
    1a14:	ae 1d       	adc	r26, r14
    1a16:	bf 1d       	adc	r27, r15
    1a18:	b7 ff       	sbrs	r27, 7
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <do_rand+0x72>
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	a1 09       	sbc	r26, r1
    1a20:	b0 48       	sbci	r27, 0x80	; 128
    1a22:	88 83       	st	Y, r24
    1a24:	99 83       	std	Y+1, r25	; 0x01
    1a26:	aa 83       	std	Y+2, r26	; 0x02
    1a28:	bb 83       	std	Y+3, r27	; 0x03
    1a2a:	9f 77       	andi	r25, 0x7F	; 127
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	08 95       	ret

00001a42 <rand_r>:
    1a42:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a46:	08 95       	ret

00001a48 <rand>:
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a50:	08 95       	ret

00001a52 <srand>:
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1a5a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1a5e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1a62:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1a66:	08 95       	ret

00001a68 <eeprom_read_byte>:
    1a68:	f9 99       	sbic	0x1f, 1	; 31
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <eeprom_read_byte>
    1a6c:	92 bd       	out	0x22, r25	; 34
    1a6e:	81 bd       	out	0x21, r24	; 33
    1a70:	f8 9a       	sbi	0x1f, 0	; 31
    1a72:	99 27       	eor	r25, r25
    1a74:	80 b5       	in	r24, 0x20	; 32
    1a76:	08 95       	ret

00001a78 <eeprom_write_byte>:
    1a78:	26 2f       	mov	r18, r22

00001a7a <eeprom_write_r18>:
    1a7a:	f9 99       	sbic	0x1f, 1	; 31
    1a7c:	fe cf       	rjmp	.-4      	; 0x1a7a <eeprom_write_r18>
    1a7e:	1f ba       	out	0x1f, r1	; 31
    1a80:	92 bd       	out	0x22, r25	; 34
    1a82:	81 bd       	out	0x21, r24	; 33
    1a84:	20 bd       	out	0x20, r18	; 32
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	fa 9a       	sbi	0x1f, 2	; 31
    1a8c:	f9 9a       	sbi	0x1f, 1	; 31
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	08 95       	ret

00001a94 <__divmodsi4>:
    1a94:	05 2e       	mov	r0, r21
    1a96:	97 fb       	bst	r25, 7
    1a98:	1e f4       	brtc	.+6      	; 0x1aa0 <__divmodsi4+0xc>
    1a9a:	00 94       	com	r0
    1a9c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__negsi2>
    1aa0:	57 fd       	sbrc	r21, 7
    1aa2:	07 d0       	rcall	.+14     	; 0x1ab2 <__divmodsi4_neg2>
    1aa4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__udivmodsi4>
    1aa8:	07 fc       	sbrc	r0, 7
    1aaa:	03 d0       	rcall	.+6      	; 0x1ab2 <__divmodsi4_neg2>
    1aac:	4e f4       	brtc	.+18     	; 0x1ac0 <__divmodsi4_exit>
    1aae:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__negsi2>

00001ab2 <__divmodsi4_neg2>:
    1ab2:	50 95       	com	r21
    1ab4:	40 95       	com	r20
    1ab6:	30 95       	com	r19
    1ab8:	21 95       	neg	r18
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	4f 4f       	sbci	r20, 0xFF	; 255
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac0 <__divmodsi4_exit>:
    1ac0:	08 95       	ret

00001ac2 <__negsi2>:
    1ac2:	90 95       	com	r25
    1ac4:	80 95       	com	r24
    1ac6:	70 95       	com	r23
    1ac8:	61 95       	neg	r22
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	08 95       	ret

00001ad2 <__muluhisi3>:
    1ad2:	0e 94 b5 0c 	call	0x196a	; 0x196a <__umulhisi3>
    1ad6:	a5 9f       	mul	r26, r21
    1ad8:	90 0d       	add	r25, r0
    1ada:	b4 9f       	mul	r27, r20
    1adc:	90 0d       	add	r25, r0
    1ade:	a4 9f       	mul	r26, r20
    1ae0:	80 0d       	add	r24, r0
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	08 95       	ret

00001ae8 <__mulshisi3>:
    1ae8:	b7 ff       	sbrs	r27, 7
    1aea:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__muluhisi3>

00001aee <__mulohisi3>:
    1aee:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    1af2:	82 1b       	sub	r24, r18
    1af4:	93 0b       	sbc	r25, r19
    1af6:	08 95       	ret

00001af8 <__udivmodsi4>:
    1af8:	a1 e2       	ldi	r26, 0x21	; 33
    1afa:	1a 2e       	mov	r1, r26
    1afc:	aa 1b       	sub	r26, r26
    1afe:	bb 1b       	sub	r27, r27
    1b00:	fd 01       	movw	r30, r26
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <__udivmodsi4_ep>

00001b04 <__udivmodsi4_loop>:
    1b04:	aa 1f       	adc	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	ee 1f       	adc	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	a2 17       	cp	r26, r18
    1b0e:	b3 07       	cpc	r27, r19
    1b10:	e4 07       	cpc	r30, r20
    1b12:	f5 07       	cpc	r31, r21
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <__udivmodsi4_ep>
    1b16:	a2 1b       	sub	r26, r18
    1b18:	b3 0b       	sbc	r27, r19
    1b1a:	e4 0b       	sbc	r30, r20
    1b1c:	f5 0b       	sbc	r31, r21

00001b1e <__udivmodsi4_ep>:
    1b1e:	66 1f       	adc	r22, r22
    1b20:	77 1f       	adc	r23, r23
    1b22:	88 1f       	adc	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	1a 94       	dec	r1
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <__udivmodsi4_loop>
    1b2a:	60 95       	com	r22
    1b2c:	70 95       	com	r23
    1b2e:	80 95       	com	r24
    1b30:	90 95       	com	r25
    1b32:	9b 01       	movw	r18, r22
    1b34:	ac 01       	movw	r20, r24
    1b36:	bd 01       	movw	r22, r26
    1b38:	cf 01       	movw	r24, r30
    1b3a:	08 95       	ret

00001b3c <_exit>:
    1b3c:	f8 94       	cli

00001b3e <__stop_program>:
    1b3e:	ff cf       	rjmp	.-2      	; 0x1b3e <__stop_program>
