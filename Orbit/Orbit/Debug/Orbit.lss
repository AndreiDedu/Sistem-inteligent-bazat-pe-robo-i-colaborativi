
Orbit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000017fa  0000188e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  0080010a  0080010a  00001898  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001908  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ed  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc2  00000000  00000000  00003c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144e  00000000  00000000  00004a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00005eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001139  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007d85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	99 04       	cpc	r9, r9
      6a:	ed 04       	cpc	r14, r13
      6c:	03 05       	cpc	r16, r3
      6e:	3c 05       	cpc	r19, r12
      70:	43 05       	cpc	r20, r3
      72:	20 05       	cpc	r18, r0
      74:	46 05       	cpc	r20, r6
      76:	b3 06       	cpc	r11, r19
      78:	b7 07       	cpc	r27, r23
      7a:	b7 07       	cpc	r27, r23
      7c:	bc 06       	cpc	r11, r28
      7e:	bf 06       	cpc	r11, r31
      80:	c2 06       	cpc	r12, r18
      82:	c6 06       	cpc	r12, r22
      84:	ca 06       	cpc	r12, r26
      86:	ce 06       	cpc	r12, r30
      88:	8b 07       	cpc	r24, r27
      8a:	e2 06       	cpc	r14, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
    seed ^= accumulator++>>2;
    return seed;
}

void rand_seed(uint8_t s) {
    seed = s;
      98:	14 be       	out	0x34, r1	; 52
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea ef       	ldi	r30, 0xFA	; 250
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 39       	cpi	r26, 0x90	; 144
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ba 08 	call	0x1174	; 0x1174 <main>
      da:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
      e2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
      e4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
      e6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
      e8:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <tx_mask>
    or tmpreg1, ddrreg
      ec:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
      ee:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
      f0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
      f2:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_mask>
      f6:	20 30       	cpi	r18, 0x00	; 0
      f8:	29 f0       	breq	.+10     	; 0x104 <message_send+0x22>
      fa:	00 00       	nop
      fc:	25 b1       	in	r18, 0x05	; 5
      fe:	23 2b       	or	r18, r19
     100:	25 b9       	out	0x05, r18	; 5
     102:	04 c0       	rjmp	.+8      	; 0x10c <message_send+0x2a>
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 c0       	rjmp	.+0      	; 0x10c <message_send+0x2a>
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	30 95       	com	r19
     114:	25 b1       	in	r18, 0x05	; 5
     116:	23 23       	and	r18, r19
     118:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     11a:	2e ea       	ldi	r18, 0xAE	; 174
     11c:	2a 95       	dec	r18
     11e:	f1 f7       	brne	.-4      	; 0x11c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     120:	2b ee       	ldi	r18, 0xEB	; 235

00000122 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     122:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     124:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     126:	0a c0       	rjmp	.+20     	; 0x13c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     128:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     12a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_mask>
    com tmpreg2
     12e:	30 95       	com	r19
    in tmpreg1, IR_PORT
     130:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     132:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     134:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     136:	0f be       	out	0x3f, r0	; 63
    return 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret

0000013c <nocollision>:
nocollision:
    nop
     13c:	00 00       	nop
    dec tmpreg1
     13e:	2a 95       	dec	r18
    brne checkcollision
     140:	81 f7       	brne	.-32     	; 0x122 <checkcollision>

    ldi tmpreg1, 0x01
     142:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     144:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_mask>
     148:	20 30       	cpi	r18, 0x00	; 0
     14a:	29 f0       	breq	.+10     	; 0x156 <nocollision+0x1a>
     14c:	00 00       	nop
     14e:	25 b1       	in	r18, 0x05	; 5
     150:	23 2b       	or	r18, r19
     152:	25 b9       	out	0x05, r18	; 5
     154:	04 c0       	rjmp	.+8      	; 0x15e <nocollision+0x22>
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 c0       	rjmp	.+0      	; 0x15e <nocollision+0x22>
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 00       	nop
     164:	30 95       	com	r19
     166:	25 b1       	in	r18, 0x05	; 5
     168:	23 23       	and	r18, r19
     16a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
     16c:	00 00       	nop
     16e:	24 e5       	ldi	r18, 0x54	; 84
     170:	2a 95       	dec	r18
     172:	f1 f7       	brne	.-4      	; 0x170 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
     174:	fc 01       	movw	r30, r24
    ldi byteidx, 12
     176:	8c e0       	ldi	r24, 0x0C	; 12

00000178 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
     178:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
     17a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
     17c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
     17e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
     180:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
     182:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
     184:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
     186:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
     188:	50 e0       	ldi	r21, 0x00	; 0

0000018a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
     18a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
     18c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
     18e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
     190:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
     192:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_mask>
     196:	20 30       	cpi	r18, 0x00	; 0
     198:	29 f0       	breq	.+10     	; 0x1a4 <sendbit+0x1a>
     19a:	00 00       	nop
     19c:	25 b1       	in	r18, 0x05	; 5
     19e:	23 2b       	or	r18, r19
     1a0:	25 b9       	out	0x05, r18	; 5
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <sendbit+0x22>
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	00 00       	nop
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <sendbit+0x22>
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	00 00       	nop
     1b2:	30 95       	com	r19
     1b4:	25 b1       	in	r18, 0x05	; 5
     1b6:	23 23       	and	r18, r19
     1b8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
     1ba:	00 00       	nop
     1bc:	21 e5       	ldi	r18, 0x51	; 81
     1be:	2a 95       	dec	r18
     1c0:	f1 f7       	brne	.-4      	; 0x1be <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
     1c2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
     1c4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
     1c6:	9a 95       	dec	r25
    brne sendbit
     1c8:	01 f7       	brne	.-64     	; 0x18a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
     1ca:	8a 95       	dec	r24
    brne sendbyte
     1cc:	a9 f6       	brne	.-86     	; 0x178 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
     1ce:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
     1d0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
     1d2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     1d4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     1d6:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_mask>
    com tmpreg2
     1da:	30 95       	com	r19
    in tmpreg1, IR_PORT
     1dc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     1de:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     1e0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     1e2:	0f be       	out	0x3f, r0	; 63
    return 1
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret

000001e8 <message_rx_dummy>:
     1e8:	08 95       	ret

000001ea <message_tx_dummy>:
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <message_tx_success_dummy>:
     1f0:	08 95       	ret

000001f2 <kilo_init>:
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	f8 94       	cli
     202:	14 b8       	out	0x04, r1	; 4
     204:	17 b8       	out	0x07, r1	; 7
     206:	1a b8       	out	0x0a, r1	; 10
     208:	15 b8       	out	0x05, r1	; 5
     20a:	18 b8       	out	0x08, r1	; 8
     20c:	1b b8       	out	0x0b, r1	; 11
     20e:	52 9a       	sbi	0x0a, 2	; 10
     210:	5a 9a       	sbi	0x0b, 2	; 11
     212:	14 bc       	out	0x24, r1	; 36
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	85 bd       	out	0x25, r24	; 37
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	87 bd       	out	0x27, r24	; 39
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     222:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     226:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     22a:	2f e8       	ldi	r18, 0x8F	; 143
     22c:	3b e0       	ldi	r19, 0x0B	; 11
     22e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     232:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     23a:	53 98       	cbi	0x0a, 3	; 10
     23c:	23 98       	cbi	0x04, 3	; 4
     23e:	91 ea       	ldi	r25, 0xA1	; 161
     240:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     244:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     248:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     24c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     250:	8b e0       	ldi	r24, 0x0B	; 11
     252:	80 bf       	out	0x30, r24	; 48
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	83 e8       	ldi	r24, 0x83	; 131
     266:	80 83       	st	Z, r24
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	86 fd       	sbrc	r24, 6
     272:	fd cf       	rjmp	.-6      	; 0x26e <kilo_init+0x7c>
     274:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     278:	83 ea       	ldi	r24, 0xA3	; 163
     27a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     28c:	8f 3f       	cpi	r24, 0xFF	; 255
     28e:	11 f0       	breq	.+4      	; 0x294 <kilo_init+0xa2>
     290:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     294:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_leadingbit>
     29e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbyte>
     2a2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_byteindex>
     2a6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rx_bytevalue>
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     2b2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <tx_mask>
     2b6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tx_mask>
     2ba:	88 73       	andi	r24, 0x38	; 56
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <kilo_init+0xd2>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <tx_mask>
     2c4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <tx_clock+0x1>
     2c8:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <tx_clock>
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <tx_increment+0x1>
     2d4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_increment>
     2d8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <kilo_ticks>
     2dc:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <kilo_ticks+0x1>
     2e0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <kilo_ticks+0x2>
     2e4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <kilo_ticks+0x3>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     2ee:	82 e4       	ldi	r24, 0x42	; 66
     2f0:	9f e0       	ldi	r25, 0x0F	; 15
     2f2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_tx_period+0x1>
     2f6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_tx_period>
     2fa:	80 eb       	ldi	r24, 0xB0	; 176
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     302:	c8 2f       	mov	r28, r24
     304:	81 eb       	ldi	r24, 0xB1	; 177
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     30c:	2c 2f       	mov	r18, r28
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	38 2b       	or	r19, r24
     312:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <kilo_uid+0x1>
     316:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <kilo_uid>
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     322:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kilo_turn_left>
     326:	89 e0       	ldi	r24, 0x09	; 9
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     32e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <kilo_turn_right>
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     33a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <kilo_straight_left>
     33e:	84 e1       	ldi	r24, 0x14	; 20
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     346:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <kilo_straight_right>
     34a:	0f 2e       	mov	r0, r31
     34c:	fe e3       	ldi	r31, 0x3E	; 62
     34e:	ef 2e       	mov	r14, r31
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
     356:	07 e1       	ldi	r16, 0x17	; 23
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	c0 e2       	ldi	r28, 0x20	; 32
     35c:	d0 e0       	ldi	r29, 0x00	; 0
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     364:	d8 2e       	mov	r13, r24
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     36e:	2d 2d       	mov	r18, r13
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	32 2f       	mov	r19, r18
     374:	22 27       	eor	r18, r18
     376:	28 2b       	or	r18, r24
     378:	f7 01       	movw	r30, r14
     37a:	21 93       	st	Z+, r18
     37c:	31 93       	st	Z+, r19
     37e:	7f 01       	movw	r14, r30
     380:	ce 01       	movw	r24, r28
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     388:	d8 2e       	mov	r13, r24
     38a:	ce 01       	movw	r24, r28
     38c:	c1 96       	adiw	r24, 0x31	; 49
     38e:	0e 94 91 0b 	call	0x1722	; 0x1722 <eeprom_read_byte>
     392:	2d 2d       	mov	r18, r13
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	32 2f       	mov	r19, r18
     398:	22 27       	eor	r18, r18
     39a:	28 2b       	or	r18, r24
     39c:	f8 01       	movw	r30, r16
     39e:	21 93       	st	Z+, r18
     3a0:	31 93       	st	Z+, r19
     3a2:	8f 01       	movw	r16, r30
     3a4:	22 96       	adiw	r28, 0x02	; 2
     3a6:	cc 33       	cpi	r28, 0x3C	; 60
     3a8:	d1 05       	cpc	r29, r1
     3aa:	c9 f6       	brne	.-78     	; 0x35e <kilo_init+0x16c>
     3ac:	78 94       	sei
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	08 95       	ret

000003be <__vector_6>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	a8 95       	wdr
     3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d4:	88 61       	ori	r24, 0x18	; 24
     3d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <delay>:
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	41 f0       	breq	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f0:	ef ec       	ldi	r30, 0xCF	; 207
     3f2:	f7 e0       	ldi	r31, 0x07	; 7
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <delay+0x8>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <delay+0xe>
     3fa:	00 00       	nop
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	c1 f7       	brne	.-16     	; 0x3f0 <delay+0x4>
     400:	08 95       	ret

00000402 <set_motors>:
     402:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     406:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     40a:	08 95       	ret

0000040c <spinup_motors>:
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     412:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
     41e:	08 95       	ret

00000420 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     420:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rx_busy>
     424:	81 11       	cpse	r24, r1
     426:	14 c0       	rjmp	.+40     	; 0x450 <get_voltage+0x30>
        cli();                                    // disable interrupts
     428:	f8 94       	cli
        adc_setup_conversion(6);
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     430:	ea e7       	ldi	r30, 0x7A	; 122
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	83 e8       	ldi	r24, 0x83	; 131
     436:	80 83       	st	Z, r24
        adc_start_conversion();
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	80 83       	st	Z, r24
        adc_finish_conversion();
     43e:	80 81       	ld	r24, Z
     440:	86 fd       	sbrc	r24, 6
     442:	fd cf       	rjmp	.-6      	; 0x43e <get_voltage+0x1e>
        voltage = ADCW;                           // store AD result
     444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     44c:	78 94       	sei
     44e:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     454:	08 95       	ret

00000456 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     456:	3f 92       	push	r3
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <estimate_distance+0x24>
     47a:	00 d0       	rcall	.+0      	; 0x47c <estimate_distance+0x26>
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     484:	fc 01       	movw	r30, r24
     486:	02 80       	ldd	r0, Z+2	; 0x02
     488:	f3 81       	ldd	r31, Z+3	; 0x03
     48a:	e0 2d       	mov	r30, r0
     48c:	fc 83       	std	Y+4, r31	; 0x04
     48e:	eb 83       	std	Y+3, r30	; 0x03
     490:	e4 38       	cpi	r30, 0x84	; 132
     492:	23 e0       	ldi	r18, 0x03	; 3
     494:	f2 07       	cpc	r31, r18
     496:	0c f0       	brlt	.+2      	; 0x49a <estimate_distance+0x44>
     498:	82 c0       	rjmp	.+260    	; 0x59e <estimate_distance+0x148>
        if (dist->high_gain > kilo_irhigh[0]) {
     49a:	9f 01       	movw	r18, r30
     49c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_irhigh>
     4a0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <kilo_irhigh+0x1>
     4a4:	8e 17       	cp	r24, r30
     4a6:	9f 07       	cpc	r25, r31
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <estimate_distance+0x56>
     4aa:	7c c0       	rjmp	.+248    	; 0x5a4 <estimate_distance+0x14e>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     4ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_irhigh+0x2>
     4b0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <kilo_irhigh+0x3>
     4b4:	8e 17       	cp	r24, r30
     4b6:	9f 07       	cpc	r25, r31
     4b8:	68 f0       	brcs	.+26     	; 0x4d4 <estimate_distance+0x7e>
     4ba:	eb e1       	ldi	r30, 0x1B	; 27
     4bc:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     4be:	12 e0       	ldi	r17, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     4c0:	81 91       	ld	r24, Z+
     4c2:	91 91       	ld	r25, Z+
     4c4:	82 17       	cp	r24, r18
     4c6:	93 07       	cpc	r25, r19
     4c8:	30 f0       	brcs	.+12     	; 0x4d6 <estimate_distance+0x80>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	1e 30       	cpi	r17, 0x0E	; 14
     4ce:	c1 f7       	brne	.-16     	; 0x4c0 <estimate_distance+0x6a>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     4d0:	1d e0       	ldi	r17, 0x0D	; 13
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <estimate_distance+0x80>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     4d4:	11 e0       	ldi	r17, 0x01	; 1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     4d6:	81 2f       	mov	r24, r17
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	e9 5e       	subi	r30, 0xE9	; 233
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	60 80       	ld	r6, Z
     4e6:	71 80       	ldd	r7, Z+1	; 0x01
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	fc 01       	movw	r30, r24
     4ee:	eb 5e       	subi	r30, 0xEB	; 235
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	b3 01       	movw	r22, r6
     4f8:	68 1b       	sub	r22, r24
     4fa:	79 0b       	sbc	r23, r25
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     510:	4b 81       	ldd	r20, Y+3	; 0x03
     512:	5c 81       	ldd	r21, Y+4	; 0x04
     514:	ba 01       	movw	r22, r20
     516:	55 0f       	add	r21, r21
     518:	88 0b       	sbc	r24, r24
     51a:	99 0b       	sbc	r25, r25
     51c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__floatsisf>
     520:	4b 01       	movw	r8, r22
     522:	5c 01       	movw	r10, r24
     524:	b3 01       	movw	r22, r6
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     52e:	2b 01       	movw	r4, r22
     530:	3c 01       	movw	r6, r24
     532:	61 2f       	mov	r22, r17
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	5f e3       	ldi	r21, 0x3F	; 63
     546:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	a9 01       	movw	r20, r18
     550:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     554:	a7 01       	movw	r20, r14
     556:	96 01       	movw	r18, r12
     558:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	c3 01       	movw	r24, r6
     562:	b2 01       	movw	r22, r4
     564:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	c5 01       	movw	r24, r10
     56e:	b4 01       	movw	r22, r8
     570:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e2       	ldi	r20, 0x20	; 32
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     580:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixsfsi>
     584:	5b 01       	movw	r10, r22
     586:	c7 01       	movw	r24, r14
     588:	b6 01       	movw	r22, r12
     58a:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixsfsi>
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	c5 01       	movw	r24, r10
     594:	ba 01       	movw	r22, r20
     596:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__divmodhi4>
     59a:	36 2e       	mov	r3, r22
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <estimate_distance+0x150>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     59e:	33 24       	eor	r3, r3
     5a0:	3a 94       	dec	r3
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <estimate_distance+0x150>
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     5a4:	31 2c       	mov	r3, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	8d 3b       	cpi	r24, 0xBD	; 189
     5ac:	92 40       	sbci	r25, 0x02	; 2
     5ae:	0c f4       	brge	.+2      	; 0x5b2 <estimate_distance+0x15c>
     5b0:	de c0       	rjmp	.+444    	; 0x76e <estimate_distance+0x318>
        if (dist->low_gain > kilo_irlow[0]) {
     5b2:	e9 81       	ldd	r30, Y+1	; 0x01
     5b4:	fa 81       	ldd	r31, Y+2	; 0x02
     5b6:	a0 80       	ld	r10, Z
     5b8:	b1 80       	ldd	r11, Z+1	; 0x01
     5ba:	95 01       	movw	r18, r10
     5bc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <kilo_irlow>
     5c0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <kilo_irlow+0x1>
     5c4:	8a 15       	cp	r24, r10
     5c6:	9b 05       	cpc	r25, r11
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <estimate_distance+0x176>
     5ca:	d4 c0       	rjmp	.+424    	; 0x774 <estimate_distance+0x31e>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     5cc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <kilo_irlow+0x2>
     5d0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <kilo_irlow+0x3>
     5d4:	8a 15       	cp	r24, r10
     5d6:	9b 05       	cpc	r25, r11
     5d8:	80 f0       	brcs	.+32     	; 0x5fa <estimate_distance+0x1a4>
     5da:	e2 e4       	ldi	r30, 0x42	; 66
     5dc:	f1 e0       	ldi	r31, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     5de:	12 e0       	ldi	r17, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     5e0:	81 91       	ld	r24, Z+
     5e2:	91 91       	ld	r25, Z+
     5e4:	82 17       	cp	r24, r18
     5e6:	93 07       	cpc	r25, r19
     5e8:	28 f0       	brcs	.+10     	; 0x5f4 <estimate_distance+0x19e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     5ea:	1f 5f       	subi	r17, 0xFF	; 255
     5ec:	1e 30       	cpi	r17, 0x0E	; 14
     5ee:	c1 f7       	brne	.-16     	; 0x5e0 <estimate_distance+0x18a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     5f0:	1a e5       	ldi	r17, 0x5A	; 90
     5f2:	68 c0       	rjmp	.+208    	; 0x6c4 <estimate_distance+0x26e>
                    index_low = i;
                    break;
                }
            }

            if(index_low == 255) {
     5f4:	1f 3f       	cpi	r17, 0xFF	; 255
     5f6:	11 f4       	brne	.+4      	; 0x5fc <estimate_distance+0x1a6>
     5f8:	bf c0       	rjmp	.+382    	; 0x778 <estimate_distance+0x322>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     5fa:	11 e0       	ldi	r17, 0x01	; 1
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     5fc:	81 2f       	mov	r24, r17
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e2 5c       	subi	r30, 0xC2	; 194
     608:	fe 4f       	sbci	r31, 0xFE	; 254
     60a:	60 80       	ld	r6, Z
     60c:	71 80       	ldd	r7, Z+1	; 0x01
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	fc 01       	movw	r30, r24
     614:	e4 5c       	subi	r30, 0xC4	; 196
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	b3 01       	movw	r22, r6
     61e:	68 1b       	sub	r22, r24
     620:	79 0b       	sbc	r23, r25
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     636:	b5 01       	movw	r22, r10
     638:	bb 0c       	add	r11, r11
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__floatsisf>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	b3 01       	movw	r22, r6
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     650:	2b 01       	movw	r4, r22
     652:	3c 01       	movw	r6, r24
     654:	61 2f       	mov	r22, r17
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	a9 01       	movw	r20, r18
     672:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     676:	a7 01       	movw	r20, r14
     678:	96 01       	movw	r18, r12
     67a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c5 01       	movw	r24, r10
     690:	b4 01       	movw	r22, r8
     692:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     6a2:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixsfsi>
     6a6:	8b 01       	movw	r16, r22
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixsfsi>
     6b0:	ab 01       	movw	r20, r22
     6b2:	bc 01       	movw	r22, r24
     6b4:	c8 01       	movw	r24, r16
     6b6:	ba 01       	movw	r22, r20
     6b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__divmodhi4>
     6bc:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     6be:	6f 3f       	cpi	r22, 0xFF	; 255
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <estimate_distance+0x26e>
     6c2:	55 c0       	rjmp	.+170    	; 0x76e <estimate_distance+0x318>
        if (dist_high != 255) {
     6c4:	ff ef       	ldi	r31, 0xFF	; 255
     6c6:	3f 16       	cp	r3, r31
     6c8:	09 f4       	brne	.+2      	; 0x6cc <estimate_distance+0x276>
     6ca:	4e c0       	rjmp	.+156    	; 0x768 <estimate_distance+0x312>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     6cc:	2b 81       	ldd	r18, Y+3	; 0x03
     6ce:	3c 81       	ldd	r19, Y+4	; 0x04
     6d0:	b9 01       	movw	r22, r18
     6d2:	33 0f       	add	r19, r19
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__floatsisf>
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
     6e0:	63 2d       	mov	r22, r3
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	a7 01       	movw	r20, r14
     6f2:	96 01       	movw	r18, r12
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	81 e6       	ldi	r24, 0x61	; 97
     6fa:	94 e4       	ldi	r25, 0x44	; 68
     6fc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	61 2f       	mov	r22, r17
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatunsisf>
     71c:	2b 01       	movw	r4, r22
     71e:	3c 01       	movw	r6, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	4f e2       	ldi	r20, 0x2F	; 47
     726:	54 e4       	ldi	r21, 0x44	; 68
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__subsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c3 01       	movw	r24, r6
     736:	b2 01       	movw	r22, r4
     738:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c5 01       	movw	r24, r10
     742:	b4 01       	movw	r22, r8
     744:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	48 e4       	ldi	r20, 0x48	; 72
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	0e 94 55 09 	call	0x12aa	; 0x12aa <__divsf3>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	44 e0       	ldi	r20, 0x04	; 4
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__addsf3>
     760:	0e 94 ce 09 	call	0x139c	; 0x139c <__fixunssfsi>
     764:	86 2f       	mov	r24, r22
     766:	0a c0       	rjmp	.+20     	; 0x77c <estimate_distance+0x326>
        } else {
            return 33 + dist_low;
     768:	81 e2       	ldi	r24, 0x21	; 33
     76a:	81 0f       	add	r24, r17
     76c:	07 c0       	rjmp	.+14     	; 0x77c <estimate_distance+0x326>
        }
    } else {
        return 33 + dist_high;
     76e:	81 e2       	ldi	r24, 0x21	; 33
     770:	83 0d       	add	r24, r3
     772:	04 c0       	rjmp	.+8      	; 0x77c <estimate_distance+0x326>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	a6 cf       	rjmp	.-180    	; 0x6c4 <estimate_distance+0x26e>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     778:	1a e5       	ldi	r17, 0x5A	; 90
     77a:	a4 cf       	rjmp	.-184    	; 0x6c4 <estimate_distance+0x26e>
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	6f 90       	pop	r6
     7a0:	5f 90       	pop	r5
     7a2:	4f 90       	pop	r4
     7a4:	3f 90       	pop	r3
     7a6:	08 95       	ret

000007a8 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
    tx_clock += tx_increment;
     7ca:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <tx_clock>
     7ce:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <tx_clock+0x1>
     7d2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <tx_increment>
     7d6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <tx_increment+0x1>
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <tx_clock+0x1>
     7e2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tx_clock>
    tx_increment = 0xFF;
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <tx_increment+0x1>
     7ee:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_increment>
    OCR0A = tx_increment;
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     7f6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <kilo_ticks>
     7fa:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <kilo_ticks+0x1>
     7fe:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <kilo_ticks+0x2>
     802:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <kilo_ticks+0x3>
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	a1 1d       	adc	r26, r1
     80a:	b1 1d       	adc	r27, r1
     80c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <kilo_ticks>
     810:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <kilo_ticks+0x1>
     814:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <kilo_ticks+0x2>
     818:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     81c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rx_busy>
     820:	81 11       	cpse	r24, r1
     822:	2d c0       	rjmp	.+90     	; 0x87e <__vector_14+0xd6>
     824:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <kilo_tx_period>
     828:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_tx_period+0x1>
     82c:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <tx_clock>
     830:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <tx_clock+0x1>
     834:	82 17       	cp	r24, r18
     836:	93 07       	cpc	r25, r19
     838:	10 f5       	brcc	.+68     	; 0x87e <__vector_14+0xd6>
     83a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	f1 f4       	brne	.+60     	; 0x87e <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     842:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_tx>
     846:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_tx+0x1>
     84a:	09 95       	icall
        if (msg) {
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	b9 f0       	breq	.+46     	; 0x87e <__vector_14+0xd6>
            if (message_send(msg)) {
     850:	0e 94 71 00 	call	0xe2	; 0xe2 <message_send>
     854:	88 23       	and	r24, r24
     856:	51 f0       	breq	.+20     	; 0x86c <__vector_14+0xc4>
                kilo_message_tx_success();
     858:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx_success>
     85c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx_success+0x1>
     860:	09 95       	icall
                tx_clock = 0;
     862:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <tx_clock+0x1>
     866:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <tx_clock>
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     86c:	0e 94 81 0b 	call	0x1702	; 0x1702 <rand>
     870:	9c 01       	movw	r18, r24
     872:	33 27       	eor	r19, r19
     874:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <tx_increment+0x1>
     878:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <tx_increment>
                OCR0A = tx_increment;
     87c:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8a0:	80 ff       	sbrs	r24, 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <set_color+0x8>
        DDRD |= (1<<5);
     8a4:	55 9a       	sbi	0x0a, 5	; 10
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     8a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     8aa:	81 ff       	sbrs	r24, 1
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <set_color+0x12>
        DDRD |= (1<<4);
     8ae:	54 9a       	sbi	0x0a, 4	; 10
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     8b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     8b4:	82 ff       	sbrs	r24, 2
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <set_color+0x1c>
        DDRC |= (1<<3);
     8b8:	3b 9a       	sbi	0x07, 3	; 7
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     8bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     8be:	83 ff       	sbrs	r24, 3
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <set_color+0x26>
        DDRC |= (1<<2);
     8c2:	3a 9a       	sbi	0x07, 2	; 7
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     8c6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     8c8:	84 ff       	sbrs	r24, 4
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <set_color+0x30>
        DDRC |= (1<<5);
     8cc:	3d 9a       	sbi	0x07, 5	; 7
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     8d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     8d2:	85 ff       	sbrs	r24, 5
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <set_color+0x3a>
        DDRC |= (1<<4);
     8d6:	3c 9a       	sbi	0x07, 4	; 7
     8d8:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     8da:	3c 98       	cbi	0x07, 4	; 7
     8dc:	08 95       	ret

000008de <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     8de:	4c 01       	movw	r8, r24
     8e0:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     8e2:	71 2c       	mov	r7, r1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e4:	0f 2e       	mov	r0, r31
     8e6:	f3 eb       	ldi	r31, 0xB3	; 179
     8e8:	af 2e       	mov	r10, r31
     8ea:	b1 2c       	mov	r11, r1
     8ec:	f0 2d       	mov	r31, r0
    OCR2B = cw;
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f4 eb       	ldi	r31, 0xB4	; 180
     8f2:	cf 2e       	mov	r12, r31
     8f4:	d1 2c       	mov	r13, r1
     8f6:	f0 2d       	mov	r31, r0
     8f8:	66 24       	eor	r6, r6
     8fa:	6a 94       	dec	r6
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     8fc:	68 94       	set
     8fe:	33 24       	eor	r3, r3
     900:	32 f8       	bld	r3, 2
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
     902:	22 24       	eor	r2, r2
     904:	23 94       	inc	r2
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
     906:	ca e7       	ldi	r28, 0x7A	; 122
     908:	d0 e0       	ldi	r29, 0x00	; 0
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     90a:	0f 2e       	mov	r0, r31
     90c:	f8 e1       	ldi	r31, 0x18	; 24
     90e:	4f 2e       	mov	r4, r31
     910:	f0 2d       	mov	r31, r0
     912:	0f 2e       	mov	r0, r31
     914:	f9 e2       	ldi	r31, 0x29	; 41
     916:	5f 2e       	mov	r5, r31
     918:	f0 2d       	mov	r31, r0
                ports_off();
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     91a:	00 e6       	ldi	r16, 0x60	; 96
     91c:	10 e0       	ldi	r17, 0x00	; 0

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     91e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <kilo_state>
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e7 30       	cpi	r30, 0x07	; 7
     926:	f1 05       	cpc	r31, r1
     928:	d0 f7       	brcc	.-12     	; 0x91e <__stack+0x1f>
     92a:	ec 5c       	subi	r30, 0xCC	; 204
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__tablejump2__>
            case SLEEPING:
                cli();
     932:	f8 94       	cli
                acomp_off();
     934:	80 b7       	in	r24, 0x30	; 48
     936:	87 7f       	andi	r24, 0xF7	; 247
     938:	80 bf       	out	0x30, r24	; 48
                adc_off();
     93a:	88 81       	ld	r24, Y
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	88 83       	st	Y, r24
                ports_off();
     940:	14 b8       	out	0x04, r1	; 4
     942:	17 b8       	out	0x07, r1	; 7
     944:	1a b8       	out	0x0a, r1	; 10
     946:	15 b8       	out	0x05, r1	; 5
     948:	18 b8       	out	0x08, r1	; 8
     94a:	1b b8       	out	0x0b, r1	; 11
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	a8 95       	wdr
     952:	40 92 60 00 	sts	0x0060, r4	; 0x800060 <__DATA_REGION_ORIGIN__>
     956:	0f be       	out	0x3f, r0	; 63
     958:	50 92 60 00 	sts	0x0060, r5	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     95c:	f8 01       	movw	r30, r16
     95e:	80 81       	ld	r24, Z
     960:	80 64       	ori	r24, 0x40	; 64
     962:	80 83       	st	Z, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     964:	83 b7       	in	r24, 0x33	; 51
     966:	81 7f       	andi	r24, 0xF1	; 241
     968:	84 60       	ori	r24, 0x04	; 4
     96a:	83 bf       	out	0x33, r24	; 51
                cli();
     96c:	f8 94       	cli
                sleep_enable();
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	81 60       	ori	r24, 0x01	; 1
     972:	83 bf       	out	0x33, r24	; 51
                sei();
     974:	78 94       	sei
                sleep_cpu();
     976:	88 95       	sleep
                sleep_disable();
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	8e 7f       	andi	r24, 0xFE	; 254
     97c:	83 bf       	out	0x33, r24	; 51
                sei();
     97e:	78 94       	sei
                rx_busy = 0;
     980:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>
                ports_on();
     984:	52 9a       	sbi	0x0a, 2	; 10
     986:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     988:	88 81       	ld	r24, Y
     98a:	80 68       	ori	r24, 0x80	; 128
     98c:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98e:	87 e5       	ldi	r24, 0x57	; 87
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x99>
     998:	00 00       	nop
                _delay_us(300);
                acomp_on();
     99a:	80 b7       	in	r24, 0x30	; 48
     99c:	88 61       	ori	r24, 0x18	; 24
     99e:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9a0:	8f e3       	ldi	r24, 0x3F	; 63
     9a2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a6:	ef e1       	ldi	r30, 0x1F	; 31
     9a8:	fe e4       	ldi	r31, 0x4E	; 78
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <__stack+0xab>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <__stack+0xb1>
     9b0:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9b2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rx_busy>
     9b6:	88 23       	and	r24, r24
     9b8:	61 f0       	breq	.+24     	; 0x9d2 <__stack+0xd3>
                    set_color(RGB(3,0,0));
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9c0:	ff ef       	ldi	r31, 0xFF	; 255
     9c2:	20 e7       	ldi	r18, 0x70	; 112
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	f1 50       	subi	r31, 0x01	; 1
     9c8:	20 40       	sbci	r18, 0x00	; 0
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__stack+0xc7>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <__stack+0xd1>
     9d0:	00 00       	nop
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
                break;
     9d8:	a2 cf       	rjmp	.-188    	; 0x91e <__stack+0x1f>
            case IDLE:
                set_color(RGB(0,3,0));
     9da:	8c e0       	ldi	r24, 0x0C	; 12
     9dc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9e0:	ef ec       	ldi	r30, 0xCF	; 207
     9e2:	f7 e0       	ldi	r31, 0x07	; 7
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <__stack+0xe5>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <__stack+0xeb>
     9ea:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     9f2:	ff ef       	ldi	r31, 0xFF	; 255
     9f4:	21 ee       	ldi	r18, 0xE1	; 225
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	f1 50       	subi	r31, 0x01	; 1
     9fa:	20 40       	sbci	r18, 0x00	; 0
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <__stack+0xf9>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <__stack+0x103>
     a02:	00 00       	nop
     a04:	8c cf       	rjmp	.-232    	; 0x91e <__stack+0x1f>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a06:	0e 94 10 02 	call	0x420	; 0x420 <get_voltage>
                if(voltage > 682)
     a0a:	8b 3a       	cpi	r24, 0xAB	; 171
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	9e 07       	cpc	r25, r30
     a10:	24 f0       	brlt	.+8      	; 0xa1a <__stack+0x11b>
                    set_color(RGB(0,3,0));
     a12:	8c e0       	ldi	r24, 0x0C	; 12
     a14:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a18:	82 cf       	rjmp	.-252    	; 0x91e <__stack+0x1f>
                else if(voltage > 648)
     a1a:	89 38       	cpi	r24, 0x89	; 137
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	9f 07       	cpc	r25, r31
     a20:	24 f0       	brlt	.+8      	; 0xa2a <__stack+0x12b>
                    set_color(RGB(0,0,3));
     a22:	80 e3       	ldi	r24, 0x30	; 48
     a24:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a28:	7a cf       	rjmp	.-268    	; 0x91e <__stack+0x1f>
                else if(voltage > 614)
     a2a:	87 36       	cpi	r24, 0x67	; 103
     a2c:	92 40       	sbci	r25, 0x02	; 2
     a2e:	24 f0       	brlt	.+8      	; 0xa38 <__stack+0x139>
                    set_color(RGB(3,3,0));
     a30:	8f e0       	ldi	r24, 0x0F	; 15
     a32:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a36:	73 cf       	rjmp	.-282    	; 0x91e <__stack+0x1f>
                else
                    set_color(RGB(3,0,0));
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a3e:	6f cf       	rjmp	.-290    	; 0x91e <__stack+0x1f>
                break;
            case CHARGING:
                if (is_charging()) {
     a40:	48 99       	sbic	0x09, 0	; 9
     a42:	16 c0       	rjmp	.+44     	; 0xa70 <__stack+0x171>
                    set_color(RGB(1,0,0));
     a44:	82 2d       	mov	r24, r2
     a46:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a4a:	8f ec       	ldi	r24, 0xCF	; 207
     a4c:	97 e0       	ldi	r25, 0x07	; 7
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <__stack+0x14f>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <__stack+0x155>
     a54:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a5c:	9f ef       	ldi	r25, 0xFF	; 255
     a5e:	e1 ee       	ldi	r30, 0xE1	; 225
     a60:	f4 e0       	ldi	r31, 0x04	; 4
     a62:	91 50       	subi	r25, 0x01	; 1
     a64:	e0 40       	sbci	r30, 0x00	; 0
     a66:	f0 40       	sbci	r31, 0x00	; 0
     a68:	e1 f7       	brne	.-8      	; 0xa62 <__stack+0x163>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <__stack+0x16d>
     a6c:	00 00       	nop
     a6e:	57 cf       	rjmp	.-338    	; 0x91e <__stack+0x1f>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
     a76:	53 cf       	rjmp	.-346    	; 0x91e <__stack+0x1f>
                break;
            case SETUP:
                if (!has_setup) {
     a78:	71 10       	cpse	r7, r1
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <__stack+0x183>
                    setup();
     a7c:	f4 01       	movw	r30, r8
     a7e:	09 95       	icall
                    has_setup = 1;
     a80:	72 2c       	mov	r7, r2
                }
                kilo_state = RUNNING;
     a82:	30 92 0c 01 	sts	0x010C, r3	; 0x80010c <kilo_state>
            case RUNNING:
                loop();
     a86:	f7 01       	movw	r30, r14
     a88:	09 95       	icall
                break;
     a8a:	49 cf       	rjmp	.-366    	; 0x91e <__stack+0x1f>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a8c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     a90:	81 11       	cpse	r24, r1
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <__stack+0x1a3>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a94:	f5 01       	movw	r30, r10
     a96:	10 82       	st	Z, r1
    OCR2B = cw;
     a98:	f6 01       	movw	r30, r12
     a9a:	10 82       	st	Z, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     a9c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
     aa0:	3e cf       	rjmp	.-388    	; 0x91e <__stack+0x1f>
                } else {
                    if (cur_motion != prev_motion) {
     aa2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
     aa6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <prev_motion>
     aaa:	98 17       	cp	r25, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	37 cf       	rjmp	.-402    	; 0x91e <__stack+0x1f>
                        prev_motion = cur_motion;
     ab0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     ab4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ab8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	89 f4       	brne	.+34     	; 0xae2 <__stack+0x1e3>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac0:	f5 01       	movw	r30, r10
     ac2:	60 82       	st	Z, r6
    OCR2B = cw;
     ac4:	f6 01       	movw	r30, r12
     ac6:	10 82       	st	Z, r1
     ac8:	8f e2       	ldi	r24, 0x2F	; 47
     aca:	95 e7       	ldi	r25, 0x75	; 117
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <__stack+0x1cd>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <__stack+0x1d3>
     ad2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ad4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ad8:	f5 01       	movw	r30, r10
     ada:	80 83       	st	Z, r24
    OCR2B = cw;
     adc:	f6 01       	movw	r30, r12
     ade:	10 82       	st	Z, r1
     ae0:	1e cf       	rjmp	.-452    	; 0x91e <__stack+0x1f>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ae2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	89 f4       	brne	.+34     	; 0xb0c <__stack+0x20d>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aea:	f5 01       	movw	r30, r10
     aec:	10 82       	st	Z, r1
    OCR2B = cw;
     aee:	f6 01       	movw	r30, r12
     af0:	60 82       	st	Z, r6
     af2:	8f e2       	ldi	r24, 0x2F	; 47
     af4:	95 e7       	ldi	r25, 0x75	; 117
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <__stack+0x1f7>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <__stack+0x1fd>
     afc:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     afe:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b02:	f5 01       	movw	r30, r10
     b04:	10 82       	st	Z, r1
    OCR2B = cw;
     b06:	f6 01       	movw	r30, r12
     b08:	80 83       	st	Z, r24
     b0a:	09 cf       	rjmp	.-494    	; 0x91e <__stack+0x1f>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b0c:	f5 01       	movw	r30, r10
     b0e:	10 82       	st	Z, r1
    OCR2B = cw;
     b10:	f6 01       	movw	r30, r12
     b12:	60 82       	st	Z, r6
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b14:	f5 01       	movw	r30, r10
     b16:	60 82       	st	Z, r6
    OCR2B = cw;
     b18:	f6 01       	movw	r30, r12
     b1a:	60 82       	st	Z, r6
     b1c:	8f e2       	ldi	r24, 0x2F	; 47
     b1e:	95 e7       	ldi	r25, 0x75	; 117
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <__stack+0x221>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <__stack+0x227>
     b26:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b28:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <kilo_straight_right>
     b2c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b30:	f5 01       	movw	r30, r10
     b32:	90 83       	st	Z, r25
    OCR2B = cw;
     b34:	f6 01       	movw	r30, r12
     b36:	80 83       	st	Z, r24
     b38:	f2 ce       	rjmp	.-540    	; 0x91e <__stack+0x1f>

00000b3a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
    rx_timer_off();
     b48:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     b4c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b50:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_leadingbit>
    rx_leadingbyte = 1;
     b5a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbyte>
    rx_busy = 0;
     b5e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>
    adc_trigger_high_gain();
     b62:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     b66:	93 ea       	ldi	r25, 0xA3	; 163
     b68:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     b6c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ba4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ba8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bb2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rx_leadingbit>
     bb6:	88 23       	and	r24, r24
     bb8:	31 f1       	breq	.+76     	; 0xc06 <__vector_23+0x88>
        rx_timer_on();
     bba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bbe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
     bc8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rx_bytevalue>
        rx_leadingbit = 0;
     bcc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rx_leadingbit>
        if (rx_leadingbyte) {
     bd0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_leadingbyte>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <__vector_23+0x5c>
     bd8:	ca c1       	rjmp	.+916    	; 0xf6e <__vector_23+0x3f0>
            adc_finish_conversion();
     bda:	ea e7       	ldi	r30, 0x7A	; 122
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	86 fd       	sbrc	r24, 6
     be2:	fd cf       	rjmp	.-6      	; 0xbde <__vector_23+0x60>
            rx_dist.high_gain = ADCW;
     be4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     be8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     bec:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <rx_dist+0x3>
     bf0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_dist+0x2>
            adc_trigger_low_gain();
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     bfa:	93 ea       	ldi	r25, 0xA3	; 163
     bfc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c00:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     c04:	b4 c1       	rjmp	.+872    	; 0xf6e <__vector_23+0x3f0>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c06:	c9 01       	movw	r24, r18
     c08:	87 58       	subi	r24, 0x87	; 135
     c0a:	91 09       	sbc	r25, r1
     c0c:	84 37       	cpi	r24, 0x74	; 116
     c0e:	99 40       	sbci	r25, 0x09	; 9
     c10:	a8 f0       	brcs	.+42     	; 0xc3c <__vector_23+0xbe>
            rx_timer_off();
     c12:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     c16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_leadingbit>
            rx_leadingbyte = 1;
     c24:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbyte>
            rx_busy = 0;
     c28:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>
            adc_trigger_high_gain();
     c2c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c30:	93 ea       	ldi	r25, 0xA3	; 163
     c32:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c36:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     c3a:	99 c1       	rjmp	.+818    	; 0xf6e <__vector_23+0x3f0>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c3c:	26 58       	subi	r18, 0x86	; 134
     c3e:	31 09       	sbc	r19, r1
     c40:	a4 ef       	ldi	r26, 0xF4	; 244
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	0e 94 12 0b 	call	0x1624	; 0x1624 <__umulhisi3>
     c48:	aa 27       	eor	r26, r26
     c4a:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	78 f4       	brcc	.+30     	; 0xc6e <__vector_23+0xf0>
                rx_bytevalue |= (1<<bitindex);
     c50:	21 e0       	ldi	r18, 0x01	; 1
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__vector_23+0xde>
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	8a 95       	dec	r24
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <__vector_23+0xda>
     c60:	cf 01       	movw	r24, r30
     c62:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_bytevalue>
     c66:	89 2b       	or	r24, r25
     c68:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rx_bytevalue>
     c6c:	80 c1       	rjmp	.+768    	; 0xf6e <__vector_23+0x3f0>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_leadingbit>
                if (rx_leadingbyte) {
     c74:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_leadingbyte>
     c78:	88 23       	and	r24, r24
     c7a:	51 f1       	breq	.+84     	; 0xcd0 <__vector_23+0x152>
                    adc_finish_conversion();
     c7c:	ea e7       	ldi	r30, 0x7A	; 122
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	86 fd       	sbrc	r24, 6
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <__vector_23+0x102>
                    rx_dist.low_gain = ADCW;
     c86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     c8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     c8e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <rx_dist+0x1>
     c92:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rx_dist>
                    adc_trigger_high_gain();
     c96:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c9a:	83 ea       	ldi	r24, 0xA3	; 163
     c9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
     ca6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_bytevalue>
     caa:	88 23       	and	r24, r24
     cac:	61 f0       	breq	.+24     	; 0xcc6 <__vector_23+0x148>
                        rx_timer_off();
     cae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     cb2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cb6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbyte>
                        rx_busy = 0;
     cc0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>
     cc4:	54 c1       	rjmp	.+680    	; 0xf6e <__vector_23+0x3f0>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cc6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <rx_leadingbyte>
                        rx_byteindex = 0;
     cca:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_byteindex>
     cce:	4f c1       	rjmp	.+670    	; 0xf6e <__vector_23+0x3f0>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     cd0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_byteindex>
     cd4:	e8 2f       	mov	r30, r24
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	e0 5a       	subi	r30, 0xA0	; 160
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_bytevalue>
     ce0:	90 83       	st	Z, r25
                    rx_byteindex++;
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ce8:	8c 30       	cpi	r24, 0x0C	; 12
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_23+0x170>
     cec:	40 c1       	rjmp	.+640    	; 0xf6e <__vector_23+0x3f0>
                        rx_timer_off();
     cee:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     cf2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cf6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbyte>
                        rx_busy = 0;
     d00:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d04:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <rx_msg+0xa>
     d08:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <rx_msg+0xb>
     d0c:	80 e6       	ldi	r24, 0x60	; 96
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
     d14:	c8 17       	cp	r28, r24
     d16:	d9 07       	cpc	r29, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_23+0x19e>
     d1a:	29 c1       	rjmp	.+594    	; 0xf6e <__vector_23+0x3f0>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d1c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x9>
     d20:	88 23       	and	r24, r24
     d22:	54 f0       	brlt	.+20     	; 0xd38 <__vector_23+0x1ba>
        kilo_message_rx(&rx_msg, &rx_dist);
     d24:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <kilo_message_rx>
     d28:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <kilo_message_rx+0x1>
     d2c:	65 e3       	ldi	r22, 0x35	; 53
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	80 e6       	ldi	r24, 0x60	; 96
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	09 95       	icall
     d36:	1b c1       	rjmp	.+566    	; 0xf6e <__vector_23+0x3f0>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d38:	88 58       	subi	r24, 0x88	; 136
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	30 f0       	brcs	.+12     	; 0xd4a <__vector_23+0x1cc>
        motors_off();
     d3e:	53 98       	cbi	0x0a, 3	; 10
     d40:	23 98       	cbi	0x04, 3	; 4
     d42:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     d46:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
     d4a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x9>
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	e0 58       	subi	r30, 0x80	; 128
     d54:	f1 09       	sbc	r31, r1
     d56:	eb 30       	cpi	r30, 0x0B	; 11
     d58:	f1 05       	cpc	r31, r1
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <__vector_23+0x1e0>
     d5c:	08 c1       	rjmp	.+528    	; 0xf6e <__vector_23+0x3f0>
     d5e:	e5 5c       	subi	r30, 0xC5	; 197
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d66:	ee e6       	ldi	r30, 0x6E	; 110
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 83       	st	Z, r24
     d70:	16 bc       	out	0x26, r1	; 38
            bootload();
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f0 e7       	ldi	r31, 0x70	; 112
     d76:	09 95       	icall
            break;
        case RESET:
            reset();
     d78:	e0 e0       	ldi	r30, 0x00	; 0
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d7e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <kilo_state>
     d82:	f5 c0       	rjmp	.+490    	; 0xf6e <__vector_23+0x3f0>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     d8a:	f1 c0       	rjmp	.+482    	; 0xf6e <__vector_23+0x3f0>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     d92:	ed c0       	rjmp	.+474    	; 0xf6e <__vector_23+0x3f0>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     d9a:	e9 c0       	rjmp	.+466    	; 0xf6e <__vector_23+0x3f0>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d9c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	09 f4       	brne	.+2      	; 0xda6 <__vector_23+0x228>
     da4:	e4 c0       	rjmp	.+456    	; 0xf6e <__vector_23+0x3f0>
     da6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__vector_23+0x232>
     dae:	df c0       	rjmp	.+446    	; 0xf6e <__vector_23+0x3f0>
                motors_on();
     db0:	53 9a       	sbi	0x0a, 3	; 10
     db2:	23 9a       	sbi	0x04, 3	; 4
     db4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     db8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     dc2:	d5 c0       	rjmp	.+426    	; 0xf6e <__vector_23+0x3f0>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dc4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <__vector_23+0x250>
     dcc:	4b c0       	rjmp	.+150    	; 0xe64 <__vector_23+0x2e6>
     dce:	28 f4       	brcc	.+10     	; 0xdda <__vector_23+0x25c>
     dd0:	88 23       	and	r24, r24
     dd2:	51 f0       	breq	.+20     	; 0xde8 <__vector_23+0x26a>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	d9 f1       	breq	.+118    	; 0xe4e <__vector_23+0x2d0>
     dd8:	8c c0       	rjmp	.+280    	; 0xef2 <__vector_23+0x374>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	09 f4       	brne	.+2      	; 0xde0 <__vector_23+0x262>
     dde:	57 c0       	rjmp	.+174    	; 0xe8e <__vector_23+0x310>
     de0:	84 30       	cpi	r24, 0x04	; 4
     de2:	09 f4       	brne	.+2      	; 0xde6 <__vector_23+0x268>
     de4:	68 c0       	rjmp	.+208    	; 0xeb6 <__vector_23+0x338>
     de6:	85 c0       	rjmp	.+266    	; 0xef2 <__vector_23+0x374>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     de8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     dec:	86 30       	cpi	r24, 0x06	; 6
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__vector_23+0x274>
     df0:	be c0       	rjmp	.+380    	; 0xf6e <__vector_23+0x3f0>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     df2:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_uid>
     df6:	80 eb       	ldi	r24, 0xB0	; 176
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     dfe:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <kilo_uid+0x1>
     e02:	81 eb       	ldi	r24, 0xB1	; 177
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e0a:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kilo_turn_left>
     e0e:	85 e0       	ldi	r24, 0x05	; 5
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e16:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <kilo_turn_right>
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e22:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <kilo_straight_left>
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e2e:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <kilo_straight_right>
     e32:	84 e1       	ldi	r24, 0x14	; 20
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 99 0b 	call	0x1732	; 0x1732 <eeprom_write_byte>
                        motors_off();
     e3a:	53 98       	cbi	0x0a, 3	; 10
     e3c:	23 98       	cbi	0x04, 3	; 4
     e3e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     e42:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     e4c:	52 c0       	rjmp	.+164    	; 0xef2 <__vector_23+0x374>
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e4e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <rx_msg+0x1>
     e52:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <rx_msg+0x2>
     e56:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <kilo_uid+0x1>
     e5a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_uid>
                    cur_motion = MOVE_STOP;
     e5e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     e62:	4b c0       	rjmp	.+150    	; 0xefa <__vector_23+0x37c>
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e64:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	39 f4       	brne	.+14     	; 0xe7a <__vector_23+0x2fc>
     e6c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <rx_msg+0x3>
     e70:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kilo_turn_left>
     e74:	98 17       	cp	r25, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <__vector_23+0x2fc>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     e7a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_LEFT;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_turn_left = calibmsg->turn_left;
     e84:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <rx_msg+0x3>
     e88:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kilo_turn_left>
     e8c:	36 c0       	rjmp	.+108    	; 0xefa <__vector_23+0x37c>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e8e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	31 f4       	brne	.+12     	; 0xea2 <__vector_23+0x324>
     e96:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <rx_msg+0x4>
     e9a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <kilo_turn_right>
     e9e:	98 17       	cp	r25, r24
     ea0:	61 f1       	breq	.+88     	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     ea2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_RIGHT;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_turn_right = calibmsg->turn_right;
     eac:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_msg+0x4>
     eb0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <kilo_turn_right>
     eb4:	22 c0       	rjmp	.+68     	; 0xefa <__vector_23+0x37c>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     eb6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	61 f4       	brne	.+24     	; 0xed6 <__vector_23+0x358>
     ebe:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <rx_msg+0x6>
     ec2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <kilo_straight_right>
     ec6:	98 13       	cpse	r25, r24
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <__vector_23+0x358>
     eca:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <rx_msg+0x5>
     ece:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <kilo_straight_left>
     ed2:	98 17       	cp	r25, r24
     ed4:	91 f0       	breq	.+36     	; 0xefa <__vector_23+0x37c>
                        prev_motion = MOVE_STOP;
     ed6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
                        kilo_straight_left = calibmsg->straight_left;
     ee0:	e0 e6       	ldi	r30, 0x60	; 96
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	85 81       	ldd	r24, Z+5	; 0x05
     ee6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <kilo_straight_right>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <__vector_23+0x37c>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ef2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg>
     ef6:	88 23       	and	r24, r24
     ef8:	d1 f1       	breq	.+116    	; 0xf6e <__vector_23+0x3f0>
     efa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	b1 f1       	breq	.+108    	; 0xf6e <__vector_23+0x3f0>
                motors_on();
     f02:	53 9a       	sbi	0x0a, 3	; 10
     f04:	23 9a       	sbi	0x04, 3	; 4
     f06:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     f0a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
     f14:	2c c0       	rjmp	.+88     	; 0xf6e <__vector_23+0x3f0>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f16:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <kilo_state>
     f1a:	86 30       	cpi	r24, 0x06	; 6
     f1c:	81 f0       	breq	.+32     	; 0xf3e <__vector_23+0x3c0>
                motors_on();
     f1e:	53 9a       	sbi	0x0a, 3	; 10
     f20:	23 9a       	sbi	0x04, 3	; 4
     f22:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     f26:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                set_color(RGB(0,0,0));
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f30:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     f34:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_motion>
                kilo_state = MOVING;
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c 01       	movw	r18, r24
     f44:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <rx_msg>
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__vector_23+0x3d0>
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <__vector_23+0x3cc>
     f52:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_uid>
     f56:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <kilo_uid+0x1>
     f5a:	82 23       	and	r24, r18
     f5c:	93 23       	and	r25, r19
     f5e:	89 2b       	or	r24, r25
     f60:	21 f0       	breq	.+8      	; 0xf6a <__vector_23+0x3ec>
                cur_motion = MOVE_LEFT;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <__vector_23+0x3f0>
            else
                cur_motion = MOVE_STOP;
     f6a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
                    }
                }
            }
        }
    }
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f94:	fc 01       	movw	r30, r24
     f96:	ac 01       	movw	r20, r24
     f98:	46 5f       	subi	r20, 0xF6	; 246
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     fa0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     fa2:	82 27       	eor	r24, r18
     fa4:	08 2e       	mov	r0, r24
     fa6:	82 95       	swap	r24
     fa8:	80 7f       	andi	r24, 0xF0	; 240
     faa:	80 25       	eor	r24, r0
     fac:	09 2e       	mov	r0, r25
     fae:	98 2f       	mov	r25, r24
     fb0:	82 95       	swap	r24
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	08 26       	eor	r0, r24
     fb6:	86 95       	lsr	r24
     fb8:	98 27       	eor	r25, r24
     fba:	89 27       	eor	r24, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	88 0f       	add	r24, r24
     fc0:	88 0f       	add	r24, r24
     fc2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fc4:	e4 17       	cp	r30, r20
     fc6:	f5 07       	cpc	r31, r21
     fc8:	59 f7       	brne	.-42     	; 0xfa0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fca:	08 95       	ret

00000fcc <message_tx>:
	}
}

void move_random() {
	
	set_motion(FORWARD);
     fcc:	84 e8       	ldi	r24, 0x84	; 132
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	08 95       	ret

00000fd2 <message_tx_success>:
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <message_sent+0x1>
     fda:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <message_sent>
     fde:	08 95       	ret

00000fe0 <setup2>:
     fe0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_uid>
     fe4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <kilo_uid+0x1>
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	91 05       	cpc	r25, r1
     fec:	61 f4       	brne	.+24     	; 0x1006 <setup2+0x26>
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <toCloseDistance>
     ff4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <correctDistance>
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <direction>
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <counterDirection>
    1004:	08 95       	ret
    1006:	05 97       	sbiw	r24, 0x05	; 5
    1008:	61 f4       	brne	.+24     	; 0x1022 <setup2+0x42>
    100a:	88 e2       	ldi	r24, 0x28	; 40
    100c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <toCloseDistance>
    1010:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <correctDistance>
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <direction>
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <counterDirection>
    1020:	08 95       	ret
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <toCloseDistance>
    1028:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <correctDistance>
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <direction>
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <counterDirection>
    1038:	08 95       	ret

0000103a <message_rx>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	9c e0       	ldi	r25, 0x0C	; 12
    1042:	fe 01       	movw	r30, r28
    1044:	a5 e7       	ldi	r26, 0x75	; 117
    1046:	b1 e0       	ldi	r27, 0x01	; 1
    1048:	01 90       	ld	r0, Z+
    104a:	0d 92       	st	X+, r0
    104c:	9a 95       	dec	r25
    104e:	e1 f7       	brne	.-8      	; 0x1048 <message_rx+0xe>
    1050:	88 81       	ld	r24, Y
    1052:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <data>
    1056:	cb 01       	movw	r24, r22
    1058:	0e 94 2b 02 	call	0x456	; 0x456 <estimate_distance>
    105c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <dist>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <new_message+0x1>
    1068:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <new_message>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <setup1>:
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	c4 e8       	ldi	r28, 0x84	; 132
    1078:	d1 e0       	ldi	r29, 0x01	; 1
    107a:	19 86       	std	Y+9, r1	; 0x09
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	88 83       	st	Y, r24
    1080:	ce 01       	movw	r24, r28
    1082:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
    1086:	9b 87       	std	Y+11, r25	; 0x0b
    1088:	8a 87       	std	Y+10, r24	; 0x0a
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <loop1>:
    1090:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <message_sent>
    1094:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <message_sent+0x1>
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	71 f4       	brne	.+28     	; 0x10b8 <loop1+0x28>
    109c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent+0x1>
    10a0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <message_sent>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    10b8:	08 95       	ret

000010ba <set_motion>:
    10ba:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <current_motion>
    10be:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <current_motion+0x1>
    10c2:	28 17       	cp	r18, r24
    10c4:	39 07       	cpc	r19, r25
    10c6:	59 f1       	breq	.+86     	; 0x111e <set_motion+0x64>
    10c8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current_motion+0x1>
    10cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current_motion>
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	29 f4       	brne	.+10     	; 0x10de <set_motion+0x24>
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    10dc:	08 95       	ret
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	49 f4       	brne	.+18     	; 0x10f6 <set_motion+0x3c>
    10e4:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    10e8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <kilo_straight_right>
    10ec:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <kilo_straight_left>
    10f0:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    10f4:	08 95       	ret
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	91 05       	cpc	r25, r1
    10fa:	41 f4       	brne	.+16     	; 0x110c <set_motion+0x52>
    10fc:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kilo_turn_left>
    1106:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    110a:	08 95       	ret
    110c:	03 97       	sbiw	r24, 0x03	; 3
    110e:	39 f4       	brne	.+14     	; 0x111e <set_motion+0x64>
    1110:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
    1114:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <kilo_turn_right>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 01 02 	call	0x402	; 0x402 <set_motors>
    111e:	08 95       	ret

00001120 <loop2>:
    1120:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <new_message>
    1124:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <new_message+0x1>
    1128:	89 2b       	or	r24, r25
    112a:	19 f1       	breq	.+70     	; 0x1172 <loop2+0x52>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 5d 08 	call	0x10ba	; 0x10ba <set_motion>
    1134:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <new_message+0x1>
    1138:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <new_message>
    113c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <dist>
    1140:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <toCloseDistance>
    1144:	89 17       	cp	r24, r25
    1146:	48 f4       	brcc	.+18     	; 0x115a <loop2+0x3a>
    1148:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <counterDirection>
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <set_motion>
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    1158:	08 95       	ret
    115a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <correctDistance>
    115e:	89 17       	cp	r24, r25
    1160:	40 f0       	brcs	.+16     	; 0x1172 <loop2+0x52>
    1162:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <direction>
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 5d 08 	call	0x10ba	; 0x10ba <set_motion>
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_color>
    1172:	08 95       	ret

00001174 <main>:

/* Sfarsit */

int main(void)
{
	kilo_init();
    1174:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <kilo_init>
	if(kilo_uid == 3 || kilo_uid == 9 || kilo_uid == 2) {
    1178:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_uid>
    117c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <kilo_uid+0x1>
    1180:	89 30       	cpi	r24, 0x09	; 9
    1182:	91 05       	cpc	r25, r1
    1184:	19 f0       	breq	.+6      	; 0x118c <main+0x18>
    1186:	02 97       	sbiw	r24, 0x02	; 2
    1188:	02 97       	sbiw	r24, 0x02	; 2
    118a:	98 f4       	brcc	.+38     	; 0x11b2 <main+0x3e>
		/* Robotii beacon */
		kilo_message_tx = message_tx;
    118c:	86 ee       	ldi	r24, 0xE6	; 230
    118e:	97 e0       	ldi	r25, 0x07	; 7
    1190:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_tx+0x1>
    1194:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_tx>
		kilo_message_tx_success = message_tx_success;
    1198:	89 ee       	ldi	r24, 0xE9	; 233
    119a:	97 e0       	ldi	r25, 0x07	; 7
    119c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx_success+0x1>
    11a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx_success>
		kilo_start(setup1, loop1);
    11a4:	68 e4       	ldi	r22, 0x48	; 72
    11a6:	78 e0       	ldi	r23, 0x08	; 8
    11a8:	89 e3       	ldi	r24, 0x39	; 57
    11aa:	98 e0       	ldi	r25, 0x08	; 8
    11ac:	0e 94 6f 04 	call	0x8de	; 0x8de <kilo_start>
    11b0:	0c c0       	rjmp	.+24     	; 0x11ca <main+0x56>
	}
	else {
		/* Robotii care se deplaseaza */
		kilo_message_rx = message_rx;
    11b2:	8d e1       	ldi	r24, 0x1D	; 29
    11b4:	98 e0       	ldi	r25, 0x08	; 8
    11b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <kilo_message_rx+0x1>
    11ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <kilo_message_rx>
		kilo_start(setup2, loop2);
    11be:	60 e9       	ldi	r22, 0x90	; 144
    11c0:	78 e0       	ldi	r23, 0x08	; 8
    11c2:	80 ef       	ldi	r24, 0xF0	; 240
    11c4:	97 e0       	ldi	r25, 0x07	; 7
    11c6:	0e 94 6f 04 	call	0x8de	; 0x8de <kilo_start>
	}

	return 0;
}
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	08 95       	ret

000011d0 <__subsf3>:
    11d0:	50 58       	subi	r21, 0x80	; 128

000011d2 <__addsf3>:
    11d2:	bb 27       	eor	r27, r27
    11d4:	aa 27       	eor	r26, r26
    11d6:	0e 94 00 09 	call	0x1200	; 0x1200 <__addsf3x>
    11da:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_round>
    11de:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_pscA>
    11e2:	38 f0       	brcs	.+14     	; 0x11f2 <__addsf3+0x20>
    11e4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_pscB>
    11e8:	20 f0       	brcs	.+8      	; 0x11f2 <__addsf3+0x20>
    11ea:	39 f4       	brne	.+14     	; 0x11fa <__addsf3+0x28>
    11ec:	9f 3f       	cpi	r25, 0xFF	; 255
    11ee:	19 f4       	brne	.+6      	; 0x11f6 <__addsf3+0x24>
    11f0:	26 f4       	brtc	.+8      	; 0x11fa <__addsf3+0x28>
    11f2:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_nan>
    11f6:	0e f4       	brtc	.+2      	; 0x11fa <__addsf3+0x28>
    11f8:	e0 95       	com	r30
    11fa:	e7 fb       	bst	r30, 7
    11fc:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_inf>

00001200 <__addsf3x>:
    1200:	e9 2f       	mov	r30, r25
    1202:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_split3>
    1206:	58 f3       	brcs	.-42     	; 0x11de <__addsf3+0xc>
    1208:	ba 17       	cp	r27, r26
    120a:	62 07       	cpc	r22, r18
    120c:	73 07       	cpc	r23, r19
    120e:	84 07       	cpc	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	20 f0       	brcs	.+8      	; 0x121c <__addsf3x+0x1c>
    1214:	79 f4       	brne	.+30     	; 0x1234 <__addsf3x+0x34>
    1216:	a6 f5       	brtc	.+104    	; 0x1280 <__addsf3x+0x80>
    1218:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_zero>
    121c:	0e f4       	brtc	.+2      	; 0x1220 <__addsf3x+0x20>
    121e:	e0 95       	com	r30
    1220:	0b 2e       	mov	r0, r27
    1222:	ba 2f       	mov	r27, r26
    1224:	a0 2d       	mov	r26, r0
    1226:	0b 01       	movw	r0, r22
    1228:	b9 01       	movw	r22, r18
    122a:	90 01       	movw	r18, r0
    122c:	0c 01       	movw	r0, r24
    122e:	ca 01       	movw	r24, r20
    1230:	a0 01       	movw	r20, r0
    1232:	11 24       	eor	r1, r1
    1234:	ff 27       	eor	r31, r31
    1236:	59 1b       	sub	r21, r25
    1238:	99 f0       	breq	.+38     	; 0x1260 <__addsf3x+0x60>
    123a:	59 3f       	cpi	r21, 0xF9	; 249
    123c:	50 f4       	brcc	.+20     	; 0x1252 <__addsf3x+0x52>
    123e:	50 3e       	cpi	r21, 0xE0	; 224
    1240:	68 f1       	brcs	.+90     	; 0x129c <__addsf3x+0x9c>
    1242:	1a 16       	cp	r1, r26
    1244:	f0 40       	sbci	r31, 0x00	; 0
    1246:	a2 2f       	mov	r26, r18
    1248:	23 2f       	mov	r18, r19
    124a:	34 2f       	mov	r19, r20
    124c:	44 27       	eor	r20, r20
    124e:	58 5f       	subi	r21, 0xF8	; 248
    1250:	f3 cf       	rjmp	.-26     	; 0x1238 <__addsf3x+0x38>
    1252:	46 95       	lsr	r20
    1254:	37 95       	ror	r19
    1256:	27 95       	ror	r18
    1258:	a7 95       	ror	r26
    125a:	f0 40       	sbci	r31, 0x00	; 0
    125c:	53 95       	inc	r21
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__addsf3x+0x52>
    1260:	7e f4       	brtc	.+30     	; 0x1280 <__addsf3x+0x80>
    1262:	1f 16       	cp	r1, r31
    1264:	ba 0b       	sbc	r27, r26
    1266:	62 0b       	sbc	r22, r18
    1268:	73 0b       	sbc	r23, r19
    126a:	84 0b       	sbc	r24, r20
    126c:	ba f0       	brmi	.+46     	; 0x129c <__addsf3x+0x9c>
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	a1 f0       	breq	.+40     	; 0x129a <__addsf3x+0x9a>
    1272:	ff 0f       	add	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	c2 f7       	brpl	.-16     	; 0x126e <__addsf3x+0x6e>
    127e:	0e c0       	rjmp	.+28     	; 0x129c <__addsf3x+0x9c>
    1280:	ba 0f       	add	r27, r26
    1282:	62 1f       	adc	r22, r18
    1284:	73 1f       	adc	r23, r19
    1286:	84 1f       	adc	r24, r20
    1288:	48 f4       	brcc	.+18     	; 0x129c <__addsf3x+0x9c>
    128a:	87 95       	ror	r24
    128c:	77 95       	ror	r23
    128e:	67 95       	ror	r22
    1290:	b7 95       	ror	r27
    1292:	f7 95       	ror	r31
    1294:	9e 3f       	cpi	r25, 0xFE	; 254
    1296:	08 f0       	brcs	.+2      	; 0x129a <__addsf3x+0x9a>
    1298:	b0 cf       	rjmp	.-160    	; 0x11fa <__addsf3+0x28>
    129a:	93 95       	inc	r25
    129c:	88 0f       	add	r24, r24
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__addsf3x+0xa2>
    12a0:	99 27       	eor	r25, r25
    12a2:	ee 0f       	add	r30, r30
    12a4:	97 95       	ror	r25
    12a6:	87 95       	ror	r24
    12a8:	08 95       	ret

000012aa <__divsf3>:
    12aa:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__divsf3x>
    12ae:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_round>
    12b2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_pscB>
    12b6:	58 f0       	brcs	.+22     	; 0x12ce <__divsf3+0x24>
    12b8:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_pscA>
    12bc:	40 f0       	brcs	.+16     	; 0x12ce <__divsf3+0x24>
    12be:	29 f4       	brne	.+10     	; 0x12ca <__divsf3+0x20>
    12c0:	5f 3f       	cpi	r21, 0xFF	; 255
    12c2:	29 f0       	breq	.+10     	; 0x12ce <__divsf3+0x24>
    12c4:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_inf>
    12c8:	51 11       	cpse	r21, r1
    12ca:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_szero>
    12ce:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_nan>

000012d2 <__divsf3x>:
    12d2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_split3>
    12d6:	68 f3       	brcs	.-38     	; 0x12b2 <__divsf3+0x8>

000012d8 <__divsf3_pse>:
    12d8:	99 23       	and	r25, r25
    12da:	b1 f3       	breq	.-20     	; 0x12c8 <__divsf3+0x1e>
    12dc:	55 23       	and	r21, r21
    12de:	91 f3       	breq	.-28     	; 0x12c4 <__divsf3+0x1a>
    12e0:	95 1b       	sub	r25, r21
    12e2:	55 0b       	sbc	r21, r21
    12e4:	bb 27       	eor	r27, r27
    12e6:	aa 27       	eor	r26, r26
    12e8:	62 17       	cp	r22, r18
    12ea:	73 07       	cpc	r23, r19
    12ec:	84 07       	cpc	r24, r20
    12ee:	38 f0       	brcs	.+14     	; 0x12fe <__divsf3_pse+0x26>
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	22 0f       	add	r18, r18
    12f6:	33 1f       	adc	r19, r19
    12f8:	44 1f       	adc	r20, r20
    12fa:	aa 1f       	adc	r26, r26
    12fc:	a9 f3       	breq	.-22     	; 0x12e8 <__divsf3_pse+0x10>
    12fe:	35 d0       	rcall	.+106    	; 0x136a <__divsf3_pse+0x92>
    1300:	0e 2e       	mov	r0, r30
    1302:	3a f0       	brmi	.+14     	; 0x1312 <__divsf3_pse+0x3a>
    1304:	e0 e8       	ldi	r30, 0x80	; 128
    1306:	32 d0       	rcall	.+100    	; 0x136c <__divsf3_pse+0x94>
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	e6 95       	lsr	r30
    130e:	00 1c       	adc	r0, r0
    1310:	ca f7       	brpl	.-14     	; 0x1304 <__divsf3_pse+0x2c>
    1312:	2b d0       	rcall	.+86     	; 0x136a <__divsf3_pse+0x92>
    1314:	fe 2f       	mov	r31, r30
    1316:	29 d0       	rcall	.+82     	; 0x136a <__divsf3_pse+0x92>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	bb 1f       	adc	r27, r27
    1320:	26 17       	cp	r18, r22
    1322:	37 07       	cpc	r19, r23
    1324:	48 07       	cpc	r20, r24
    1326:	ab 07       	cpc	r26, r27
    1328:	b0 e8       	ldi	r27, 0x80	; 128
    132a:	09 f0       	breq	.+2      	; 0x132e <__divsf3_pse+0x56>
    132c:	bb 0b       	sbc	r27, r27
    132e:	80 2d       	mov	r24, r0
    1330:	bf 01       	movw	r22, r30
    1332:	ff 27       	eor	r31, r31
    1334:	93 58       	subi	r25, 0x83	; 131
    1336:	5f 4f       	sbci	r21, 0xFF	; 255
    1338:	3a f0       	brmi	.+14     	; 0x1348 <__divsf3_pse+0x70>
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	51 05       	cpc	r21, r1
    133e:	78 f0       	brcs	.+30     	; 0x135e <__divsf3_pse+0x86>
    1340:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_inf>
    1344:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_szero>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	e4 f3       	brlt	.-8      	; 0x1344 <__divsf3_pse+0x6c>
    134c:	98 3e       	cpi	r25, 0xE8	; 232
    134e:	d4 f3       	brlt	.-12     	; 0x1344 <__divsf3_pse+0x6c>
    1350:	86 95       	lsr	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b7 95       	ror	r27
    1358:	f7 95       	ror	r31
    135a:	9f 5f       	subi	r25, 0xFF	; 255
    135c:	c9 f7       	brne	.-14     	; 0x1350 <__divsf3_pse+0x78>
    135e:	88 0f       	add	r24, r24
    1360:	91 1d       	adc	r25, r1
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	97 f9       	bld	r25, 7
    1368:	08 95       	ret
    136a:	e1 e0       	ldi	r30, 0x01	; 1
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	bb 1f       	adc	r27, r27
    1374:	62 17       	cp	r22, r18
    1376:	73 07       	cpc	r23, r19
    1378:	84 07       	cpc	r24, r20
    137a:	ba 07       	cpc	r27, r26
    137c:	20 f0       	brcs	.+8      	; 0x1386 <__divsf3_pse+0xae>
    137e:	62 1b       	sub	r22, r18
    1380:	73 0b       	sbc	r23, r19
    1382:	84 0b       	sbc	r24, r20
    1384:	ba 0b       	sbc	r27, r26
    1386:	ee 1f       	adc	r30, r30
    1388:	88 f7       	brcc	.-30     	; 0x136c <__divsf3_pse+0x94>
    138a:	e0 95       	com	r30
    138c:	08 95       	ret

0000138e <__fixsfsi>:
    138e:	0e 94 ce 09 	call	0x139c	; 0x139c <__fixunssfsi>
    1392:	68 94       	set
    1394:	b1 11       	cpse	r27, r1
    1396:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_szero>
    139a:	08 95       	ret

0000139c <__fixunssfsi>:
    139c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fp_splitA>
    13a0:	88 f0       	brcs	.+34     	; 0x13c4 <__fixunssfsi+0x28>
    13a2:	9f 57       	subi	r25, 0x7F	; 127
    13a4:	98 f0       	brcs	.+38     	; 0x13cc <__fixunssfsi+0x30>
    13a6:	b9 2f       	mov	r27, r25
    13a8:	99 27       	eor	r25, r25
    13aa:	b7 51       	subi	r27, 0x17	; 23
    13ac:	b0 f0       	brcs	.+44     	; 0x13da <__fixunssfsi+0x3e>
    13ae:	e1 f0       	breq	.+56     	; 0x13e8 <__fixunssfsi+0x4c>
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	1a f0       	brmi	.+6      	; 0x13c0 <__fixunssfsi+0x24>
    13ba:	ba 95       	dec	r27
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <__fixunssfsi+0x14>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <__fixunssfsi+0x4c>
    13c0:	b1 30       	cpi	r27, 0x01	; 1
    13c2:	91 f0       	breq	.+36     	; 0x13e8 <__fixunssfsi+0x4c>
    13c4:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_zero>
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	08 95       	ret
    13cc:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_zero>
    13d0:	67 2f       	mov	r22, r23
    13d2:	78 2f       	mov	r23, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	b8 5f       	subi	r27, 0xF8	; 248
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <__fixunssfsi+0x4c>
    13da:	b9 3f       	cpi	r27, 0xF9	; 249
    13dc:	cc f3       	brlt	.-14     	; 0x13d0 <__fixunssfsi+0x34>
    13de:	86 95       	lsr	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b3 95       	inc	r27
    13e6:	d9 f7       	brne	.-10     	; 0x13de <__fixunssfsi+0x42>
    13e8:	3e f4       	brtc	.+14     	; 0x13f8 <__fixunssfsi+0x5c>
    13ea:	90 95       	com	r25
    13ec:	80 95       	com	r24
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	08 95       	ret

000013fa <__floatunsisf>:
    13fa:	e8 94       	clt
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <__floatsisf+0x12>

000013fe <__floatsisf>:
    13fe:	97 fb       	bst	r25, 7
    1400:	3e f4       	brtc	.+14     	; 0x1410 <__floatsisf+0x12>
    1402:	90 95       	com	r25
    1404:	80 95       	com	r24
    1406:	70 95       	com	r23
    1408:	61 95       	neg	r22
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	99 23       	and	r25, r25
    1412:	a9 f0       	breq	.+42     	; 0x143e <__floatsisf+0x40>
    1414:	f9 2f       	mov	r31, r25
    1416:	96 e9       	ldi	r25, 0x96	; 150
    1418:	bb 27       	eor	r27, r27
    141a:	93 95       	inc	r25
    141c:	f6 95       	lsr	r31
    141e:	87 95       	ror	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b7 95       	ror	r27
    1426:	f1 11       	cpse	r31, r1
    1428:	f8 cf       	rjmp	.-16     	; 0x141a <__floatsisf+0x1c>
    142a:	fa f4       	brpl	.+62     	; 0x146a <__floatsisf+0x6c>
    142c:	bb 0f       	add	r27, r27
    142e:	11 f4       	brne	.+4      	; 0x1434 <__floatsisf+0x36>
    1430:	60 ff       	sbrs	r22, 0
    1432:	1b c0       	rjmp	.+54     	; 0x146a <__floatsisf+0x6c>
    1434:	6f 5f       	subi	r22, 0xFF	; 255
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	16 c0       	rjmp	.+44     	; 0x146a <__floatsisf+0x6c>
    143e:	88 23       	and	r24, r24
    1440:	11 f0       	breq	.+4      	; 0x1446 <__floatsisf+0x48>
    1442:	96 e9       	ldi	r25, 0x96	; 150
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <__floatsisf+0x6a>
    1446:	77 23       	and	r23, r23
    1448:	21 f0       	breq	.+8      	; 0x1452 <__floatsisf+0x54>
    144a:	9e e8       	ldi	r25, 0x8E	; 142
    144c:	87 2f       	mov	r24, r23
    144e:	76 2f       	mov	r23, r22
    1450:	05 c0       	rjmp	.+10     	; 0x145c <__floatsisf+0x5e>
    1452:	66 23       	and	r22, r22
    1454:	71 f0       	breq	.+28     	; 0x1472 <__floatsisf+0x74>
    1456:	96 e8       	ldi	r25, 0x86	; 134
    1458:	86 2f       	mov	r24, r22
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	2a f0       	brmi	.+10     	; 0x146a <__floatsisf+0x6c>
    1460:	9a 95       	dec	r25
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	88 1f       	adc	r24, r24
    1468:	da f7       	brpl	.-10     	; 0x1460 <__floatsisf+0x62>
    146a:	88 0f       	add	r24, r24
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	97 f9       	bld	r25, 7
    1472:	08 95       	ret

00001474 <__fp_inf>:
    1474:	97 f9       	bld	r25, 7
    1476:	9f 67       	ori	r25, 0x7F	; 127
    1478:	80 e8       	ldi	r24, 0x80	; 128
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	08 95       	ret

00001480 <__fp_nan>:
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	80 ec       	ldi	r24, 0xC0	; 192
    1484:	08 95       	ret

00001486 <__fp_pscA>:
    1486:	00 24       	eor	r0, r0
    1488:	0a 94       	dec	r0
    148a:	16 16       	cp	r1, r22
    148c:	17 06       	cpc	r1, r23
    148e:	18 06       	cpc	r1, r24
    1490:	09 06       	cpc	r0, r25
    1492:	08 95       	ret

00001494 <__fp_pscB>:
    1494:	00 24       	eor	r0, r0
    1496:	0a 94       	dec	r0
    1498:	12 16       	cp	r1, r18
    149a:	13 06       	cpc	r1, r19
    149c:	14 06       	cpc	r1, r20
    149e:	05 06       	cpc	r0, r21
    14a0:	08 95       	ret

000014a2 <__fp_round>:
    14a2:	09 2e       	mov	r0, r25
    14a4:	03 94       	inc	r0
    14a6:	00 0c       	add	r0, r0
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__fp_round+0xc>
    14aa:	88 23       	and	r24, r24
    14ac:	52 f0       	brmi	.+20     	; 0x14c2 <__fp_round+0x20>
    14ae:	bb 0f       	add	r27, r27
    14b0:	40 f4       	brcc	.+16     	; 0x14c2 <__fp_round+0x20>
    14b2:	bf 2b       	or	r27, r31
    14b4:	11 f4       	brne	.+4      	; 0x14ba <__fp_round+0x18>
    14b6:	60 ff       	sbrs	r22, 0
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <__fp_round+0x20>
    14ba:	6f 5f       	subi	r22, 0xFF	; 255
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	8f 4f       	sbci	r24, 0xFF	; 255
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	08 95       	ret

000014c4 <__fp_split3>:
    14c4:	57 fd       	sbrc	r21, 7
    14c6:	90 58       	subi	r25, 0x80	; 128
    14c8:	44 0f       	add	r20, r20
    14ca:	55 1f       	adc	r21, r21
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <__fp_splitA+0x10>
    14ce:	5f 3f       	cpi	r21, 0xFF	; 255
    14d0:	71 f0       	breq	.+28     	; 0x14ee <__fp_splitA+0x1a>
    14d2:	47 95       	ror	r20

000014d4 <__fp_splitA>:
    14d4:	88 0f       	add	r24, r24
    14d6:	97 fb       	bst	r25, 7
    14d8:	99 1f       	adc	r25, r25
    14da:	61 f0       	breq	.+24     	; 0x14f4 <__fp_splitA+0x20>
    14dc:	9f 3f       	cpi	r25, 0xFF	; 255
    14de:	79 f0       	breq	.+30     	; 0x14fe <__fp_splitA+0x2a>
    14e0:	87 95       	ror	r24
    14e2:	08 95       	ret
    14e4:	12 16       	cp	r1, r18
    14e6:	13 06       	cpc	r1, r19
    14e8:	14 06       	cpc	r1, r20
    14ea:	55 1f       	adc	r21, r21
    14ec:	f2 cf       	rjmp	.-28     	; 0x14d2 <__fp_split3+0xe>
    14ee:	46 95       	lsr	r20
    14f0:	f1 df       	rcall	.-30     	; 0x14d4 <__fp_splitA>
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <__fp_splitA+0x30>
    14f4:	16 16       	cp	r1, r22
    14f6:	17 06       	cpc	r1, r23
    14f8:	18 06       	cpc	r1, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	f1 cf       	rjmp	.-30     	; 0x14e0 <__fp_splitA+0xc>
    14fe:	86 95       	lsr	r24
    1500:	71 05       	cpc	r23, r1
    1502:	61 05       	cpc	r22, r1
    1504:	08 94       	sec
    1506:	08 95       	ret

00001508 <__fp_zero>:
    1508:	e8 94       	clt

0000150a <__fp_szero>:
    150a:	bb 27       	eor	r27, r27
    150c:	66 27       	eor	r22, r22
    150e:	77 27       	eor	r23, r23
    1510:	cb 01       	movw	r24, r22
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__mulsf3>:
    1516:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3x>
    151a:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_round>
    151e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_pscA>
    1522:	38 f0       	brcs	.+14     	; 0x1532 <__mulsf3+0x1c>
    1524:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_pscB>
    1528:	20 f0       	brcs	.+8      	; 0x1532 <__mulsf3+0x1c>
    152a:	95 23       	and	r25, r21
    152c:	11 f0       	breq	.+4      	; 0x1532 <__mulsf3+0x1c>
    152e:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_inf>
    1532:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_nan>
    1536:	11 24       	eor	r1, r1
    1538:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_szero>

0000153c <__mulsf3x>:
    153c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_split3>
    1540:	70 f3       	brcs	.-36     	; 0x151e <__mulsf3+0x8>

00001542 <__mulsf3_pse>:
    1542:	95 9f       	mul	r25, r21
    1544:	c1 f3       	breq	.-16     	; 0x1536 <__mulsf3+0x20>
    1546:	95 0f       	add	r25, r21
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	55 1f       	adc	r21, r21
    154c:	62 9f       	mul	r22, r18
    154e:	f0 01       	movw	r30, r0
    1550:	72 9f       	mul	r23, r18
    1552:	bb 27       	eor	r27, r27
    1554:	f0 0d       	add	r31, r0
    1556:	b1 1d       	adc	r27, r1
    1558:	63 9f       	mul	r22, r19
    155a:	aa 27       	eor	r26, r26
    155c:	f0 0d       	add	r31, r0
    155e:	b1 1d       	adc	r27, r1
    1560:	aa 1f       	adc	r26, r26
    1562:	64 9f       	mul	r22, r20
    1564:	66 27       	eor	r22, r22
    1566:	b0 0d       	add	r27, r0
    1568:	a1 1d       	adc	r26, r1
    156a:	66 1f       	adc	r22, r22
    156c:	82 9f       	mul	r24, r18
    156e:	22 27       	eor	r18, r18
    1570:	b0 0d       	add	r27, r0
    1572:	a1 1d       	adc	r26, r1
    1574:	62 1f       	adc	r22, r18
    1576:	73 9f       	mul	r23, r19
    1578:	b0 0d       	add	r27, r0
    157a:	a1 1d       	adc	r26, r1
    157c:	62 1f       	adc	r22, r18
    157e:	83 9f       	mul	r24, r19
    1580:	a0 0d       	add	r26, r0
    1582:	61 1d       	adc	r22, r1
    1584:	22 1f       	adc	r18, r18
    1586:	74 9f       	mul	r23, r20
    1588:	33 27       	eor	r19, r19
    158a:	a0 0d       	add	r26, r0
    158c:	61 1d       	adc	r22, r1
    158e:	23 1f       	adc	r18, r19
    1590:	84 9f       	mul	r24, r20
    1592:	60 0d       	add	r22, r0
    1594:	21 1d       	adc	r18, r1
    1596:	82 2f       	mov	r24, r18
    1598:	76 2f       	mov	r23, r22
    159a:	6a 2f       	mov	r22, r26
    159c:	11 24       	eor	r1, r1
    159e:	9f 57       	subi	r25, 0x7F	; 127
    15a0:	50 40       	sbci	r21, 0x00	; 0
    15a2:	9a f0       	brmi	.+38     	; 0x15ca <__mulsf3_pse+0x88>
    15a4:	f1 f0       	breq	.+60     	; 0x15e2 <__mulsf3_pse+0xa0>
    15a6:	88 23       	and	r24, r24
    15a8:	4a f0       	brmi	.+18     	; 0x15bc <__mulsf3_pse+0x7a>
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	bb 1f       	adc	r27, r27
    15b0:	66 1f       	adc	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	91 50       	subi	r25, 0x01	; 1
    15b8:	50 40       	sbci	r21, 0x00	; 0
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__mulsf3_pse+0x64>
    15bc:	9e 3f       	cpi	r25, 0xFE	; 254
    15be:	51 05       	cpc	r21, r1
    15c0:	80 f0       	brcs	.+32     	; 0x15e2 <__mulsf3_pse+0xa0>
    15c2:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_inf>
    15c6:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_szero>
    15ca:	5f 3f       	cpi	r21, 0xFF	; 255
    15cc:	e4 f3       	brlt	.-8      	; 0x15c6 <__mulsf3_pse+0x84>
    15ce:	98 3e       	cpi	r25, 0xE8	; 232
    15d0:	d4 f3       	brlt	.-12     	; 0x15c6 <__mulsf3_pse+0x84>
    15d2:	86 95       	lsr	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b7 95       	ror	r27
    15da:	f7 95       	ror	r31
    15dc:	e7 95       	ror	r30
    15de:	9f 5f       	subi	r25, 0xFF	; 255
    15e0:	c1 f7       	brne	.-16     	; 0x15d2 <__mulsf3_pse+0x90>
    15e2:	fe 2b       	or	r31, r30
    15e4:	88 0f       	add	r24, r24
    15e6:	91 1d       	adc	r25, r1
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret

000015f0 <__divmodhi4>:
    15f0:	97 fb       	bst	r25, 7
    15f2:	07 2e       	mov	r0, r23
    15f4:	16 f4       	brtc	.+4      	; 0x15fa <__divmodhi4+0xa>
    15f6:	00 94       	com	r0
    15f8:	07 d0       	rcall	.+14     	; 0x1608 <__divmodhi4_neg1>
    15fa:	77 fd       	sbrc	r23, 7
    15fc:	09 d0       	rcall	.+18     	; 0x1610 <__divmodhi4_neg2>
    15fe:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodhi4>
    1602:	07 fc       	sbrc	r0, 7
    1604:	05 d0       	rcall	.+10     	; 0x1610 <__divmodhi4_neg2>
    1606:	3e f4       	brtc	.+14     	; 0x1616 <__divmodhi4_exit>

00001608 <__divmodhi4_neg1>:
    1608:	90 95       	com	r25
    160a:	81 95       	neg	r24
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__divmodhi4_neg2>:
    1610:	70 95       	com	r23
    1612:	61 95       	neg	r22
    1614:	7f 4f       	sbci	r23, 0xFF	; 255

00001616 <__divmodhi4_exit>:
    1616:	08 95       	ret

00001618 <__tablejump2__>:
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	05 90       	lpm	r0, Z+
    161e:	f4 91       	lpm	r31, Z
    1620:	e0 2d       	mov	r30, r0
    1622:	09 94       	ijmp

00001624 <__umulhisi3>:
    1624:	a2 9f       	mul	r26, r18
    1626:	b0 01       	movw	r22, r0
    1628:	b3 9f       	mul	r27, r19
    162a:	c0 01       	movw	r24, r0
    162c:	a3 9f       	mul	r26, r19
    162e:	70 0d       	add	r23, r0
    1630:	81 1d       	adc	r24, r1
    1632:	11 24       	eor	r1, r1
    1634:	91 1d       	adc	r25, r1
    1636:	b2 9f       	mul	r27, r18
    1638:	70 0d       	add	r23, r0
    163a:	81 1d       	adc	r24, r1
    163c:	11 24       	eor	r1, r1
    163e:	91 1d       	adc	r25, r1
    1640:	08 95       	ret

00001642 <__udivmodhi4>:
    1642:	aa 1b       	sub	r26, r26
    1644:	bb 1b       	sub	r27, r27
    1646:	51 e1       	ldi	r21, 0x11	; 17
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <__udivmodhi4_ep>

0000164a <__udivmodhi4_loop>:
    164a:	aa 1f       	adc	r26, r26
    164c:	bb 1f       	adc	r27, r27
    164e:	a6 17       	cp	r26, r22
    1650:	b7 07       	cpc	r27, r23
    1652:	10 f0       	brcs	.+4      	; 0x1658 <__udivmodhi4_ep>
    1654:	a6 1b       	sub	r26, r22
    1656:	b7 0b       	sbc	r27, r23

00001658 <__udivmodhi4_ep>:
    1658:	88 1f       	adc	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	5a 95       	dec	r21
    165e:	a9 f7       	brne	.-22     	; 0x164a <__udivmodhi4_loop>
    1660:	80 95       	com	r24
    1662:	90 95       	com	r25
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	08 95       	ret

0000166a <do_rand>:
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	ec 01       	movw	r28, r24
    1680:	68 81       	ld	r22, Y
    1682:	79 81       	ldd	r23, Y+1	; 0x01
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	61 15       	cp	r22, r1
    168a:	71 05       	cpc	r23, r1
    168c:	81 05       	cpc	r24, r1
    168e:	91 05       	cpc	r25, r1
    1690:	21 f4       	brne	.+8      	; 0x169a <do_rand+0x30>
    1692:	64 e2       	ldi	r22, 0x24	; 36
    1694:	79 ed       	ldi	r23, 0xD9	; 217
    1696:	8b e5       	ldi	r24, 0x5B	; 91
    1698:	97 e0       	ldi	r25, 0x07	; 7
    169a:	2d e1       	ldi	r18, 0x1D	; 29
    169c:	33 ef       	ldi	r19, 0xF3	; 243
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodsi4>
    16a6:	49 01       	movw	r8, r18
    16a8:	5a 01       	movw	r10, r20
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	a7 ea       	ldi	r26, 0xA7	; 167
    16b0:	b1 e4       	ldi	r27, 0x41	; 65
    16b2:	0e 94 c6 0b 	call	0x178c	; 0x178c <__muluhisi3>
    16b6:	6b 01       	movw	r12, r22
    16b8:	7c 01       	movw	r14, r24
    16ba:	ac ee       	ldi	r26, 0xEC	; 236
    16bc:	b4 ef       	ldi	r27, 0xF4	; 244
    16be:	a5 01       	movw	r20, r10
    16c0:	94 01       	movw	r18, r8
    16c2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__mulohisi3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8c 0d       	add	r24, r12
    16cc:	9d 1d       	adc	r25, r13
    16ce:	ae 1d       	adc	r26, r14
    16d0:	bf 1d       	adc	r27, r15
    16d2:	b7 ff       	sbrs	r27, 7
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <do_rand+0x72>
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	a1 09       	sbc	r26, r1
    16da:	b0 48       	sbci	r27, 0x80	; 128
    16dc:	88 83       	st	Y, r24
    16de:	99 83       	std	Y+1, r25	; 0x01
    16e0:	aa 83       	std	Y+2, r26	; 0x02
    16e2:	bb 83       	std	Y+3, r27	; 0x03
    16e4:	9f 77       	andi	r25, 0x7F	; 127
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	08 95       	ret

000016fc <rand_r>:
    16fc:	0e 94 35 0b 	call	0x166a	; 0x166a <do_rand>
    1700:	08 95       	ret

00001702 <rand>:
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 35 0b 	call	0x166a	; 0x166a <do_rand>
    170a:	08 95       	ret

0000170c <srand>:
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1714:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1718:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    171c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1720:	08 95       	ret

00001722 <eeprom_read_byte>:
    1722:	f9 99       	sbic	0x1f, 1	; 31
    1724:	fe cf       	rjmp	.-4      	; 0x1722 <eeprom_read_byte>
    1726:	92 bd       	out	0x22, r25	; 34
    1728:	81 bd       	out	0x21, r24	; 33
    172a:	f8 9a       	sbi	0x1f, 0	; 31
    172c:	99 27       	eor	r25, r25
    172e:	80 b5       	in	r24, 0x20	; 32
    1730:	08 95       	ret

00001732 <eeprom_write_byte>:
    1732:	26 2f       	mov	r18, r22

00001734 <eeprom_write_r18>:
    1734:	f9 99       	sbic	0x1f, 1	; 31
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <eeprom_write_r18>
    1738:	1f ba       	out	0x1f, r1	; 31
    173a:	92 bd       	out	0x22, r25	; 34
    173c:	81 bd       	out	0x21, r24	; 33
    173e:	20 bd       	out	0x20, r18	; 32
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	fa 9a       	sbi	0x1f, 2	; 31
    1746:	f9 9a       	sbi	0x1f, 1	; 31
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	08 95       	ret

0000174e <__divmodsi4>:
    174e:	05 2e       	mov	r0, r21
    1750:	97 fb       	bst	r25, 7
    1752:	1e f4       	brtc	.+6      	; 0x175a <__divmodsi4+0xc>
    1754:	00 94       	com	r0
    1756:	0e 94 be 0b 	call	0x177c	; 0x177c <__negsi2>
    175a:	57 fd       	sbrc	r21, 7
    175c:	07 d0       	rcall	.+14     	; 0x176c <__divmodsi4_neg2>
    175e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__udivmodsi4>
    1762:	07 fc       	sbrc	r0, 7
    1764:	03 d0       	rcall	.+6      	; 0x176c <__divmodsi4_neg2>
    1766:	4e f4       	brtc	.+18     	; 0x177a <__divmodsi4_exit>
    1768:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__negsi2>

0000176c <__divmodsi4_neg2>:
    176c:	50 95       	com	r21
    176e:	40 95       	com	r20
    1770:	30 95       	com	r19
    1772:	21 95       	neg	r18
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	4f 4f       	sbci	r20, 0xFF	; 255
    1778:	5f 4f       	sbci	r21, 0xFF	; 255

0000177a <__divmodsi4_exit>:
    177a:	08 95       	ret

0000177c <__negsi2>:
    177c:	90 95       	com	r25
    177e:	80 95       	com	r24
    1780:	70 95       	com	r23
    1782:	61 95       	neg	r22
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	8f 4f       	sbci	r24, 0xFF	; 255
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	08 95       	ret

0000178c <__muluhisi3>:
    178c:	0e 94 12 0b 	call	0x1624	; 0x1624 <__umulhisi3>
    1790:	a5 9f       	mul	r26, r21
    1792:	90 0d       	add	r25, r0
    1794:	b4 9f       	mul	r27, r20
    1796:	90 0d       	add	r25, r0
    1798:	a4 9f       	mul	r26, r20
    179a:	80 0d       	add	r24, r0
    179c:	91 1d       	adc	r25, r1
    179e:	11 24       	eor	r1, r1
    17a0:	08 95       	ret

000017a2 <__mulshisi3>:
    17a2:	b7 ff       	sbrs	r27, 7
    17a4:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__muluhisi3>

000017a8 <__mulohisi3>:
    17a8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__muluhisi3>
    17ac:	82 1b       	sub	r24, r18
    17ae:	93 0b       	sbc	r25, r19
    17b0:	08 95       	ret

000017b2 <__udivmodsi4>:
    17b2:	a1 e2       	ldi	r26, 0x21	; 33
    17b4:	1a 2e       	mov	r1, r26
    17b6:	aa 1b       	sub	r26, r26
    17b8:	bb 1b       	sub	r27, r27
    17ba:	fd 01       	movw	r30, r26
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <__udivmodsi4_ep>

000017be <__udivmodsi4_loop>:
    17be:	aa 1f       	adc	r26, r26
    17c0:	bb 1f       	adc	r27, r27
    17c2:	ee 1f       	adc	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	a2 17       	cp	r26, r18
    17c8:	b3 07       	cpc	r27, r19
    17ca:	e4 07       	cpc	r30, r20
    17cc:	f5 07       	cpc	r31, r21
    17ce:	20 f0       	brcs	.+8      	; 0x17d8 <__udivmodsi4_ep>
    17d0:	a2 1b       	sub	r26, r18
    17d2:	b3 0b       	sbc	r27, r19
    17d4:	e4 0b       	sbc	r30, r20
    17d6:	f5 0b       	sbc	r31, r21

000017d8 <__udivmodsi4_ep>:
    17d8:	66 1f       	adc	r22, r22
    17da:	77 1f       	adc	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	1a 94       	dec	r1
    17e2:	69 f7       	brne	.-38     	; 0x17be <__udivmodsi4_loop>
    17e4:	60 95       	com	r22
    17e6:	70 95       	com	r23
    17e8:	80 95       	com	r24
    17ea:	90 95       	com	r25
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	bd 01       	movw	r22, r26
    17f2:	cf 01       	movw	r24, r30
    17f4:	08 95       	ret

000017f6 <_exit>:
    17f6:	f8 94       	cli

000017f8 <__stop_program>:
    17f8:	ff cf       	rjmp	.-2      	; 0x17f8 <__stop_program>
